// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby_service_grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lobby_5fservice_5fgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lobby_5fservice_5fgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lobby_5fservice_5fgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lobby_5fservice_5fgrpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lobby_5fservice_5fgrpc_2eproto;
namespace lobby_service {
class RegisterServerReponse;
struct RegisterServerReponseDefaultTypeInternal;
extern RegisterServerReponseDefaultTypeInternal _RegisterServerReponse_default_instance_;
class RegisterServerRequest;
struct RegisterServerRequestDefaultTypeInternal;
extern RegisterServerRequestDefaultTypeInternal _RegisterServerRequest_default_instance_;
}  // namespace lobby_service
PROTOBUF_NAMESPACE_OPEN
template<> ::lobby_service::RegisterServerReponse* Arena::CreateMaybeMessage<::lobby_service::RegisterServerReponse>(Arena*);
template<> ::lobby_service::RegisterServerRequest* Arena::CreateMaybeMessage<::lobby_service::RegisterServerRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lobby_service {

// ===================================================================

class RegisterServerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby_service.RegisterServerRequest) */ {
 public:
  inline RegisterServerRequest() : RegisterServerRequest(nullptr) {}
  ~RegisterServerRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerRequest(const RegisterServerRequest& from);
  RegisterServerRequest(RegisterServerRequest&& from) noexcept
    : RegisterServerRequest() {
    *this = ::std::move(from);
  }

  inline RegisterServerRequest& operator=(const RegisterServerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerRequest& operator=(RegisterServerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterServerRequest*>(
               &_RegisterServerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterServerRequest& a, RegisterServerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerRequest& from) {
    RegisterServerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lobby_service.RegisterServerRequest";
  }
  protected:
  explicit RegisterServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 1,
    kServerTypeFieldNumber = 2,
  };
  // string server_address = 1;
  void clear_server_address();
  const std::string& server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_address();
  PROTOBUF_NODISCARD std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // .types.ServerType server_type = 2;
  void clear_server_type();
  ::types::ServerType server_type() const;
  void set_server_type(::types::ServerType value);
  private:
  ::types::ServerType _internal_server_type() const;
  void _internal_set_server_type(::types::ServerType value);
  public:

  // @@protoc_insertion_point(class_scope:lobby_service.RegisterServerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
    int server_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_5fservice_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class RegisterServerReponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lobby_service.RegisterServerReponse) */ {
 public:
  inline RegisterServerReponse() : RegisterServerReponse(nullptr) {}
  ~RegisterServerReponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerReponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerReponse(const RegisterServerReponse& from);
  RegisterServerReponse(RegisterServerReponse&& from) noexcept
    : RegisterServerReponse() {
    *this = ::std::move(from);
  }

  inline RegisterServerReponse& operator=(const RegisterServerReponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerReponse& operator=(RegisterServerReponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerReponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerReponse* internal_default_instance() {
    return reinterpret_cast<const RegisterServerReponse*>(
               &_RegisterServerReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterServerReponse& a, RegisterServerReponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerReponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerReponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerReponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerReponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerReponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerReponse& from) {
    RegisterServerReponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerReponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lobby_service.RegisterServerReponse";
  }
  protected:
  explicit RegisterServerReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:lobby_service.RegisterServerReponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_lobby_5fservice_5fgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterServerRequest

// string server_address = 1;
inline void RegisterServerRequest::clear_server_address() {
  _impl_.server_address_.ClearToEmpty();
}
inline const std::string& RegisterServerRequest::server_address() const {
  // @@protoc_insertion_point(field_get:lobby_service.RegisterServerRequest.server_address)
  return _internal_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerRequest::set_server_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:lobby_service.RegisterServerRequest.server_address)
}
inline std::string* RegisterServerRequest::mutable_server_address() {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:lobby_service.RegisterServerRequest.server_address)
  return _s;
}
inline const std::string& RegisterServerRequest::_internal_server_address() const {
  return _impl_.server_address_.Get();
}
inline void RegisterServerRequest::_internal_set_server_address(const std::string& value) {
  
  _impl_.server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerRequest::_internal_mutable_server_address() {
  
  return _impl_.server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerRequest::release_server_address() {
  // @@protoc_insertion_point(field_release:lobby_service.RegisterServerRequest.server_address)
  return _impl_.server_address_.Release();
}
inline void RegisterServerRequest::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    
  } else {
    
  }
  _impl_.server_address_.SetAllocated(server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:lobby_service.RegisterServerRequest.server_address)
}

// .types.ServerType server_type = 2;
inline void RegisterServerRequest::clear_server_type() {
  _impl_.server_type_ = 0;
}
inline ::types::ServerType RegisterServerRequest::_internal_server_type() const {
  return static_cast< ::types::ServerType >(_impl_.server_type_);
}
inline ::types::ServerType RegisterServerRequest::server_type() const {
  // @@protoc_insertion_point(field_get:lobby_service.RegisterServerRequest.server_type)
  return _internal_server_type();
}
inline void RegisterServerRequest::_internal_set_server_type(::types::ServerType value) {
  
  _impl_.server_type_ = value;
}
inline void RegisterServerRequest::set_server_type(::types::ServerType value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:lobby_service.RegisterServerRequest.server_type)
}

// -------------------------------------------------------------------

// RegisterServerReponse

// .types.Result result = 1;
inline void RegisterServerReponse::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result RegisterServerReponse::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result RegisterServerReponse::result() const {
  // @@protoc_insertion_point(field_get:lobby_service.RegisterServerReponse.result)
  return _internal_result();
}
inline void RegisterServerReponse::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void RegisterServerReponse::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:lobby_service.RegisterServerReponse.result)
}

// int32 server_id = 2;
inline void RegisterServerReponse::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t RegisterServerReponse::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t RegisterServerReponse::server_id() const {
  // @@protoc_insertion_point(field_get:lobby_service.RegisterServerReponse.server_id)
  return _internal_server_id();
}
inline void RegisterServerReponse::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void RegisterServerReponse::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:lobby_service.RegisterServerReponse.server_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lobby_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lobby_5fservice_5fgrpc_2eproto
