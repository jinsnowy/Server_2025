// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2eproto;
namespace world {
class ChangeServerTickIntervalReq;
struct ChangeServerTickIntervalReqDefaultTypeInternal;
extern ChangeServerTickIntervalReqDefaultTypeInternal _ChangeServerTickIntervalReq_default_instance_;
class ChangeServerTickIntervalRes;
struct ChangeServerTickIntervalResDefaultTypeInternal;
extern ChangeServerTickIntervalResDefaultTypeInternal _ChangeServerTickIntervalRes_default_instance_;
class ClientActionReq;
struct ClientActionReqDefaultTypeInternal;
extern ClientActionReqDefaultTypeInternal _ClientActionReq_default_instance_;
class ClientActionRes;
struct ClientActionResDefaultTypeInternal;
extern ClientActionResDefaultTypeInternal _ClientActionRes_default_instance_;
class ClientEnterMapNotify;
struct ClientEnterMapNotifyDefaultTypeInternal;
extern ClientEnterMapNotifyDefaultTypeInternal _ClientEnterMapNotify_default_instance_;
class ClientEnterMapReq;
struct ClientEnterMapReqDefaultTypeInternal;
extern ClientEnterMapReqDefaultTypeInternal _ClientEnterMapReq_default_instance_;
class ClientEnterMapRes;
struct ClientEnterMapResDefaultTypeInternal;
extern ClientEnterMapResDefaultTypeInternal _ClientEnterMapRes_default_instance_;
class ClientLeaveMapNotify;
struct ClientLeaveMapNotifyDefaultTypeInternal;
extern ClientLeaveMapNotifyDefaultTypeInternal _ClientLeaveMapNotify_default_instance_;
class ClientMoveReq;
struct ClientMoveReqDefaultTypeInternal;
extern ClientMoveReqDefaultTypeInternal _ClientMoveReq_default_instance_;
class ClientMoveRes;
struct ClientMoveResDefaultTypeInternal;
extern ClientMoveResDefaultTypeInternal _ClientMoveRes_default_instance_;
class DebugSimulationPositionNotify;
struct DebugSimulationPositionNotifyDefaultTypeInternal;
extern DebugSimulationPositionNotifyDefaultTypeInternal _DebugSimulationPositionNotify_default_instance_;
class DespawnNpcOnSectionNotify;
struct DespawnNpcOnSectionNotifyDefaultTypeInternal;
extern DespawnNpcOnSectionNotifyDefaultTypeInternal _DespawnNpcOnSectionNotify_default_instance_;
class DespawnProjectileOnSectionNotify;
struct DespawnProjectileOnSectionNotifyDefaultTypeInternal;
extern DespawnProjectileOnSectionNotifyDefaultTypeInternal _DespawnProjectileOnSectionNotify_default_instance_;
class HelloWorldClient;
struct HelloWorldClientDefaultTypeInternal;
extern HelloWorldClientDefaultTypeInternal _HelloWorldClient_default_instance_;
class HelloWorldServer;
struct HelloWorldServerDefaultTypeInternal;
extern HelloWorldServerDefaultTypeInternal _HelloWorldServer_default_instance_;
class HitObjectByProjectileNotify;
struct HitObjectByProjectileNotifyDefaultTypeInternal;
extern HitObjectByProjectileNotifyDefaultTypeInternal _HitObjectByProjectileNotify_default_instance_;
class HitObjectByProjectileReq;
struct HitObjectByProjectileReqDefaultTypeInternal;
extern HitObjectByProjectileReqDefaultTypeInternal _HitObjectByProjectileReq_default_instance_;
class HitObjectByProjectileRes;
struct HitObjectByProjectileResDefaultTypeInternal;
extern HitObjectByProjectileResDefaultTypeInternal _HitObjectByProjectileRes_default_instance_;
class OtherClientActionNotify;
struct OtherClientActionNotifyDefaultTypeInternal;
extern OtherClientActionNotifyDefaultTypeInternal _OtherClientActionNotify_default_instance_;
class OtherClientEnterNotify;
struct OtherClientEnterNotifyDefaultTypeInternal;
extern OtherClientEnterNotifyDefaultTypeInternal _OtherClientEnterNotify_default_instance_;
class OtherClientLeaveNotify;
struct OtherClientLeaveNotifyDefaultTypeInternal;
extern OtherClientLeaveNotifyDefaultTypeInternal _OtherClientLeaveNotify_default_instance_;
class OtherClientMoveNotify;
struct OtherClientMoveNotifyDefaultTypeInternal;
extern OtherClientMoveNotifyDefaultTypeInternal _OtherClientMoveNotify_default_instance_;
class RegisterServerReq;
struct RegisterServerReqDefaultTypeInternal;
extern RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
class RegisterServerRes;
struct RegisterServerResDefaultTypeInternal;
extern RegisterServerResDefaultTypeInternal _RegisterServerRes_default_instance_;
class SectionOwnershipChangedNotify;
struct SectionOwnershipChangedNotifyDefaultTypeInternal;
extern SectionOwnershipChangedNotifyDefaultTypeInternal _SectionOwnershipChangedNotify_default_instance_;
class ServerPingReq;
struct ServerPingReqDefaultTypeInternal;
extern ServerPingReqDefaultTypeInternal _ServerPingReq_default_instance_;
class ServerPingRes;
struct ServerPingResDefaultTypeInternal;
extern ServerPingResDefaultTypeInternal _ServerPingRes_default_instance_;
class ServerTickIntervalChangedNotify;
struct ServerTickIntervalChangedNotifyDefaultTypeInternal;
extern ServerTickIntervalChangedNotifyDefaultTypeInternal _ServerTickIntervalChangedNotify_default_instance_;
class SpawnNpcOnSectionNotify;
struct SpawnNpcOnSectionNotifyDefaultTypeInternal;
extern SpawnNpcOnSectionNotifyDefaultTypeInternal _SpawnNpcOnSectionNotify_default_instance_;
class SpawnNpcOnSectionReq;
struct SpawnNpcOnSectionReqDefaultTypeInternal;
extern SpawnNpcOnSectionReqDefaultTypeInternal _SpawnNpcOnSectionReq_default_instance_;
class SpawnNpcOnSectionRes;
struct SpawnNpcOnSectionResDefaultTypeInternal;
extern SpawnNpcOnSectionResDefaultTypeInternal _SpawnNpcOnSectionRes_default_instance_;
class SpawnProjectileOnSectionNotify;
struct SpawnProjectileOnSectionNotifyDefaultTypeInternal;
extern SpawnProjectileOnSectionNotifyDefaultTypeInternal _SpawnProjectileOnSectionNotify_default_instance_;
class SpawnProjectileOnSectionReq;
struct SpawnProjectileOnSectionReqDefaultTypeInternal;
extern SpawnProjectileOnSectionReqDefaultTypeInternal _SpawnProjectileOnSectionReq_default_instance_;
class SpawnProjectileOnSectionRes;
struct SpawnProjectileOnSectionResDefaultTypeInternal;
extern SpawnProjectileOnSectionResDefaultTypeInternal _SpawnProjectileOnSectionRes_default_instance_;
}  // namespace world
PROTOBUF_NAMESPACE_OPEN
template<> ::world::ChangeServerTickIntervalReq* Arena::CreateMaybeMessage<::world::ChangeServerTickIntervalReq>(Arena*);
template<> ::world::ChangeServerTickIntervalRes* Arena::CreateMaybeMessage<::world::ChangeServerTickIntervalRes>(Arena*);
template<> ::world::ClientActionReq* Arena::CreateMaybeMessage<::world::ClientActionReq>(Arena*);
template<> ::world::ClientActionRes* Arena::CreateMaybeMessage<::world::ClientActionRes>(Arena*);
template<> ::world::ClientEnterMapNotify* Arena::CreateMaybeMessage<::world::ClientEnterMapNotify>(Arena*);
template<> ::world::ClientEnterMapReq* Arena::CreateMaybeMessage<::world::ClientEnterMapReq>(Arena*);
template<> ::world::ClientEnterMapRes* Arena::CreateMaybeMessage<::world::ClientEnterMapRes>(Arena*);
template<> ::world::ClientLeaveMapNotify* Arena::CreateMaybeMessage<::world::ClientLeaveMapNotify>(Arena*);
template<> ::world::ClientMoveReq* Arena::CreateMaybeMessage<::world::ClientMoveReq>(Arena*);
template<> ::world::ClientMoveRes* Arena::CreateMaybeMessage<::world::ClientMoveRes>(Arena*);
template<> ::world::DebugSimulationPositionNotify* Arena::CreateMaybeMessage<::world::DebugSimulationPositionNotify>(Arena*);
template<> ::world::DespawnNpcOnSectionNotify* Arena::CreateMaybeMessage<::world::DespawnNpcOnSectionNotify>(Arena*);
template<> ::world::DespawnProjectileOnSectionNotify* Arena::CreateMaybeMessage<::world::DespawnProjectileOnSectionNotify>(Arena*);
template<> ::world::HelloWorldClient* Arena::CreateMaybeMessage<::world::HelloWorldClient>(Arena*);
template<> ::world::HelloWorldServer* Arena::CreateMaybeMessage<::world::HelloWorldServer>(Arena*);
template<> ::world::HitObjectByProjectileNotify* Arena::CreateMaybeMessage<::world::HitObjectByProjectileNotify>(Arena*);
template<> ::world::HitObjectByProjectileReq* Arena::CreateMaybeMessage<::world::HitObjectByProjectileReq>(Arena*);
template<> ::world::HitObjectByProjectileRes* Arena::CreateMaybeMessage<::world::HitObjectByProjectileRes>(Arena*);
template<> ::world::OtherClientActionNotify* Arena::CreateMaybeMessage<::world::OtherClientActionNotify>(Arena*);
template<> ::world::OtherClientEnterNotify* Arena::CreateMaybeMessage<::world::OtherClientEnterNotify>(Arena*);
template<> ::world::OtherClientLeaveNotify* Arena::CreateMaybeMessage<::world::OtherClientLeaveNotify>(Arena*);
template<> ::world::OtherClientMoveNotify* Arena::CreateMaybeMessage<::world::OtherClientMoveNotify>(Arena*);
template<> ::world::RegisterServerReq* Arena::CreateMaybeMessage<::world::RegisterServerReq>(Arena*);
template<> ::world::RegisterServerRes* Arena::CreateMaybeMessage<::world::RegisterServerRes>(Arena*);
template<> ::world::SectionOwnershipChangedNotify* Arena::CreateMaybeMessage<::world::SectionOwnershipChangedNotify>(Arena*);
template<> ::world::ServerPingReq* Arena::CreateMaybeMessage<::world::ServerPingReq>(Arena*);
template<> ::world::ServerPingRes* Arena::CreateMaybeMessage<::world::ServerPingRes>(Arena*);
template<> ::world::ServerTickIntervalChangedNotify* Arena::CreateMaybeMessage<::world::ServerTickIntervalChangedNotify>(Arena*);
template<> ::world::SpawnNpcOnSectionNotify* Arena::CreateMaybeMessage<::world::SpawnNpcOnSectionNotify>(Arena*);
template<> ::world::SpawnNpcOnSectionReq* Arena::CreateMaybeMessage<::world::SpawnNpcOnSectionReq>(Arena*);
template<> ::world::SpawnNpcOnSectionRes* Arena::CreateMaybeMessage<::world::SpawnNpcOnSectionRes>(Arena*);
template<> ::world::SpawnProjectileOnSectionNotify* Arena::CreateMaybeMessage<::world::SpawnProjectileOnSectionNotify>(Arena*);
template<> ::world::SpawnProjectileOnSectionReq* Arena::CreateMaybeMessage<::world::SpawnProjectileOnSectionReq>(Arena*);
template<> ::world::SpawnProjectileOnSectionRes* Arena::CreateMaybeMessage<::world::SpawnProjectileOnSectionRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace world {

// ===================================================================

class RegisterServerReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.RegisterServerReq) */ {
 public:
  inline RegisterServerReq() : RegisterServerReq(nullptr) {}
  ~RegisterServerReq() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerReq(const RegisterServerReq& from);
  RegisterServerReq(RegisterServerReq&& from) noexcept
    : RegisterServerReq() {
    *this = ::std::move(from);
  }

  inline RegisterServerReq& operator=(const RegisterServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerReq& operator=(RegisterServerReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerReq* internal_default_instance() {
    return reinterpret_cast<const RegisterServerReq*>(
               &_RegisterServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterServerReq& a, RegisterServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerReq& from) {
    RegisterServerReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.RegisterServerReq";
  }
  protected:
  explicit RegisterServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 1,
    kLevelMapNameFieldNumber = 3,
    kServerTypeFieldNumber = 2,
  };
  // string server_address = 1;
  void clear_server_address();
  const std::string& server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_address();
  PROTOBUF_NODISCARD std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // string level_map_name = 3;
  void clear_level_map_name();
  const std::string& level_map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level_map_name();
  PROTOBUF_NODISCARD std::string* release_level_map_name();
  void set_allocated_level_map_name(std::string* level_map_name);
  private:
  const std::string& _internal_level_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level_map_name(const std::string& value);
  std::string* _internal_mutable_level_map_name();
  public:

  // .types.ServerType server_type = 2;
  void clear_server_type();
  ::types::ServerType server_type() const;
  void set_server_type(::types::ServerType value);
  private:
  ::types::ServerType _internal_server_type() const;
  void _internal_set_server_type(::types::ServerType value);
  public:

  // @@protoc_insertion_point(class_scope:world.RegisterServerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_map_name_;
    int server_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class RegisterServerRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.RegisterServerRes) */ {
 public:
  inline RegisterServerRes() : RegisterServerRes(nullptr) {}
  ~RegisterServerRes() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerRes(const RegisterServerRes& from);
  RegisterServerRes(RegisterServerRes&& from) noexcept
    : RegisterServerRes() {
    *this = ::std::move(from);
  }

  inline RegisterServerRes& operator=(const RegisterServerRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerRes& operator=(RegisterServerRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerRes* internal_default_instance() {
    return reinterpret_cast<const RegisterServerRes*>(
               &_RegisterServerRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterServerRes& a, RegisterServerRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerRes& from) {
    RegisterServerRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.RegisterServerRes";
  }
  protected:
  explicit RegisterServerRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.RegisterServerRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ServerPingReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ServerPingReq) */ {
 public:
  inline ServerPingReq() : ServerPingReq(nullptr) {}
  ~ServerPingReq() override;
  explicit PROTOBUF_CONSTEXPR ServerPingReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPingReq(const ServerPingReq& from);
  ServerPingReq(ServerPingReq&& from) noexcept
    : ServerPingReq() {
    *this = ::std::move(from);
  }

  inline ServerPingReq& operator=(const ServerPingReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPingReq& operator=(ServerPingReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPingReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPingReq* internal_default_instance() {
    return reinterpret_cast<const ServerPingReq*>(
               &_ServerPingReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerPingReq& a, ServerPingReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPingReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPingReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPingReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPingReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPingReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPingReq& from) {
    ServerPingReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPingReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ServerPingReq";
  }
  protected:
  explicit ServerPingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ServerPingReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ServerPingRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ServerPingRes) */ {
 public:
  inline ServerPingRes() : ServerPingRes(nullptr) {}
  ~ServerPingRes() override;
  explicit PROTOBUF_CONSTEXPR ServerPingRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPingRes(const ServerPingRes& from);
  ServerPingRes(ServerPingRes&& from) noexcept
    : ServerPingRes() {
    *this = ::std::move(from);
  }

  inline ServerPingRes& operator=(const ServerPingRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPingRes& operator=(ServerPingRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPingRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPingRes* internal_default_instance() {
    return reinterpret_cast<const ServerPingRes*>(
               &_ServerPingRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerPingRes& a, ServerPingRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPingRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPingRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPingRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPingRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPingRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPingRes& from) {
    ServerPingRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPingRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ServerPingRes";
  }
  protected:
  explicit ServerPingRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ServerPingRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class HelloWorldServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.HelloWorldServer) */ {
 public:
  inline HelloWorldServer() : HelloWorldServer(nullptr) {}
  ~HelloWorldServer() override;
  explicit PROTOBUF_CONSTEXPR HelloWorldServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloWorldServer(const HelloWorldServer& from);
  HelloWorldServer(HelloWorldServer&& from) noexcept
    : HelloWorldServer() {
    *this = ::std::move(from);
  }

  inline HelloWorldServer& operator=(const HelloWorldServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloWorldServer& operator=(HelloWorldServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloWorldServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloWorldServer* internal_default_instance() {
    return reinterpret_cast<const HelloWorldServer*>(
               &_HelloWorldServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HelloWorldServer& a, HelloWorldServer& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloWorldServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloWorldServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloWorldServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloWorldServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloWorldServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloWorldServer& from) {
    HelloWorldServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloWorldServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.HelloWorldServer";
  }
  protected:
  explicit HelloWorldServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kAccessTokenFieldNumber = 2,
    kPlayingCharacterIdFieldNumber = 3,
    kPlayingServerIdFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string access_token = 2;
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // int64 playing_character_id = 3;
  void clear_playing_character_id();
  int64_t playing_character_id() const;
  void set_playing_character_id(int64_t value);
  private:
  int64_t _internal_playing_character_id() const;
  void _internal_set_playing_character_id(int64_t value);
  public:

  // int32 playing_server_id = 4;
  void clear_playing_server_id();
  int32_t playing_server_id() const;
  void set_playing_server_id(int32_t value);
  private:
  int32_t _internal_playing_server_id() const;
  void _internal_set_playing_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.HelloWorldServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    int64_t playing_character_id_;
    int32_t playing_server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class HelloWorldClient final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.HelloWorldClient) */ {
 public:
  inline HelloWorldClient() : HelloWorldClient(nullptr) {}
  ~HelloWorldClient() override;
  explicit PROTOBUF_CONSTEXPR HelloWorldClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloWorldClient(const HelloWorldClient& from);
  HelloWorldClient(HelloWorldClient&& from) noexcept
    : HelloWorldClient() {
    *this = ::std::move(from);
  }

  inline HelloWorldClient& operator=(const HelloWorldClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloWorldClient& operator=(HelloWorldClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloWorldClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloWorldClient* internal_default_instance() {
    return reinterpret_cast<const HelloWorldClient*>(
               &_HelloWorldClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HelloWorldClient& a, HelloWorldClient& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloWorldClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloWorldClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloWorldClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloWorldClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloWorldClient& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloWorldClient& from) {
    HelloWorldClient::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloWorldClient* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.HelloWorldClient";
  }
  protected:
  explicit HelloWorldClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapUidFieldNumber = 1,
    kServerTickIntervalMsFieldNumber = 2,
  };
  // int32 map_uid = 1;
  void clear_map_uid();
  int32_t map_uid() const;
  void set_map_uid(int32_t value);
  private:
  int32_t _internal_map_uid() const;
  void _internal_set_map_uid(int32_t value);
  public:

  // int32 server_tick_interval_ms = 2;
  void clear_server_tick_interval_ms();
  int32_t server_tick_interval_ms() const;
  void set_server_tick_interval_ms(int32_t value);
  private:
  int32_t _internal_server_tick_interval_ms() const;
  void _internal_set_server_tick_interval_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.HelloWorldClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t map_uid_;
    int32_t server_tick_interval_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientEnterMapReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientEnterMapReq) */ {
 public:
  inline ClientEnterMapReq() : ClientEnterMapReq(nullptr) {}
  ~ClientEnterMapReq() override;
  explicit PROTOBUF_CONSTEXPR ClientEnterMapReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientEnterMapReq(const ClientEnterMapReq& from);
  ClientEnterMapReq(ClientEnterMapReq&& from) noexcept
    : ClientEnterMapReq() {
    *this = ::std::move(from);
  }

  inline ClientEnterMapReq& operator=(const ClientEnterMapReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEnterMapReq& operator=(ClientEnterMapReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientEnterMapReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientEnterMapReq* internal_default_instance() {
    return reinterpret_cast<const ClientEnterMapReq*>(
               &_ClientEnterMapReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClientEnterMapReq& a, ClientEnterMapReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientEnterMapReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientEnterMapReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientEnterMapReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientEnterMapReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientEnterMapReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientEnterMapReq& from) {
    ClientEnterMapReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEnterMapReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientEnterMapReq";
  }
  protected:
  explicit ClientEnterMapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterPosFieldNumber = 2,
    kMapUidFieldNumber = 1,
  };
  // .types.CharacterPose character_pos = 2;
  bool has_character_pos() const;
  private:
  bool _internal_has_character_pos() const;
  public:
  void clear_character_pos();
  const ::types::CharacterPose& character_pos() const;
  PROTOBUF_NODISCARD ::types::CharacterPose* release_character_pos();
  ::types::CharacterPose* mutable_character_pos();
  void set_allocated_character_pos(::types::CharacterPose* character_pos);
  private:
  const ::types::CharacterPose& _internal_character_pos() const;
  ::types::CharacterPose* _internal_mutable_character_pos();
  public:
  void unsafe_arena_set_allocated_character_pos(
      ::types::CharacterPose* character_pos);
  ::types::CharacterPose* unsafe_arena_release_character_pos();

  // int32 map_uid = 1;
  void clear_map_uid();
  int32_t map_uid() const;
  void set_map_uid(int32_t value);
  private:
  int32_t _internal_map_uid() const;
  void _internal_set_map_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ClientEnterMapReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::CharacterPose* character_pos_;
    int32_t map_uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientEnterMapRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientEnterMapRes) */ {
 public:
  inline ClientEnterMapRes() : ClientEnterMapRes(nullptr) {}
  ~ClientEnterMapRes() override;
  explicit PROTOBUF_CONSTEXPR ClientEnterMapRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientEnterMapRes(const ClientEnterMapRes& from);
  ClientEnterMapRes(ClientEnterMapRes&& from) noexcept
    : ClientEnterMapRes() {
    *this = ::std::move(from);
  }

  inline ClientEnterMapRes& operator=(const ClientEnterMapRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEnterMapRes& operator=(ClientEnterMapRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientEnterMapRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientEnterMapRes* internal_default_instance() {
    return reinterpret_cast<const ClientEnterMapRes*>(
               &_ClientEnterMapRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ClientEnterMapRes& a, ClientEnterMapRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientEnterMapRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientEnterMapRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientEnterMapRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientEnterMapRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientEnterMapRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientEnterMapRes& from) {
    ClientEnterMapRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEnterMapRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientEnterMapRes";
  }
  protected:
  explicit ClientEnterMapRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionInfoFieldNumber = 4,
    kResultFieldNumber = 1,
  };
  // .types.SectionInfo section_info = 4;
  bool has_section_info() const;
  private:
  bool _internal_has_section_info() const;
  public:
  void clear_section_info();
  const ::types::SectionInfo& section_info() const;
  PROTOBUF_NODISCARD ::types::SectionInfo* release_section_info();
  ::types::SectionInfo* mutable_section_info();
  void set_allocated_section_info(::types::SectionInfo* section_info);
  private:
  const ::types::SectionInfo& _internal_section_info() const;
  ::types::SectionInfo* _internal_mutable_section_info();
  public:
  void unsafe_arena_set_allocated_section_info(
      ::types::SectionInfo* section_info);
  ::types::SectionInfo* unsafe_arena_release_section_info();

  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // @@protoc_insertion_point(class_scope:world.ClientEnterMapRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::SectionInfo* section_info_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientEnterMapNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientEnterMapNotify) */ {
 public:
  inline ClientEnterMapNotify() : ClientEnterMapNotify(nullptr) {}
  ~ClientEnterMapNotify() override;
  explicit PROTOBUF_CONSTEXPR ClientEnterMapNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientEnterMapNotify(const ClientEnterMapNotify& from);
  ClientEnterMapNotify(ClientEnterMapNotify&& from) noexcept
    : ClientEnterMapNotify() {
    *this = ::std::move(from);
  }

  inline ClientEnterMapNotify& operator=(const ClientEnterMapNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientEnterMapNotify& operator=(ClientEnterMapNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientEnterMapNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientEnterMapNotify* internal_default_instance() {
    return reinterpret_cast<const ClientEnterMapNotify*>(
               &_ClientEnterMapNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ClientEnterMapNotify& a, ClientEnterMapNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientEnterMapNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientEnterMapNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientEnterMapNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientEnterMapNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientEnterMapNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientEnterMapNotify& from) {
    ClientEnterMapNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientEnterMapNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientEnterMapNotify";
  }
  protected:
  explicit ClientEnterMapNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionInfoFieldNumber = 1,
  };
  // .types.SectionInfo section_info = 1;
  bool has_section_info() const;
  private:
  bool _internal_has_section_info() const;
  public:
  void clear_section_info();
  const ::types::SectionInfo& section_info() const;
  PROTOBUF_NODISCARD ::types::SectionInfo* release_section_info();
  ::types::SectionInfo* mutable_section_info();
  void set_allocated_section_info(::types::SectionInfo* section_info);
  private:
  const ::types::SectionInfo& _internal_section_info() const;
  ::types::SectionInfo* _internal_mutable_section_info();
  public:
  void unsafe_arena_set_allocated_section_info(
      ::types::SectionInfo* section_info);
  ::types::SectionInfo* unsafe_arena_release_section_info();

  // @@protoc_insertion_point(class_scope:world.ClientEnterMapNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::SectionInfo* section_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientLeaveMapNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientLeaveMapNotify) */ {
 public:
  inline ClientLeaveMapNotify() : ClientLeaveMapNotify(nullptr) {}
  ~ClientLeaveMapNotify() override;
  explicit PROTOBUF_CONSTEXPR ClientLeaveMapNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientLeaveMapNotify(const ClientLeaveMapNotify& from);
  ClientLeaveMapNotify(ClientLeaveMapNotify&& from) noexcept
    : ClientLeaveMapNotify() {
    *this = ::std::move(from);
  }

  inline ClientLeaveMapNotify& operator=(const ClientLeaveMapNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLeaveMapNotify& operator=(ClientLeaveMapNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLeaveMapNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLeaveMapNotify* internal_default_instance() {
    return reinterpret_cast<const ClientLeaveMapNotify*>(
               &_ClientLeaveMapNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ClientLeaveMapNotify& a, ClientLeaveMapNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLeaveMapNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLeaveMapNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLeaveMapNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLeaveMapNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientLeaveMapNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientLeaveMapNotify& from) {
    ClientLeaveMapNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientLeaveMapNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientLeaveMapNotify";
  }
  protected:
  explicit ClientLeaveMapNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSectionInfoFieldNumber = 2,
  };
  // .types.SectionInfo section_info = 2;
  bool has_section_info() const;
  private:
  bool _internal_has_section_info() const;
  public:
  void clear_section_info();
  const ::types::SectionInfo& section_info() const;
  PROTOBUF_NODISCARD ::types::SectionInfo* release_section_info();
  ::types::SectionInfo* mutable_section_info();
  void set_allocated_section_info(::types::SectionInfo* section_info);
  private:
  const ::types::SectionInfo& _internal_section_info() const;
  ::types::SectionInfo* _internal_mutable_section_info();
  public:
  void unsafe_arena_set_allocated_section_info(
      ::types::SectionInfo* section_info);
  ::types::SectionInfo* unsafe_arena_release_section_info();

  // @@protoc_insertion_point(class_scope:world.ClientLeaveMapNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::SectionInfo* section_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientMoveReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientMoveReq) */ {
 public:
  inline ClientMoveReq() : ClientMoveReq(nullptr) {}
  ~ClientMoveReq() override;
  explicit PROTOBUF_CONSTEXPR ClientMoveReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMoveReq(const ClientMoveReq& from);
  ClientMoveReq(ClientMoveReq&& from) noexcept
    : ClientMoveReq() {
    *this = ::std::move(from);
  }

  inline ClientMoveReq& operator=(const ClientMoveReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMoveReq& operator=(ClientMoveReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMoveReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMoveReq* internal_default_instance() {
    return reinterpret_cast<const ClientMoveReq*>(
               &_ClientMoveReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ClientMoveReq& a, ClientMoveReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMoveReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMoveReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMoveReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMoveReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMoveReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientMoveReq& from) {
    ClientMoveReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMoveReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientMoveReq";
  }
  protected:
  explicit ClientMoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterPosFieldNumber = 1,
    kClientTimestampFieldNumber = 3,
  };
  // .types.CharacterPose character_pos = 1;
  bool has_character_pos() const;
  private:
  bool _internal_has_character_pos() const;
  public:
  void clear_character_pos();
  const ::types::CharacterPose& character_pos() const;
  PROTOBUF_NODISCARD ::types::CharacterPose* release_character_pos();
  ::types::CharacterPose* mutable_character_pos();
  void set_allocated_character_pos(::types::CharacterPose* character_pos);
  private:
  const ::types::CharacterPose& _internal_character_pos() const;
  ::types::CharacterPose* _internal_mutable_character_pos();
  public:
  void unsafe_arena_set_allocated_character_pos(
      ::types::CharacterPose* character_pos);
  ::types::CharacterPose* unsafe_arena_release_character_pos();

  // float client_timestamp = 3;
  void clear_client_timestamp();
  float client_timestamp() const;
  void set_client_timestamp(float value);
  private:
  float _internal_client_timestamp() const;
  void _internal_set_client_timestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:world.ClientMoveReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::CharacterPose* character_pos_;
    float client_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientMoveRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientMoveRes) */ {
 public:
  inline ClientMoveRes() : ClientMoveRes(nullptr) {}
  ~ClientMoveRes() override;
  explicit PROTOBUF_CONSTEXPR ClientMoveRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientMoveRes(const ClientMoveRes& from);
  ClientMoveRes(ClientMoveRes&& from) noexcept
    : ClientMoveRes() {
    *this = ::std::move(from);
  }

  inline ClientMoveRes& operator=(const ClientMoveRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMoveRes& operator=(ClientMoveRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientMoveRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientMoveRes* internal_default_instance() {
    return reinterpret_cast<const ClientMoveRes*>(
               &_ClientMoveRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ClientMoveRes& a, ClientMoveRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMoveRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMoveRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientMoveRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientMoveRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientMoveRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientMoveRes& from) {
    ClientMoveRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMoveRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientMoveRes";
  }
  protected:
  explicit ClientMoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterPosFieldNumber = 2,
    kServerTimestampFieldNumber = 4,
    kClientTimestampFieldNumber = 3,
  };
  // .types.CharacterPose character_pos = 2;
  bool has_character_pos() const;
  private:
  bool _internal_has_character_pos() const;
  public:
  void clear_character_pos();
  const ::types::CharacterPose& character_pos() const;
  PROTOBUF_NODISCARD ::types::CharacterPose* release_character_pos();
  ::types::CharacterPose* mutable_character_pos();
  void set_allocated_character_pos(::types::CharacterPose* character_pos);
  private:
  const ::types::CharacterPose& _internal_character_pos() const;
  ::types::CharacterPose* _internal_mutable_character_pos();
  public:
  void unsafe_arena_set_allocated_character_pos(
      ::types::CharacterPose* character_pos);
  ::types::CharacterPose* unsafe_arena_release_character_pos();

  // .google.protobuf.Timestamp server_timestamp = 4;
  bool has_server_timestamp() const;
  private:
  bool _internal_has_server_timestamp() const;
  public:
  void clear_server_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& server_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_server_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_server_timestamp();
  void set_allocated_server_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_server_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_server_timestamp();
  public:
  void unsafe_arena_set_allocated_server_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_server_timestamp();

  // float client_timestamp = 3;
  void clear_client_timestamp();
  float client_timestamp() const;
  void set_client_timestamp(float value);
  private:
  float _internal_client_timestamp() const;
  void _internal_set_client_timestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:world.ClientMoveRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::CharacterPose* character_pos_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp_;
    float client_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientActionReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientActionReq) */ {
 public:
  inline ClientActionReq() : ClientActionReq(nullptr) {}
  ~ClientActionReq() override;
  explicit PROTOBUF_CONSTEXPR ClientActionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientActionReq(const ClientActionReq& from);
  ClientActionReq(ClientActionReq&& from) noexcept
    : ClientActionReq() {
    *this = ::std::move(from);
  }

  inline ClientActionReq& operator=(const ClientActionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientActionReq& operator=(ClientActionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientActionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientActionReq* internal_default_instance() {
    return reinterpret_cast<const ClientActionReq*>(
               &_ClientActionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ClientActionReq& a, ClientActionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientActionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientActionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientActionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientActionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientActionReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientActionReq& from) {
    ClientActionReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientActionReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientActionReq";
  }
  protected:
  explicit ClientActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientActionFieldNumber = 1,
    kClientTimestampFieldNumber = 2,
  };
  // .types.ClientAction client_action = 1;
  bool has_client_action() const;
  private:
  bool _internal_has_client_action() const;
  public:
  void clear_client_action();
  const ::types::ClientAction& client_action() const;
  PROTOBUF_NODISCARD ::types::ClientAction* release_client_action();
  ::types::ClientAction* mutable_client_action();
  void set_allocated_client_action(::types::ClientAction* client_action);
  private:
  const ::types::ClientAction& _internal_client_action() const;
  ::types::ClientAction* _internal_mutable_client_action();
  public:
  void unsafe_arena_set_allocated_client_action(
      ::types::ClientAction* client_action);
  ::types::ClientAction* unsafe_arena_release_client_action();

  // float client_timestamp = 2;
  void clear_client_timestamp();
  float client_timestamp() const;
  void set_client_timestamp(float value);
  private:
  float _internal_client_timestamp() const;
  void _internal_set_client_timestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:world.ClientActionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::ClientAction* client_action_;
    float client_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ClientActionRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ClientActionRes) */ {
 public:
  inline ClientActionRes() : ClientActionRes(nullptr) {}
  ~ClientActionRes() override;
  explicit PROTOBUF_CONSTEXPR ClientActionRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientActionRes(const ClientActionRes& from);
  ClientActionRes(ClientActionRes&& from) noexcept
    : ClientActionRes() {
    *this = ::std::move(from);
  }

  inline ClientActionRes& operator=(const ClientActionRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientActionRes& operator=(ClientActionRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientActionRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientActionRes* internal_default_instance() {
    return reinterpret_cast<const ClientActionRes*>(
               &_ClientActionRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ClientActionRes& a, ClientActionRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientActionRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientActionRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientActionRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientActionRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientActionRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientActionRes& from) {
    ClientActionRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientActionRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ClientActionRes";
  }
  protected:
  explicit ClientActionRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientActionFieldNumber = 2,
    kServerTimestampFieldNumber = 4,
    kResultFieldNumber = 1,
    kClientTimestampFieldNumber = 3,
    kActionIdFieldNumber = 5,
  };
  // .types.ClientAction client_action = 2;
  bool has_client_action() const;
  private:
  bool _internal_has_client_action() const;
  public:
  void clear_client_action();
  const ::types::ClientAction& client_action() const;
  PROTOBUF_NODISCARD ::types::ClientAction* release_client_action();
  ::types::ClientAction* mutable_client_action();
  void set_allocated_client_action(::types::ClientAction* client_action);
  private:
  const ::types::ClientAction& _internal_client_action() const;
  ::types::ClientAction* _internal_mutable_client_action();
  public:
  void unsafe_arena_set_allocated_client_action(
      ::types::ClientAction* client_action);
  ::types::ClientAction* unsafe_arena_release_client_action();

  // .google.protobuf.Timestamp server_timestamp = 4;
  bool has_server_timestamp() const;
  private:
  bool _internal_has_server_timestamp() const;
  public:
  void clear_server_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& server_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_server_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_server_timestamp();
  void set_allocated_server_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_server_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_server_timestamp();
  public:
  void unsafe_arena_set_allocated_server_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_server_timestamp();

  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // float client_timestamp = 3;
  void clear_client_timestamp();
  float client_timestamp() const;
  void set_client_timestamp(float value);
  private:
  float _internal_client_timestamp() const;
  void _internal_set_client_timestamp(float value);
  public:

  // int64 action_id = 5;
  void clear_action_id();
  int64_t action_id() const;
  void set_action_id(int64_t value);
  private:
  int64_t _internal_action_id() const;
  void _internal_set_action_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ClientActionRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::ClientAction* client_action_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp_;
    int result_;
    float client_timestamp_;
    int64_t action_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class OtherClientActionNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.OtherClientActionNotify) */ {
 public:
  inline OtherClientActionNotify() : OtherClientActionNotify(nullptr) {}
  ~OtherClientActionNotify() override;
  explicit PROTOBUF_CONSTEXPR OtherClientActionNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherClientActionNotify(const OtherClientActionNotify& from);
  OtherClientActionNotify(OtherClientActionNotify&& from) noexcept
    : OtherClientActionNotify() {
    *this = ::std::move(from);
  }

  inline OtherClientActionNotify& operator=(const OtherClientActionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherClientActionNotify& operator=(OtherClientActionNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherClientActionNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherClientActionNotify* internal_default_instance() {
    return reinterpret_cast<const OtherClientActionNotify*>(
               &_OtherClientActionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OtherClientActionNotify& a, OtherClientActionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherClientActionNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherClientActionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherClientActionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherClientActionNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherClientActionNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OtherClientActionNotify& from) {
    OtherClientActionNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherClientActionNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.OtherClientActionNotify";
  }
  protected:
  explicit OtherClientActionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientActionFieldNumber = 2,
    kCharacterIdFieldNumber = 1,
  };
  // .types.ClientAction client_action = 2;
  bool has_client_action() const;
  private:
  bool _internal_has_client_action() const;
  public:
  void clear_client_action();
  const ::types::ClientAction& client_action() const;
  PROTOBUF_NODISCARD ::types::ClientAction* release_client_action();
  ::types::ClientAction* mutable_client_action();
  void set_allocated_client_action(::types::ClientAction* client_action);
  private:
  const ::types::ClientAction& _internal_client_action() const;
  ::types::ClientAction* _internal_mutable_client_action();
  public:
  void unsafe_arena_set_allocated_client_action(
      ::types::ClientAction* client_action);
  ::types::ClientAction* unsafe_arena_release_client_action();

  // int64 character_id = 1;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.OtherClientActionNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::ClientAction* client_action_;
    int64_t character_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class OtherClientEnterNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.OtherClientEnterNotify) */ {
 public:
  inline OtherClientEnterNotify() : OtherClientEnterNotify(nullptr) {}
  ~OtherClientEnterNotify() override;
  explicit PROTOBUF_CONSTEXPR OtherClientEnterNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherClientEnterNotify(const OtherClientEnterNotify& from);
  OtherClientEnterNotify(OtherClientEnterNotify&& from) noexcept
    : OtherClientEnterNotify() {
    *this = ::std::move(from);
  }

  inline OtherClientEnterNotify& operator=(const OtherClientEnterNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherClientEnterNotify& operator=(OtherClientEnterNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherClientEnterNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherClientEnterNotify* internal_default_instance() {
    return reinterpret_cast<const OtherClientEnterNotify*>(
               &_OtherClientEnterNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OtherClientEnterNotify& a, OtherClientEnterNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherClientEnterNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherClientEnterNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherClientEnterNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherClientEnterNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherClientEnterNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OtherClientEnterNotify& from) {
    OtherClientEnterNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherClientEnterNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.OtherClientEnterNotify";
  }
  protected:
  explicit OtherClientEnterNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPcInfoFieldNumber = 1,
  };
  // .types.PcInfo pc_info = 1;
  bool has_pc_info() const;
  private:
  bool _internal_has_pc_info() const;
  public:
  void clear_pc_info();
  const ::types::PcInfo& pc_info() const;
  PROTOBUF_NODISCARD ::types::PcInfo* release_pc_info();
  ::types::PcInfo* mutable_pc_info();
  void set_allocated_pc_info(::types::PcInfo* pc_info);
  private:
  const ::types::PcInfo& _internal_pc_info() const;
  ::types::PcInfo* _internal_mutable_pc_info();
  public:
  void unsafe_arena_set_allocated_pc_info(
      ::types::PcInfo* pc_info);
  ::types::PcInfo* unsafe_arena_release_pc_info();

  // @@protoc_insertion_point(class_scope:world.OtherClientEnterNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::PcInfo* pc_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class OtherClientLeaveNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.OtherClientLeaveNotify) */ {
 public:
  inline OtherClientLeaveNotify() : OtherClientLeaveNotify(nullptr) {}
  ~OtherClientLeaveNotify() override;
  explicit PROTOBUF_CONSTEXPR OtherClientLeaveNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherClientLeaveNotify(const OtherClientLeaveNotify& from);
  OtherClientLeaveNotify(OtherClientLeaveNotify&& from) noexcept
    : OtherClientLeaveNotify() {
    *this = ::std::move(from);
  }

  inline OtherClientLeaveNotify& operator=(const OtherClientLeaveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherClientLeaveNotify& operator=(OtherClientLeaveNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherClientLeaveNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherClientLeaveNotify* internal_default_instance() {
    return reinterpret_cast<const OtherClientLeaveNotify*>(
               &_OtherClientLeaveNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OtherClientLeaveNotify& a, OtherClientLeaveNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherClientLeaveNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherClientLeaveNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherClientLeaveNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherClientLeaveNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherClientLeaveNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OtherClientLeaveNotify& from) {
    OtherClientLeaveNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherClientLeaveNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.OtherClientLeaveNotify";
  }
  protected:
  explicit OtherClientLeaveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // int64 character_id = 1;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.OtherClientLeaveNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t character_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class OtherClientMoveNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.OtherClientMoveNotify) */ {
 public:
  inline OtherClientMoveNotify() : OtherClientMoveNotify(nullptr) {}
  ~OtherClientMoveNotify() override;
  explicit PROTOBUF_CONSTEXPR OtherClientMoveNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OtherClientMoveNotify(const OtherClientMoveNotify& from);
  OtherClientMoveNotify(OtherClientMoveNotify&& from) noexcept
    : OtherClientMoveNotify() {
    *this = ::std::move(from);
  }

  inline OtherClientMoveNotify& operator=(const OtherClientMoveNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherClientMoveNotify& operator=(OtherClientMoveNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OtherClientMoveNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const OtherClientMoveNotify* internal_default_instance() {
    return reinterpret_cast<const OtherClientMoveNotify*>(
               &_OtherClientMoveNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OtherClientMoveNotify& a, OtherClientMoveNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherClientMoveNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherClientMoveNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OtherClientMoveNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OtherClientMoveNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OtherClientMoveNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OtherClientMoveNotify& from) {
    OtherClientMoveNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherClientMoveNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.OtherClientMoveNotify";
  }
  protected:
  explicit OtherClientMoveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterPosFieldNumber = 2,
    kClientActionFieldNumber = 3,
    kCharacterIdFieldNumber = 1,
  };
  // .types.CharacterPose character_pos = 2;
  bool has_character_pos() const;
  private:
  bool _internal_has_character_pos() const;
  public:
  void clear_character_pos();
  const ::types::CharacterPose& character_pos() const;
  PROTOBUF_NODISCARD ::types::CharacterPose* release_character_pos();
  ::types::CharacterPose* mutable_character_pos();
  void set_allocated_character_pos(::types::CharacterPose* character_pos);
  private:
  const ::types::CharacterPose& _internal_character_pos() const;
  ::types::CharacterPose* _internal_mutable_character_pos();
  public:
  void unsafe_arena_set_allocated_character_pos(
      ::types::CharacterPose* character_pos);
  ::types::CharacterPose* unsafe_arena_release_character_pos();

  // .types.ClientAction client_action = 3;
  bool has_client_action() const;
  private:
  bool _internal_has_client_action() const;
  public:
  void clear_client_action();
  const ::types::ClientAction& client_action() const;
  PROTOBUF_NODISCARD ::types::ClientAction* release_client_action();
  ::types::ClientAction* mutable_client_action();
  void set_allocated_client_action(::types::ClientAction* client_action);
  private:
  const ::types::ClientAction& _internal_client_action() const;
  ::types::ClientAction* _internal_mutable_client_action();
  public:
  void unsafe_arena_set_allocated_client_action(
      ::types::ClientAction* client_action);
  ::types::ClientAction* unsafe_arena_release_client_action();

  // int64 character_id = 1;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.OtherClientMoveNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::CharacterPose* character_pos_;
    ::types::ClientAction* client_action_;
    int64_t character_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ChangeServerTickIntervalReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ChangeServerTickIntervalReq) */ {
 public:
  inline ChangeServerTickIntervalReq() : ChangeServerTickIntervalReq(nullptr) {}
  ~ChangeServerTickIntervalReq() override;
  explicit PROTOBUF_CONSTEXPR ChangeServerTickIntervalReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeServerTickIntervalReq(const ChangeServerTickIntervalReq& from);
  ChangeServerTickIntervalReq(ChangeServerTickIntervalReq&& from) noexcept
    : ChangeServerTickIntervalReq() {
    *this = ::std::move(from);
  }

  inline ChangeServerTickIntervalReq& operator=(const ChangeServerTickIntervalReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeServerTickIntervalReq& operator=(ChangeServerTickIntervalReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeServerTickIntervalReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeServerTickIntervalReq* internal_default_instance() {
    return reinterpret_cast<const ChangeServerTickIntervalReq*>(
               &_ChangeServerTickIntervalReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ChangeServerTickIntervalReq& a, ChangeServerTickIntervalReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeServerTickIntervalReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeServerTickIntervalReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeServerTickIntervalReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeServerTickIntervalReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeServerTickIntervalReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeServerTickIntervalReq& from) {
    ChangeServerTickIntervalReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeServerTickIntervalReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ChangeServerTickIntervalReq";
  }
  protected:
  explicit ChangeServerTickIntervalReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTickIntervalMsFieldNumber = 2,
  };
  // int32 server_tick_interval_ms = 2;
  void clear_server_tick_interval_ms();
  int32_t server_tick_interval_ms() const;
  void set_server_tick_interval_ms(int32_t value);
  private:
  int32_t _internal_server_tick_interval_ms() const;
  void _internal_set_server_tick_interval_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ChangeServerTickIntervalReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_tick_interval_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ChangeServerTickIntervalRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ChangeServerTickIntervalRes) */ {
 public:
  inline ChangeServerTickIntervalRes() : ChangeServerTickIntervalRes(nullptr) {}
  ~ChangeServerTickIntervalRes() override;
  explicit PROTOBUF_CONSTEXPR ChangeServerTickIntervalRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeServerTickIntervalRes(const ChangeServerTickIntervalRes& from);
  ChangeServerTickIntervalRes(ChangeServerTickIntervalRes&& from) noexcept
    : ChangeServerTickIntervalRes() {
    *this = ::std::move(from);
  }

  inline ChangeServerTickIntervalRes& operator=(const ChangeServerTickIntervalRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeServerTickIntervalRes& operator=(ChangeServerTickIntervalRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeServerTickIntervalRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeServerTickIntervalRes* internal_default_instance() {
    return reinterpret_cast<const ChangeServerTickIntervalRes*>(
               &_ChangeServerTickIntervalRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChangeServerTickIntervalRes& a, ChangeServerTickIntervalRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeServerTickIntervalRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeServerTickIntervalRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeServerTickIntervalRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeServerTickIntervalRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeServerTickIntervalRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeServerTickIntervalRes& from) {
    ChangeServerTickIntervalRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeServerTickIntervalRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ChangeServerTickIntervalRes";
  }
  protected:
  explicit ChangeServerTickIntervalRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTickIntervalMsFieldNumber = 2,
  };
  // int32 server_tick_interval_ms = 2;
  void clear_server_tick_interval_ms();
  int32_t server_tick_interval_ms() const;
  void set_server_tick_interval_ms(int32_t value);
  private:
  int32_t _internal_server_tick_interval_ms() const;
  void _internal_set_server_tick_interval_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ChangeServerTickIntervalRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_tick_interval_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ServerTickIntervalChangedNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ServerTickIntervalChangedNotify) */ {
 public:
  inline ServerTickIntervalChangedNotify() : ServerTickIntervalChangedNotify(nullptr) {}
  ~ServerTickIntervalChangedNotify() override;
  explicit PROTOBUF_CONSTEXPR ServerTickIntervalChangedNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerTickIntervalChangedNotify(const ServerTickIntervalChangedNotify& from);
  ServerTickIntervalChangedNotify(ServerTickIntervalChangedNotify&& from) noexcept
    : ServerTickIntervalChangedNotify() {
    *this = ::std::move(from);
  }

  inline ServerTickIntervalChangedNotify& operator=(const ServerTickIntervalChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerTickIntervalChangedNotify& operator=(ServerTickIntervalChangedNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerTickIntervalChangedNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerTickIntervalChangedNotify* internal_default_instance() {
    return reinterpret_cast<const ServerTickIntervalChangedNotify*>(
               &_ServerTickIntervalChangedNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ServerTickIntervalChangedNotify& a, ServerTickIntervalChangedNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerTickIntervalChangedNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerTickIntervalChangedNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerTickIntervalChangedNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerTickIntervalChangedNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerTickIntervalChangedNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerTickIntervalChangedNotify& from) {
    ServerTickIntervalChangedNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerTickIntervalChangedNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ServerTickIntervalChangedNotify";
  }
  protected:
  explicit ServerTickIntervalChangedNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerTickIntervalMsFieldNumber = 2,
  };
  // int32 server_tick_interval_ms = 2;
  void clear_server_tick_interval_ms();
  int32_t server_tick_interval_ms() const;
  void set_server_tick_interval_ms(int32_t value);
  private:
  int32_t _internal_server_tick_interval_ms() const;
  void _internal_set_server_tick_interval_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ServerTickIntervalChangedNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_tick_interval_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class SectionOwnershipChangedNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.SectionOwnershipChangedNotify) */ {
 public:
  inline SectionOwnershipChangedNotify() : SectionOwnershipChangedNotify(nullptr) {}
  ~SectionOwnershipChangedNotify() override;
  explicit PROTOBUF_CONSTEXPR SectionOwnershipChangedNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionOwnershipChangedNotify(const SectionOwnershipChangedNotify& from);
  SectionOwnershipChangedNotify(SectionOwnershipChangedNotify&& from) noexcept
    : SectionOwnershipChangedNotify() {
    *this = ::std::move(from);
  }

  inline SectionOwnershipChangedNotify& operator=(const SectionOwnershipChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionOwnershipChangedNotify& operator=(SectionOwnershipChangedNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionOwnershipChangedNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionOwnershipChangedNotify* internal_default_instance() {
    return reinterpret_cast<const SectionOwnershipChangedNotify*>(
               &_SectionOwnershipChangedNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SectionOwnershipChangedNotify& a, SectionOwnershipChangedNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionOwnershipChangedNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionOwnershipChangedNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SectionOwnershipChangedNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SectionOwnershipChangedNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SectionOwnershipChangedNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SectionOwnershipChangedNotify& from) {
    SectionOwnershipChangedNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionOwnershipChangedNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.SectionOwnershipChangedNotify";
  }
  protected:
  explicit SectionOwnershipChangedNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerCharacterIdFieldNumber = 1,
  };
  // int64 owner_character_id = 1;
  void clear_owner_character_id();
  int64_t owner_character_id() const;
  void set_owner_character_id(int64_t value);
  private:
  int64_t _internal_owner_character_id() const;
  void _internal_set_owner_character_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.SectionOwnershipChangedNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t owner_character_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class SpawnNpcOnSectionReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.SpawnNpcOnSectionReq) */ {
 public:
  inline SpawnNpcOnSectionReq() : SpawnNpcOnSectionReq(nullptr) {}
  ~SpawnNpcOnSectionReq() override;
  explicit PROTOBUF_CONSTEXPR SpawnNpcOnSectionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnNpcOnSectionReq(const SpawnNpcOnSectionReq& from);
  SpawnNpcOnSectionReq(SpawnNpcOnSectionReq&& from) noexcept
    : SpawnNpcOnSectionReq() {
    *this = ::std::move(from);
  }

  inline SpawnNpcOnSectionReq& operator=(const SpawnNpcOnSectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnNpcOnSectionReq& operator=(SpawnNpcOnSectionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnNpcOnSectionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnNpcOnSectionReq* internal_default_instance() {
    return reinterpret_cast<const SpawnNpcOnSectionReq*>(
               &_SpawnNpcOnSectionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SpawnNpcOnSectionReq& a, SpawnNpcOnSectionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnNpcOnSectionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnNpcOnSectionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnNpcOnSectionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnNpcOnSectionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnNpcOnSectionReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnNpcOnSectionReq& from) {
    SpawnNpcOnSectionReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnNpcOnSectionReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.SpawnNpcOnSectionReq";
  }
  protected:
  explicit SpawnNpcOnSectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcSpawnInfosFieldNumber = 2,
    kSpawnerIdFieldNumber = 1,
    kClientTimestampFieldNumber = 4,
  };
  // repeated .types.NpcSpawnInfo npc_spawn_infos = 2;
  int npc_spawn_infos_size() const;
  private:
  int _internal_npc_spawn_infos_size() const;
  public:
  void clear_npc_spawn_infos();
  ::types::NpcSpawnInfo* mutable_npc_spawn_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcSpawnInfo >*
      mutable_npc_spawn_infos();
  private:
  const ::types::NpcSpawnInfo& _internal_npc_spawn_infos(int index) const;
  ::types::NpcSpawnInfo* _internal_add_npc_spawn_infos();
  public:
  const ::types::NpcSpawnInfo& npc_spawn_infos(int index) const;
  ::types::NpcSpawnInfo* add_npc_spawn_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcSpawnInfo >&
      npc_spawn_infos() const;

  // int32 spawner_id = 1;
  void clear_spawner_id();
  int32_t spawner_id() const;
  void set_spawner_id(int32_t value);
  private:
  int32_t _internal_spawner_id() const;
  void _internal_set_spawner_id(int32_t value);
  public:

  // float client_timestamp = 4;
  void clear_client_timestamp();
  float client_timestamp() const;
  void set_client_timestamp(float value);
  private:
  float _internal_client_timestamp() const;
  void _internal_set_client_timestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:world.SpawnNpcOnSectionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcSpawnInfo > npc_spawn_infos_;
    int32_t spawner_id_;
    float client_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class SpawnNpcOnSectionRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.SpawnNpcOnSectionRes) */ {
 public:
  inline SpawnNpcOnSectionRes() : SpawnNpcOnSectionRes(nullptr) {}
  ~SpawnNpcOnSectionRes() override;
  explicit PROTOBUF_CONSTEXPR SpawnNpcOnSectionRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnNpcOnSectionRes(const SpawnNpcOnSectionRes& from);
  SpawnNpcOnSectionRes(SpawnNpcOnSectionRes&& from) noexcept
    : SpawnNpcOnSectionRes() {
    *this = ::std::move(from);
  }

  inline SpawnNpcOnSectionRes& operator=(const SpawnNpcOnSectionRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnNpcOnSectionRes& operator=(SpawnNpcOnSectionRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnNpcOnSectionRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnNpcOnSectionRes* internal_default_instance() {
    return reinterpret_cast<const SpawnNpcOnSectionRes*>(
               &_SpawnNpcOnSectionRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SpawnNpcOnSectionRes& a, SpawnNpcOnSectionRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnNpcOnSectionRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnNpcOnSectionRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnNpcOnSectionRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnNpcOnSectionRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnNpcOnSectionRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnNpcOnSectionRes& from) {
    SpawnNpcOnSectionRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnNpcOnSectionRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.SpawnNpcOnSectionRes";
  }
  protected:
  explicit SpawnNpcOnSectionRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kSpawnerIdFieldNumber = 2,
    kNextClientTimestampFieldNumber = 3,
  };
  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // int32 spawner_id = 2;
  void clear_spawner_id();
  int32_t spawner_id() const;
  void set_spawner_id(int32_t value);
  private:
  int32_t _internal_spawner_id() const;
  void _internal_set_spawner_id(int32_t value);
  public:

  // float next_client_timestamp = 3;
  void clear_next_client_timestamp();
  float next_client_timestamp() const;
  void set_next_client_timestamp(float value);
  private:
  float _internal_next_client_timestamp() const;
  void _internal_set_next_client_timestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:world.SpawnNpcOnSectionRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    int32_t spawner_id_;
    float next_client_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class SpawnNpcOnSectionNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.SpawnNpcOnSectionNotify) */ {
 public:
  inline SpawnNpcOnSectionNotify() : SpawnNpcOnSectionNotify(nullptr) {}
  ~SpawnNpcOnSectionNotify() override;
  explicit PROTOBUF_CONSTEXPR SpawnNpcOnSectionNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnNpcOnSectionNotify(const SpawnNpcOnSectionNotify& from);
  SpawnNpcOnSectionNotify(SpawnNpcOnSectionNotify&& from) noexcept
    : SpawnNpcOnSectionNotify() {
    *this = ::std::move(from);
  }

  inline SpawnNpcOnSectionNotify& operator=(const SpawnNpcOnSectionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnNpcOnSectionNotify& operator=(SpawnNpcOnSectionNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnNpcOnSectionNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnNpcOnSectionNotify* internal_default_instance() {
    return reinterpret_cast<const SpawnNpcOnSectionNotify*>(
               &_SpawnNpcOnSectionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SpawnNpcOnSectionNotify& a, SpawnNpcOnSectionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnNpcOnSectionNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnNpcOnSectionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnNpcOnSectionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnNpcOnSectionNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnNpcOnSectionNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnNpcOnSectionNotify& from) {
    SpawnNpcOnSectionNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnNpcOnSectionNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.SpawnNpcOnSectionNotify";
  }
  protected:
  explicit SpawnNpcOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcInfosFieldNumber = 2,
    kSpawnerIdFieldNumber = 1,
  };
  // repeated .types.NpcInfo npc_infos = 2;
  int npc_infos_size() const;
  private:
  int _internal_npc_infos_size() const;
  public:
  void clear_npc_infos();
  ::types::NpcInfo* mutable_npc_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >*
      mutable_npc_infos();
  private:
  const ::types::NpcInfo& _internal_npc_infos(int index) const;
  ::types::NpcInfo* _internal_add_npc_infos();
  public:
  const ::types::NpcInfo& npc_infos(int index) const;
  ::types::NpcInfo* add_npc_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >&
      npc_infos() const;

  // int32 spawner_id = 1;
  void clear_spawner_id();
  int32_t spawner_id() const;
  void set_spawner_id(int32_t value);
  private:
  int32_t _internal_spawner_id() const;
  void _internal_set_spawner_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.SpawnNpcOnSectionNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo > npc_infos_;
    int32_t spawner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class SpawnProjectileOnSectionReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.SpawnProjectileOnSectionReq) */ {
 public:
  inline SpawnProjectileOnSectionReq() : SpawnProjectileOnSectionReq(nullptr) {}
  ~SpawnProjectileOnSectionReq() override;
  explicit PROTOBUF_CONSTEXPR SpawnProjectileOnSectionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnProjectileOnSectionReq(const SpawnProjectileOnSectionReq& from);
  SpawnProjectileOnSectionReq(SpawnProjectileOnSectionReq&& from) noexcept
    : SpawnProjectileOnSectionReq() {
    *this = ::std::move(from);
  }

  inline SpawnProjectileOnSectionReq& operator=(const SpawnProjectileOnSectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnProjectileOnSectionReq& operator=(SpawnProjectileOnSectionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnProjectileOnSectionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnProjectileOnSectionReq* internal_default_instance() {
    return reinterpret_cast<const SpawnProjectileOnSectionReq*>(
               &_SpawnProjectileOnSectionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SpawnProjectileOnSectionReq& a, SpawnProjectileOnSectionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnProjectileOnSectionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnProjectileOnSectionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnProjectileOnSectionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnProjectileOnSectionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnProjectileOnSectionReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnProjectileOnSectionReq& from) {
    SpawnProjectileOnSectionReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnProjectileOnSectionReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.SpawnProjectileOnSectionReq";
  }
  protected:
  explicit SpawnProjectileOnSectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 2,
    kCharacterPoseFieldNumber = 4,
    kActionIdFieldNumber = 1,
    kProjectileSpeedFieldNumber = 3,
  };
  // .types.Pose pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::types::Pose& pose() const;
  PROTOBUF_NODISCARD ::types::Pose* release_pose();
  ::types::Pose* mutable_pose();
  void set_allocated_pose(::types::Pose* pose);
  private:
  const ::types::Pose& _internal_pose() const;
  ::types::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::types::Pose* pose);
  ::types::Pose* unsafe_arena_release_pose();

  // .types.Pose character_pose = 4;
  bool has_character_pose() const;
  private:
  bool _internal_has_character_pose() const;
  public:
  void clear_character_pose();
  const ::types::Pose& character_pose() const;
  PROTOBUF_NODISCARD ::types::Pose* release_character_pose();
  ::types::Pose* mutable_character_pose();
  void set_allocated_character_pose(::types::Pose* character_pose);
  private:
  const ::types::Pose& _internal_character_pose() const;
  ::types::Pose* _internal_mutable_character_pose();
  public:
  void unsafe_arena_set_allocated_character_pose(
      ::types::Pose* character_pose);
  ::types::Pose* unsafe_arena_release_character_pose();

  // int64 action_id = 1;
  void clear_action_id();
  int64_t action_id() const;
  void set_action_id(int64_t value);
  private:
  int64_t _internal_action_id() const;
  void _internal_set_action_id(int64_t value);
  public:

  // float projectile_speed = 3;
  void clear_projectile_speed();
  float projectile_speed() const;
  void set_projectile_speed(float value);
  private:
  float _internal_projectile_speed() const;
  void _internal_set_projectile_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:world.SpawnProjectileOnSectionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Pose* pose_;
    ::types::Pose* character_pose_;
    int64_t action_id_;
    float projectile_speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class SpawnProjectileOnSectionRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.SpawnProjectileOnSectionRes) */ {
 public:
  inline SpawnProjectileOnSectionRes() : SpawnProjectileOnSectionRes(nullptr) {}
  ~SpawnProjectileOnSectionRes() override;
  explicit PROTOBUF_CONSTEXPR SpawnProjectileOnSectionRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnProjectileOnSectionRes(const SpawnProjectileOnSectionRes& from);
  SpawnProjectileOnSectionRes(SpawnProjectileOnSectionRes&& from) noexcept
    : SpawnProjectileOnSectionRes() {
    *this = ::std::move(from);
  }

  inline SpawnProjectileOnSectionRes& operator=(const SpawnProjectileOnSectionRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnProjectileOnSectionRes& operator=(SpawnProjectileOnSectionRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnProjectileOnSectionRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnProjectileOnSectionRes* internal_default_instance() {
    return reinterpret_cast<const SpawnProjectileOnSectionRes*>(
               &_SpawnProjectileOnSectionRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SpawnProjectileOnSectionRes& a, SpawnProjectileOnSectionRes& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnProjectileOnSectionRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnProjectileOnSectionRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnProjectileOnSectionRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnProjectileOnSectionRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnProjectileOnSectionRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnProjectileOnSectionRes& from) {
    SpawnProjectileOnSectionRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnProjectileOnSectionRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.SpawnProjectileOnSectionRes";
  }
  protected:
  explicit SpawnProjectileOnSectionRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebugTrajectoryFieldNumber = 2,
    kObjectIdFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated .types.Vector3 debug_trajectory = 2;
  int debug_trajectory_size() const;
  private:
  int _internal_debug_trajectory_size() const;
  public:
  void clear_debug_trajectory();
  ::types::Vector3* mutable_debug_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Vector3 >*
      mutable_debug_trajectory();
  private:
  const ::types::Vector3& _internal_debug_trajectory(int index) const;
  ::types::Vector3* _internal_add_debug_trajectory();
  public:
  const ::types::Vector3& debug_trajectory(int index) const;
  ::types::Vector3* add_debug_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Vector3 >&
      debug_trajectory() const;

  // int64 object_id = 3;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // @@protoc_insertion_point(class_scope:world.SpawnProjectileOnSectionRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Vector3 > debug_trajectory_;
    int64_t object_id_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class SpawnProjectileOnSectionNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.SpawnProjectileOnSectionNotify) */ {
 public:
  inline SpawnProjectileOnSectionNotify() : SpawnProjectileOnSectionNotify(nullptr) {}
  ~SpawnProjectileOnSectionNotify() override;
  explicit PROTOBUF_CONSTEXPR SpawnProjectileOnSectionNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpawnProjectileOnSectionNotify(const SpawnProjectileOnSectionNotify& from);
  SpawnProjectileOnSectionNotify(SpawnProjectileOnSectionNotify&& from) noexcept
    : SpawnProjectileOnSectionNotify() {
    *this = ::std::move(from);
  }

  inline SpawnProjectileOnSectionNotify& operator=(const SpawnProjectileOnSectionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpawnProjectileOnSectionNotify& operator=(SpawnProjectileOnSectionNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpawnProjectileOnSectionNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpawnProjectileOnSectionNotify* internal_default_instance() {
    return reinterpret_cast<const SpawnProjectileOnSectionNotify*>(
               &_SpawnProjectileOnSectionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SpawnProjectileOnSectionNotify& a, SpawnProjectileOnSectionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(SpawnProjectileOnSectionNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpawnProjectileOnSectionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpawnProjectileOnSectionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpawnProjectileOnSectionNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpawnProjectileOnSectionNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpawnProjectileOnSectionNotify& from) {
    SpawnProjectileOnSectionNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpawnProjectileOnSectionNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.SpawnProjectileOnSectionNotify";
  }
  protected:
  explicit SpawnProjectileOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectileInfoFieldNumber = 1,
  };
  // .types.ProjectileInfo projectile_info = 1;
  bool has_projectile_info() const;
  private:
  bool _internal_has_projectile_info() const;
  public:
  void clear_projectile_info();
  const ::types::ProjectileInfo& projectile_info() const;
  PROTOBUF_NODISCARD ::types::ProjectileInfo* release_projectile_info();
  ::types::ProjectileInfo* mutable_projectile_info();
  void set_allocated_projectile_info(::types::ProjectileInfo* projectile_info);
  private:
  const ::types::ProjectileInfo& _internal_projectile_info() const;
  ::types::ProjectileInfo* _internal_mutable_projectile_info();
  public:
  void unsafe_arena_set_allocated_projectile_info(
      ::types::ProjectileInfo* projectile_info);
  ::types::ProjectileInfo* unsafe_arena_release_projectile_info();

  // @@protoc_insertion_point(class_scope:world.SpawnProjectileOnSectionNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::ProjectileInfo* projectile_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class HitObjectByProjectileReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.HitObjectByProjectileReq) */ {
 public:
  inline HitObjectByProjectileReq() : HitObjectByProjectileReq(nullptr) {}
  ~HitObjectByProjectileReq() override;
  explicit PROTOBUF_CONSTEXPR HitObjectByProjectileReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HitObjectByProjectileReq(const HitObjectByProjectileReq& from);
  HitObjectByProjectileReq(HitObjectByProjectileReq&& from) noexcept
    : HitObjectByProjectileReq() {
    *this = ::std::move(from);
  }

  inline HitObjectByProjectileReq& operator=(const HitObjectByProjectileReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitObjectByProjectileReq& operator=(HitObjectByProjectileReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HitObjectByProjectileReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const HitObjectByProjectileReq* internal_default_instance() {
    return reinterpret_cast<const HitObjectByProjectileReq*>(
               &_HitObjectByProjectileReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(HitObjectByProjectileReq& a, HitObjectByProjectileReq& b) {
    a.Swap(&b);
  }
  inline void Swap(HitObjectByProjectileReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitObjectByProjectileReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HitObjectByProjectileReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HitObjectByProjectileReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HitObjectByProjectileReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HitObjectByProjectileReq& from) {
    HitObjectByProjectileReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitObjectByProjectileReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.HitObjectByProjectileReq";
  }
  protected:
  explicit HitObjectByProjectileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnHitLocationFieldNumber = 2,
    kHitObjectIdFieldNumber = 1,
    kProjectileObjectIdFieldNumber = 3,
  };
  // .types.Vector3 on_hit_location = 2;
  bool has_on_hit_location() const;
  private:
  bool _internal_has_on_hit_location() const;
  public:
  void clear_on_hit_location();
  const ::types::Vector3& on_hit_location() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_on_hit_location();
  ::types::Vector3* mutable_on_hit_location();
  void set_allocated_on_hit_location(::types::Vector3* on_hit_location);
  private:
  const ::types::Vector3& _internal_on_hit_location() const;
  ::types::Vector3* _internal_mutable_on_hit_location();
  public:
  void unsafe_arena_set_allocated_on_hit_location(
      ::types::Vector3* on_hit_location);
  ::types::Vector3* unsafe_arena_release_on_hit_location();

  // int64 hit_object_id = 1;
  void clear_hit_object_id();
  int64_t hit_object_id() const;
  void set_hit_object_id(int64_t value);
  private:
  int64_t _internal_hit_object_id() const;
  void _internal_set_hit_object_id(int64_t value);
  public:

  // int64 projectile_object_id = 3;
  void clear_projectile_object_id();
  int64_t projectile_object_id() const;
  void set_projectile_object_id(int64_t value);
  private:
  int64_t _internal_projectile_object_id() const;
  void _internal_set_projectile_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.HitObjectByProjectileReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Vector3* on_hit_location_;
    int64_t hit_object_id_;
    int64_t projectile_object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class HitObjectByProjectileRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.HitObjectByProjectileRes) */ {
 public:
  inline HitObjectByProjectileRes() : HitObjectByProjectileRes(nullptr) {}
  ~HitObjectByProjectileRes() override;
  explicit PROTOBUF_CONSTEXPR HitObjectByProjectileRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HitObjectByProjectileRes(const HitObjectByProjectileRes& from);
  HitObjectByProjectileRes(HitObjectByProjectileRes&& from) noexcept
    : HitObjectByProjectileRes() {
    *this = ::std::move(from);
  }

  inline HitObjectByProjectileRes& operator=(const HitObjectByProjectileRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitObjectByProjectileRes& operator=(HitObjectByProjectileRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HitObjectByProjectileRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const HitObjectByProjectileRes* internal_default_instance() {
    return reinterpret_cast<const HitObjectByProjectileRes*>(
               &_HitObjectByProjectileRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(HitObjectByProjectileRes& a, HitObjectByProjectileRes& b) {
    a.Swap(&b);
  }
  inline void Swap(HitObjectByProjectileRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitObjectByProjectileRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HitObjectByProjectileRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HitObjectByProjectileRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HitObjectByProjectileRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HitObjectByProjectileRes& from) {
    HitObjectByProjectileRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitObjectByProjectileRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.HitObjectByProjectileRes";
  }
  protected:
  explicit HitObjectByProjectileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // @@protoc_insertion_point(class_scope:world.HitObjectByProjectileRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class HitObjectByProjectileNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.HitObjectByProjectileNotify) */ {
 public:
  inline HitObjectByProjectileNotify() : HitObjectByProjectileNotify(nullptr) {}
  ~HitObjectByProjectileNotify() override;
  explicit PROTOBUF_CONSTEXPR HitObjectByProjectileNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HitObjectByProjectileNotify(const HitObjectByProjectileNotify& from);
  HitObjectByProjectileNotify(HitObjectByProjectileNotify&& from) noexcept
    : HitObjectByProjectileNotify() {
    *this = ::std::move(from);
  }

  inline HitObjectByProjectileNotify& operator=(const HitObjectByProjectileNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline HitObjectByProjectileNotify& operator=(HitObjectByProjectileNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HitObjectByProjectileNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const HitObjectByProjectileNotify* internal_default_instance() {
    return reinterpret_cast<const HitObjectByProjectileNotify*>(
               &_HitObjectByProjectileNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(HitObjectByProjectileNotify& a, HitObjectByProjectileNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(HitObjectByProjectileNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HitObjectByProjectileNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HitObjectByProjectileNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HitObjectByProjectileNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HitObjectByProjectileNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HitObjectByProjectileNotify& from) {
    HitObjectByProjectileNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitObjectByProjectileNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.HitObjectByProjectileNotify";
  }
  protected:
  explicit HitObjectByProjectileNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectileObjectIdFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kCurrentHpFieldNumber = 3,
    kIsAliveFieldNumber = 4,
  };
  // int64 projectile_object_id = 1;
  void clear_projectile_object_id();
  int64_t projectile_object_id() const;
  void set_projectile_object_id(int64_t value);
  private:
  int64_t _internal_projectile_object_id() const;
  void _internal_set_projectile_object_id(int64_t value);
  public:

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 current_hp = 3;
  void clear_current_hp();
  int64_t current_hp() const;
  void set_current_hp(int64_t value);
  private:
  int64_t _internal_current_hp() const;
  void _internal_set_current_hp(int64_t value);
  public:

  // bool is_alive = 4;
  void clear_is_alive();
  bool is_alive() const;
  void set_is_alive(bool value);
  private:
  bool _internal_is_alive() const;
  void _internal_set_is_alive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:world.HitObjectByProjectileNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t projectile_object_id_;
    int64_t object_id_;
    int64_t current_hp_;
    bool is_alive_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class DespawnNpcOnSectionNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.DespawnNpcOnSectionNotify) */ {
 public:
  inline DespawnNpcOnSectionNotify() : DespawnNpcOnSectionNotify(nullptr) {}
  ~DespawnNpcOnSectionNotify() override;
  explicit PROTOBUF_CONSTEXPR DespawnNpcOnSectionNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DespawnNpcOnSectionNotify(const DespawnNpcOnSectionNotify& from);
  DespawnNpcOnSectionNotify(DespawnNpcOnSectionNotify&& from) noexcept
    : DespawnNpcOnSectionNotify() {
    *this = ::std::move(from);
  }

  inline DespawnNpcOnSectionNotify& operator=(const DespawnNpcOnSectionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline DespawnNpcOnSectionNotify& operator=(DespawnNpcOnSectionNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DespawnNpcOnSectionNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const DespawnNpcOnSectionNotify* internal_default_instance() {
    return reinterpret_cast<const DespawnNpcOnSectionNotify*>(
               &_DespawnNpcOnSectionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DespawnNpcOnSectionNotify& a, DespawnNpcOnSectionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(DespawnNpcOnSectionNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DespawnNpcOnSectionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DespawnNpcOnSectionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DespawnNpcOnSectionNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DespawnNpcOnSectionNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DespawnNpcOnSectionNotify& from) {
    DespawnNpcOnSectionNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DespawnNpcOnSectionNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.DespawnNpcOnSectionNotify";
  }
  protected:
  explicit DespawnNpcOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.DespawnNpcOnSectionNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class DespawnProjectileOnSectionNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.DespawnProjectileOnSectionNotify) */ {
 public:
  inline DespawnProjectileOnSectionNotify() : DespawnProjectileOnSectionNotify(nullptr) {}
  ~DespawnProjectileOnSectionNotify() override;
  explicit PROTOBUF_CONSTEXPR DespawnProjectileOnSectionNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DespawnProjectileOnSectionNotify(const DespawnProjectileOnSectionNotify& from);
  DespawnProjectileOnSectionNotify(DespawnProjectileOnSectionNotify&& from) noexcept
    : DespawnProjectileOnSectionNotify() {
    *this = ::std::move(from);
  }

  inline DespawnProjectileOnSectionNotify& operator=(const DespawnProjectileOnSectionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline DespawnProjectileOnSectionNotify& operator=(DespawnProjectileOnSectionNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DespawnProjectileOnSectionNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const DespawnProjectileOnSectionNotify* internal_default_instance() {
    return reinterpret_cast<const DespawnProjectileOnSectionNotify*>(
               &_DespawnProjectileOnSectionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DespawnProjectileOnSectionNotify& a, DespawnProjectileOnSectionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(DespawnProjectileOnSectionNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DespawnProjectileOnSectionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DespawnProjectileOnSectionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DespawnProjectileOnSectionNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DespawnProjectileOnSectionNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DespawnProjectileOnSectionNotify& from) {
    DespawnProjectileOnSectionNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DespawnProjectileOnSectionNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.DespawnProjectileOnSectionNotify";
  }
  protected:
  explicit DespawnProjectileOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
  };
  // int64 object_id = 1;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.DespawnProjectileOnSectionNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class DebugSimulationPositionNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.DebugSimulationPositionNotify) */ {
 public:
  inline DebugSimulationPositionNotify() : DebugSimulationPositionNotify(nullptr) {}
  ~DebugSimulationPositionNotify() override;
  explicit PROTOBUF_CONSTEXPR DebugSimulationPositionNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugSimulationPositionNotify(const DebugSimulationPositionNotify& from);
  DebugSimulationPositionNotify(DebugSimulationPositionNotify&& from) noexcept
    : DebugSimulationPositionNotify() {
    *this = ::std::move(from);
  }

  inline DebugSimulationPositionNotify& operator=(const DebugSimulationPositionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugSimulationPositionNotify& operator=(DebugSimulationPositionNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugSimulationPositionNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const DebugSimulationPositionNotify* internal_default_instance() {
    return reinterpret_cast<const DebugSimulationPositionNotify*>(
               &_DebugSimulationPositionNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DebugSimulationPositionNotify& a, DebugSimulationPositionNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugSimulationPositionNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugSimulationPositionNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugSimulationPositionNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugSimulationPositionNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugSimulationPositionNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugSimulationPositionNotify& from) {
    DebugSimulationPositionNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugSimulationPositionNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.DebugSimulationPositionNotify";
  }
  protected:
  explicit DebugSimulationPositionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kShapeInfoFieldNumber = 4,
    kColorFieldNumber = 2,
    kShapeFieldNumber = 3,
  };
  // .types.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::types::Vector3& position() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_position();
  ::types::Vector3* mutable_position();
  void set_allocated_position(::types::Vector3* position);
  private:
  const ::types::Vector3& _internal_position() const;
  ::types::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::types::Vector3* position);
  ::types::Vector3* unsafe_arena_release_position();

  // .types.DebugShapeInfo shape_info = 4;
  bool has_shape_info() const;
  private:
  bool _internal_has_shape_info() const;
  public:
  void clear_shape_info();
  const ::types::DebugShapeInfo& shape_info() const;
  PROTOBUF_NODISCARD ::types::DebugShapeInfo* release_shape_info();
  ::types::DebugShapeInfo* mutable_shape_info();
  void set_allocated_shape_info(::types::DebugShapeInfo* shape_info);
  private:
  const ::types::DebugShapeInfo& _internal_shape_info() const;
  ::types::DebugShapeInfo* _internal_mutable_shape_info();
  public:
  void unsafe_arena_set_allocated_shape_info(
      ::types::DebugShapeInfo* shape_info);
  ::types::DebugShapeInfo* unsafe_arena_release_shape_info();

  // .types.Color color = 2;
  void clear_color();
  ::types::Color color() const;
  void set_color(::types::Color value);
  private:
  ::types::Color _internal_color() const;
  void _internal_set_color(::types::Color value);
  public:

  // .types.DebugShape shape = 3;
  void clear_shape();
  ::types::DebugShape shape() const;
  void set_shape(::types::DebugShape value);
  private:
  ::types::DebugShape _internal_shape() const;
  void _internal_set_shape(::types::DebugShape value);
  public:

  // @@protoc_insertion_point(class_scope:world.DebugSimulationPositionNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Vector3* position_;
    ::types::DebugShapeInfo* shape_info_;
    int color_;
    int shape_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterServerReq

// string server_address = 1;
inline void RegisterServerReq::clear_server_address() {
  _impl_.server_address_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::server_address() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerReq.server_address)
  return _internal_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerReq::set_server_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:world.RegisterServerReq.server_address)
}
inline std::string* RegisterServerReq::mutable_server_address() {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:world.RegisterServerReq.server_address)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_server_address() const {
  return _impl_.server_address_.Get();
}
inline void RegisterServerReq::_internal_set_server_address(const std::string& value) {
  
  _impl_.server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerReq::_internal_mutable_server_address() {
  
  return _impl_.server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerReq::release_server_address() {
  // @@protoc_insertion_point(field_release:world.RegisterServerReq.server_address)
  return _impl_.server_address_.Release();
}
inline void RegisterServerReq::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    
  } else {
    
  }
  _impl_.server_address_.SetAllocated(server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:world.RegisterServerReq.server_address)
}

// .types.ServerType server_type = 2;
inline void RegisterServerReq::clear_server_type() {
  _impl_.server_type_ = 0;
}
inline ::types::ServerType RegisterServerReq::_internal_server_type() const {
  return static_cast< ::types::ServerType >(_impl_.server_type_);
}
inline ::types::ServerType RegisterServerReq::server_type() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerReq.server_type)
  return _internal_server_type();
}
inline void RegisterServerReq::_internal_set_server_type(::types::ServerType value) {
  
  _impl_.server_type_ = value;
}
inline void RegisterServerReq::set_server_type(::types::ServerType value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:world.RegisterServerReq.server_type)
}

// string level_map_name = 3;
inline void RegisterServerReq::clear_level_map_name() {
  _impl_.level_map_name_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::level_map_name() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerReq.level_map_name)
  return _internal_level_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerReq::set_level_map_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.level_map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:world.RegisterServerReq.level_map_name)
}
inline std::string* RegisterServerReq::mutable_level_map_name() {
  std::string* _s = _internal_mutable_level_map_name();
  // @@protoc_insertion_point(field_mutable:world.RegisterServerReq.level_map_name)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_level_map_name() const {
  return _impl_.level_map_name_.Get();
}
inline void RegisterServerReq::_internal_set_level_map_name(const std::string& value) {
  
  _impl_.level_map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerReq::_internal_mutable_level_map_name() {
  
  return _impl_.level_map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerReq::release_level_map_name() {
  // @@protoc_insertion_point(field_release:world.RegisterServerReq.level_map_name)
  return _impl_.level_map_name_.Release();
}
inline void RegisterServerReq::set_allocated_level_map_name(std::string* level_map_name) {
  if (level_map_name != nullptr) {
    
  } else {
    
  }
  _impl_.level_map_name_.SetAllocated(level_map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.level_map_name_.IsDefault()) {
    _impl_.level_map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:world.RegisterServerReq.level_map_name)
}

// -------------------------------------------------------------------

// RegisterServerRes

// .types.Result result = 1;
inline void RegisterServerRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result RegisterServerRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result RegisterServerRes::result() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerRes.result)
  return _internal_result();
}
inline void RegisterServerRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void RegisterServerRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.RegisterServerRes.result)
}

// int32 server_id = 2;
inline void RegisterServerRes::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t RegisterServerRes::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t RegisterServerRes::server_id() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerRes.server_id)
  return _internal_server_id();
}
inline void RegisterServerRes::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void RegisterServerRes::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:world.RegisterServerRes.server_id)
}

// -------------------------------------------------------------------

// ServerPingReq

// int32 server_id = 1;
inline void ServerPingReq::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t ServerPingReq::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t ServerPingReq::server_id() const {
  // @@protoc_insertion_point(field_get:world.ServerPingReq.server_id)
  return _internal_server_id();
}
inline void ServerPingReq::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void ServerPingReq::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:world.ServerPingReq.server_id)
}

// -------------------------------------------------------------------

// ServerPingRes

// .types.Result result = 1;
inline void ServerPingRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result ServerPingRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result ServerPingRes::result() const {
  // @@protoc_insertion_point(field_get:world.ServerPingRes.result)
  return _internal_result();
}
inline void ServerPingRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void ServerPingRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.ServerPingRes.result)
}

// int32 server_id = 2;
inline void ServerPingRes::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t ServerPingRes::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t ServerPingRes::server_id() const {
  // @@protoc_insertion_point(field_get:world.ServerPingRes.server_id)
  return _internal_server_id();
}
inline void ServerPingRes::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void ServerPingRes::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:world.ServerPingRes.server_id)
}

// -------------------------------------------------------------------

// HelloWorldServer

// string user_id = 1;
inline void HelloWorldServer::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& HelloWorldServer::user_id() const {
  // @@protoc_insertion_point(field_get:world.HelloWorldServer.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloWorldServer::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:world.HelloWorldServer.user_id)
}
inline std::string* HelloWorldServer::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:world.HelloWorldServer.user_id)
  return _s;
}
inline const std::string& HelloWorldServer::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void HelloWorldServer::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloWorldServer::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloWorldServer::release_user_id() {
  // @@protoc_insertion_point(field_release:world.HelloWorldServer.user_id)
  return _impl_.user_id_.Release();
}
inline void HelloWorldServer::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:world.HelloWorldServer.user_id)
}

// string access_token = 2;
inline void HelloWorldServer::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
}
inline const std::string& HelloWorldServer::access_token() const {
  // @@protoc_insertion_point(field_get:world.HelloWorldServer.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloWorldServer::set_access_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:world.HelloWorldServer.access_token)
}
inline std::string* HelloWorldServer::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:world.HelloWorldServer.access_token)
  return _s;
}
inline const std::string& HelloWorldServer::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void HelloWorldServer::_internal_set_access_token(const std::string& value) {
  
  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloWorldServer::_internal_mutable_access_token() {
  
  return _impl_.access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloWorldServer::release_access_token() {
  // @@protoc_insertion_point(field_release:world.HelloWorldServer.access_token)
  return _impl_.access_token_.Release();
}
inline void HelloWorldServer::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  _impl_.access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:world.HelloWorldServer.access_token)
}

// int64 playing_character_id = 3;
inline void HelloWorldServer::clear_playing_character_id() {
  _impl_.playing_character_id_ = int64_t{0};
}
inline int64_t HelloWorldServer::_internal_playing_character_id() const {
  return _impl_.playing_character_id_;
}
inline int64_t HelloWorldServer::playing_character_id() const {
  // @@protoc_insertion_point(field_get:world.HelloWorldServer.playing_character_id)
  return _internal_playing_character_id();
}
inline void HelloWorldServer::_internal_set_playing_character_id(int64_t value) {
  
  _impl_.playing_character_id_ = value;
}
inline void HelloWorldServer::set_playing_character_id(int64_t value) {
  _internal_set_playing_character_id(value);
  // @@protoc_insertion_point(field_set:world.HelloWorldServer.playing_character_id)
}

// int32 playing_server_id = 4;
inline void HelloWorldServer::clear_playing_server_id() {
  _impl_.playing_server_id_ = 0;
}
inline int32_t HelloWorldServer::_internal_playing_server_id() const {
  return _impl_.playing_server_id_;
}
inline int32_t HelloWorldServer::playing_server_id() const {
  // @@protoc_insertion_point(field_get:world.HelloWorldServer.playing_server_id)
  return _internal_playing_server_id();
}
inline void HelloWorldServer::_internal_set_playing_server_id(int32_t value) {
  
  _impl_.playing_server_id_ = value;
}
inline void HelloWorldServer::set_playing_server_id(int32_t value) {
  _internal_set_playing_server_id(value);
  // @@protoc_insertion_point(field_set:world.HelloWorldServer.playing_server_id)
}

// -------------------------------------------------------------------

// HelloWorldClient

// int32 map_uid = 1;
inline void HelloWorldClient::clear_map_uid() {
  _impl_.map_uid_ = 0;
}
inline int32_t HelloWorldClient::_internal_map_uid() const {
  return _impl_.map_uid_;
}
inline int32_t HelloWorldClient::map_uid() const {
  // @@protoc_insertion_point(field_get:world.HelloWorldClient.map_uid)
  return _internal_map_uid();
}
inline void HelloWorldClient::_internal_set_map_uid(int32_t value) {
  
  _impl_.map_uid_ = value;
}
inline void HelloWorldClient::set_map_uid(int32_t value) {
  _internal_set_map_uid(value);
  // @@protoc_insertion_point(field_set:world.HelloWorldClient.map_uid)
}

// int32 server_tick_interval_ms = 2;
inline void HelloWorldClient::clear_server_tick_interval_ms() {
  _impl_.server_tick_interval_ms_ = 0;
}
inline int32_t HelloWorldClient::_internal_server_tick_interval_ms() const {
  return _impl_.server_tick_interval_ms_;
}
inline int32_t HelloWorldClient::server_tick_interval_ms() const {
  // @@protoc_insertion_point(field_get:world.HelloWorldClient.server_tick_interval_ms)
  return _internal_server_tick_interval_ms();
}
inline void HelloWorldClient::_internal_set_server_tick_interval_ms(int32_t value) {
  
  _impl_.server_tick_interval_ms_ = value;
}
inline void HelloWorldClient::set_server_tick_interval_ms(int32_t value) {
  _internal_set_server_tick_interval_ms(value);
  // @@protoc_insertion_point(field_set:world.HelloWorldClient.server_tick_interval_ms)
}

// -------------------------------------------------------------------

// ClientEnterMapReq

// int32 map_uid = 1;
inline void ClientEnterMapReq::clear_map_uid() {
  _impl_.map_uid_ = 0;
}
inline int32_t ClientEnterMapReq::_internal_map_uid() const {
  return _impl_.map_uid_;
}
inline int32_t ClientEnterMapReq::map_uid() const {
  // @@protoc_insertion_point(field_get:world.ClientEnterMapReq.map_uid)
  return _internal_map_uid();
}
inline void ClientEnterMapReq::_internal_set_map_uid(int32_t value) {
  
  _impl_.map_uid_ = value;
}
inline void ClientEnterMapReq::set_map_uid(int32_t value) {
  _internal_set_map_uid(value);
  // @@protoc_insertion_point(field_set:world.ClientEnterMapReq.map_uid)
}

// .types.CharacterPose character_pos = 2;
inline bool ClientEnterMapReq::_internal_has_character_pos() const {
  return this != internal_default_instance() && _impl_.character_pos_ != nullptr;
}
inline bool ClientEnterMapReq::has_character_pos() const {
  return _internal_has_character_pos();
}
inline const ::types::CharacterPose& ClientEnterMapReq::_internal_character_pos() const {
  const ::types::CharacterPose* p = _impl_.character_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::CharacterPose&>(
      ::types::_CharacterPose_default_instance_);
}
inline const ::types::CharacterPose& ClientEnterMapReq::character_pos() const {
  // @@protoc_insertion_point(field_get:world.ClientEnterMapReq.character_pos)
  return _internal_character_pos();
}
inline void ClientEnterMapReq::unsafe_arena_set_allocated_character_pos(
    ::types::CharacterPose* character_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  _impl_.character_pos_ = character_pos;
  if (character_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientEnterMapReq.character_pos)
}
inline ::types::CharacterPose* ClientEnterMapReq::release_character_pos() {
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::CharacterPose* ClientEnterMapReq::unsafe_arena_release_character_pos() {
  // @@protoc_insertion_point(field_release:world.ClientEnterMapReq.character_pos)
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
  return temp;
}
inline ::types::CharacterPose* ClientEnterMapReq::_internal_mutable_character_pos() {
  
  if (_impl_.character_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::CharacterPose>(GetArenaForAllocation());
    _impl_.character_pos_ = p;
  }
  return _impl_.character_pos_;
}
inline ::types::CharacterPose* ClientEnterMapReq::mutable_character_pos() {
  ::types::CharacterPose* _msg = _internal_mutable_character_pos();
  // @@protoc_insertion_point(field_mutable:world.ClientEnterMapReq.character_pos)
  return _msg;
}
inline void ClientEnterMapReq::set_allocated_character_pos(::types::CharacterPose* character_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  if (character_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_pos));
    if (message_arena != submessage_arena) {
      character_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_pos_ = character_pos;
  // @@protoc_insertion_point(field_set_allocated:world.ClientEnterMapReq.character_pos)
}

// -------------------------------------------------------------------

// ClientEnterMapRes

// .types.Result result = 1;
inline void ClientEnterMapRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result ClientEnterMapRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result ClientEnterMapRes::result() const {
  // @@protoc_insertion_point(field_get:world.ClientEnterMapRes.result)
  return _internal_result();
}
inline void ClientEnterMapRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void ClientEnterMapRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.ClientEnterMapRes.result)
}

// .types.SectionInfo section_info = 4;
inline bool ClientEnterMapRes::_internal_has_section_info() const {
  return this != internal_default_instance() && _impl_.section_info_ != nullptr;
}
inline bool ClientEnterMapRes::has_section_info() const {
  return _internal_has_section_info();
}
inline const ::types::SectionInfo& ClientEnterMapRes::_internal_section_info() const {
  const ::types::SectionInfo* p = _impl_.section_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::SectionInfo&>(
      ::types::_SectionInfo_default_instance_);
}
inline const ::types::SectionInfo& ClientEnterMapRes::section_info() const {
  // @@protoc_insertion_point(field_get:world.ClientEnterMapRes.section_info)
  return _internal_section_info();
}
inline void ClientEnterMapRes::unsafe_arena_set_allocated_section_info(
    ::types::SectionInfo* section_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_info_);
  }
  _impl_.section_info_ = section_info;
  if (section_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientEnterMapRes.section_info)
}
inline ::types::SectionInfo* ClientEnterMapRes::release_section_info() {
  
  ::types::SectionInfo* temp = _impl_.section_info_;
  _impl_.section_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::SectionInfo* ClientEnterMapRes::unsafe_arena_release_section_info() {
  // @@protoc_insertion_point(field_release:world.ClientEnterMapRes.section_info)
  
  ::types::SectionInfo* temp = _impl_.section_info_;
  _impl_.section_info_ = nullptr;
  return temp;
}
inline ::types::SectionInfo* ClientEnterMapRes::_internal_mutable_section_info() {
  
  if (_impl_.section_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::SectionInfo>(GetArenaForAllocation());
    _impl_.section_info_ = p;
  }
  return _impl_.section_info_;
}
inline ::types::SectionInfo* ClientEnterMapRes::mutable_section_info() {
  ::types::SectionInfo* _msg = _internal_mutable_section_info();
  // @@protoc_insertion_point(field_mutable:world.ClientEnterMapRes.section_info)
  return _msg;
}
inline void ClientEnterMapRes::set_allocated_section_info(::types::SectionInfo* section_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_info_);
  }
  if (section_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_info));
    if (message_arena != submessage_arena) {
      section_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.section_info_ = section_info;
  // @@protoc_insertion_point(field_set_allocated:world.ClientEnterMapRes.section_info)
}

// -------------------------------------------------------------------

// ClientEnterMapNotify

// .types.SectionInfo section_info = 1;
inline bool ClientEnterMapNotify::_internal_has_section_info() const {
  return this != internal_default_instance() && _impl_.section_info_ != nullptr;
}
inline bool ClientEnterMapNotify::has_section_info() const {
  return _internal_has_section_info();
}
inline const ::types::SectionInfo& ClientEnterMapNotify::_internal_section_info() const {
  const ::types::SectionInfo* p = _impl_.section_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::SectionInfo&>(
      ::types::_SectionInfo_default_instance_);
}
inline const ::types::SectionInfo& ClientEnterMapNotify::section_info() const {
  // @@protoc_insertion_point(field_get:world.ClientEnterMapNotify.section_info)
  return _internal_section_info();
}
inline void ClientEnterMapNotify::unsafe_arena_set_allocated_section_info(
    ::types::SectionInfo* section_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_info_);
  }
  _impl_.section_info_ = section_info;
  if (section_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientEnterMapNotify.section_info)
}
inline ::types::SectionInfo* ClientEnterMapNotify::release_section_info() {
  
  ::types::SectionInfo* temp = _impl_.section_info_;
  _impl_.section_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::SectionInfo* ClientEnterMapNotify::unsafe_arena_release_section_info() {
  // @@protoc_insertion_point(field_release:world.ClientEnterMapNotify.section_info)
  
  ::types::SectionInfo* temp = _impl_.section_info_;
  _impl_.section_info_ = nullptr;
  return temp;
}
inline ::types::SectionInfo* ClientEnterMapNotify::_internal_mutable_section_info() {
  
  if (_impl_.section_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::SectionInfo>(GetArenaForAllocation());
    _impl_.section_info_ = p;
  }
  return _impl_.section_info_;
}
inline ::types::SectionInfo* ClientEnterMapNotify::mutable_section_info() {
  ::types::SectionInfo* _msg = _internal_mutable_section_info();
  // @@protoc_insertion_point(field_mutable:world.ClientEnterMapNotify.section_info)
  return _msg;
}
inline void ClientEnterMapNotify::set_allocated_section_info(::types::SectionInfo* section_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_info_);
  }
  if (section_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_info));
    if (message_arena != submessage_arena) {
      section_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.section_info_ = section_info;
  // @@protoc_insertion_point(field_set_allocated:world.ClientEnterMapNotify.section_info)
}

// -------------------------------------------------------------------

// ClientLeaveMapNotify

// .types.SectionInfo section_info = 2;
inline bool ClientLeaveMapNotify::_internal_has_section_info() const {
  return this != internal_default_instance() && _impl_.section_info_ != nullptr;
}
inline bool ClientLeaveMapNotify::has_section_info() const {
  return _internal_has_section_info();
}
inline const ::types::SectionInfo& ClientLeaveMapNotify::_internal_section_info() const {
  const ::types::SectionInfo* p = _impl_.section_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::SectionInfo&>(
      ::types::_SectionInfo_default_instance_);
}
inline const ::types::SectionInfo& ClientLeaveMapNotify::section_info() const {
  // @@protoc_insertion_point(field_get:world.ClientLeaveMapNotify.section_info)
  return _internal_section_info();
}
inline void ClientLeaveMapNotify::unsafe_arena_set_allocated_section_info(
    ::types::SectionInfo* section_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_info_);
  }
  _impl_.section_info_ = section_info;
  if (section_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientLeaveMapNotify.section_info)
}
inline ::types::SectionInfo* ClientLeaveMapNotify::release_section_info() {
  
  ::types::SectionInfo* temp = _impl_.section_info_;
  _impl_.section_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::SectionInfo* ClientLeaveMapNotify::unsafe_arena_release_section_info() {
  // @@protoc_insertion_point(field_release:world.ClientLeaveMapNotify.section_info)
  
  ::types::SectionInfo* temp = _impl_.section_info_;
  _impl_.section_info_ = nullptr;
  return temp;
}
inline ::types::SectionInfo* ClientLeaveMapNotify::_internal_mutable_section_info() {
  
  if (_impl_.section_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::SectionInfo>(GetArenaForAllocation());
    _impl_.section_info_ = p;
  }
  return _impl_.section_info_;
}
inline ::types::SectionInfo* ClientLeaveMapNotify::mutable_section_info() {
  ::types::SectionInfo* _msg = _internal_mutable_section_info();
  // @@protoc_insertion_point(field_mutable:world.ClientLeaveMapNotify.section_info)
  return _msg;
}
inline void ClientLeaveMapNotify::set_allocated_section_info(::types::SectionInfo* section_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.section_info_);
  }
  if (section_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(section_info));
    if (message_arena != submessage_arena) {
      section_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, section_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.section_info_ = section_info;
  // @@protoc_insertion_point(field_set_allocated:world.ClientLeaveMapNotify.section_info)
}

// -------------------------------------------------------------------

// ClientMoveReq

// .types.CharacterPose character_pos = 1;
inline bool ClientMoveReq::_internal_has_character_pos() const {
  return this != internal_default_instance() && _impl_.character_pos_ != nullptr;
}
inline bool ClientMoveReq::has_character_pos() const {
  return _internal_has_character_pos();
}
inline const ::types::CharacterPose& ClientMoveReq::_internal_character_pos() const {
  const ::types::CharacterPose* p = _impl_.character_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::CharacterPose&>(
      ::types::_CharacterPose_default_instance_);
}
inline const ::types::CharacterPose& ClientMoveReq::character_pos() const {
  // @@protoc_insertion_point(field_get:world.ClientMoveReq.character_pos)
  return _internal_character_pos();
}
inline void ClientMoveReq::unsafe_arena_set_allocated_character_pos(
    ::types::CharacterPose* character_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  _impl_.character_pos_ = character_pos;
  if (character_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientMoveReq.character_pos)
}
inline ::types::CharacterPose* ClientMoveReq::release_character_pos() {
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::CharacterPose* ClientMoveReq::unsafe_arena_release_character_pos() {
  // @@protoc_insertion_point(field_release:world.ClientMoveReq.character_pos)
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
  return temp;
}
inline ::types::CharacterPose* ClientMoveReq::_internal_mutable_character_pos() {
  
  if (_impl_.character_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::CharacterPose>(GetArenaForAllocation());
    _impl_.character_pos_ = p;
  }
  return _impl_.character_pos_;
}
inline ::types::CharacterPose* ClientMoveReq::mutable_character_pos() {
  ::types::CharacterPose* _msg = _internal_mutable_character_pos();
  // @@protoc_insertion_point(field_mutable:world.ClientMoveReq.character_pos)
  return _msg;
}
inline void ClientMoveReq::set_allocated_character_pos(::types::CharacterPose* character_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  if (character_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_pos));
    if (message_arena != submessage_arena) {
      character_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_pos_ = character_pos;
  // @@protoc_insertion_point(field_set_allocated:world.ClientMoveReq.character_pos)
}

// float client_timestamp = 3;
inline void ClientMoveReq::clear_client_timestamp() {
  _impl_.client_timestamp_ = 0;
}
inline float ClientMoveReq::_internal_client_timestamp() const {
  return _impl_.client_timestamp_;
}
inline float ClientMoveReq::client_timestamp() const {
  // @@protoc_insertion_point(field_get:world.ClientMoveReq.client_timestamp)
  return _internal_client_timestamp();
}
inline void ClientMoveReq::_internal_set_client_timestamp(float value) {
  
  _impl_.client_timestamp_ = value;
}
inline void ClientMoveReq::set_client_timestamp(float value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:world.ClientMoveReq.client_timestamp)
}

// -------------------------------------------------------------------

// ClientMoveRes

// .types.CharacterPose character_pos = 2;
inline bool ClientMoveRes::_internal_has_character_pos() const {
  return this != internal_default_instance() && _impl_.character_pos_ != nullptr;
}
inline bool ClientMoveRes::has_character_pos() const {
  return _internal_has_character_pos();
}
inline const ::types::CharacterPose& ClientMoveRes::_internal_character_pos() const {
  const ::types::CharacterPose* p = _impl_.character_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::CharacterPose&>(
      ::types::_CharacterPose_default_instance_);
}
inline const ::types::CharacterPose& ClientMoveRes::character_pos() const {
  // @@protoc_insertion_point(field_get:world.ClientMoveRes.character_pos)
  return _internal_character_pos();
}
inline void ClientMoveRes::unsafe_arena_set_allocated_character_pos(
    ::types::CharacterPose* character_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  _impl_.character_pos_ = character_pos;
  if (character_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientMoveRes.character_pos)
}
inline ::types::CharacterPose* ClientMoveRes::release_character_pos() {
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::CharacterPose* ClientMoveRes::unsafe_arena_release_character_pos() {
  // @@protoc_insertion_point(field_release:world.ClientMoveRes.character_pos)
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
  return temp;
}
inline ::types::CharacterPose* ClientMoveRes::_internal_mutable_character_pos() {
  
  if (_impl_.character_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::CharacterPose>(GetArenaForAllocation());
    _impl_.character_pos_ = p;
  }
  return _impl_.character_pos_;
}
inline ::types::CharacterPose* ClientMoveRes::mutable_character_pos() {
  ::types::CharacterPose* _msg = _internal_mutable_character_pos();
  // @@protoc_insertion_point(field_mutable:world.ClientMoveRes.character_pos)
  return _msg;
}
inline void ClientMoveRes::set_allocated_character_pos(::types::CharacterPose* character_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  if (character_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_pos));
    if (message_arena != submessage_arena) {
      character_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_pos_ = character_pos;
  // @@protoc_insertion_point(field_set_allocated:world.ClientMoveRes.character_pos)
}

// float client_timestamp = 3;
inline void ClientMoveRes::clear_client_timestamp() {
  _impl_.client_timestamp_ = 0;
}
inline float ClientMoveRes::_internal_client_timestamp() const {
  return _impl_.client_timestamp_;
}
inline float ClientMoveRes::client_timestamp() const {
  // @@protoc_insertion_point(field_get:world.ClientMoveRes.client_timestamp)
  return _internal_client_timestamp();
}
inline void ClientMoveRes::_internal_set_client_timestamp(float value) {
  
  _impl_.client_timestamp_ = value;
}
inline void ClientMoveRes::set_client_timestamp(float value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:world.ClientMoveRes.client_timestamp)
}

// .google.protobuf.Timestamp server_timestamp = 4;
inline bool ClientMoveRes::_internal_has_server_timestamp() const {
  return this != internal_default_instance() && _impl_.server_timestamp_ != nullptr;
}
inline bool ClientMoveRes::has_server_timestamp() const {
  return _internal_has_server_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ClientMoveRes::_internal_server_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.server_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ClientMoveRes::server_timestamp() const {
  // @@protoc_insertion_point(field_get:world.ClientMoveRes.server_timestamp)
  return _internal_server_timestamp();
}
inline void ClientMoveRes::unsafe_arena_set_allocated_server_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_timestamp_);
  }
  _impl_.server_timestamp_ = server_timestamp;
  if (server_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientMoveRes.server_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientMoveRes::release_server_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.server_timestamp_;
  _impl_.server_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientMoveRes::unsafe_arena_release_server_timestamp() {
  // @@protoc_insertion_point(field_release:world.ClientMoveRes.server_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.server_timestamp_;
  _impl_.server_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientMoveRes::_internal_mutable_server_timestamp() {
  
  if (_impl_.server_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.server_timestamp_ = p;
  }
  return _impl_.server_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientMoveRes::mutable_server_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_server_timestamp();
  // @@protoc_insertion_point(field_mutable:world.ClientMoveRes.server_timestamp)
  return _msg;
}
inline void ClientMoveRes::set_allocated_server_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_timestamp_);
  }
  if (server_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_timestamp));
    if (message_arena != submessage_arena) {
      server_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_timestamp_ = server_timestamp;
  // @@protoc_insertion_point(field_set_allocated:world.ClientMoveRes.server_timestamp)
}

// -------------------------------------------------------------------

// ClientActionReq

// .types.ClientAction client_action = 1;
inline bool ClientActionReq::_internal_has_client_action() const {
  return this != internal_default_instance() && _impl_.client_action_ != nullptr;
}
inline bool ClientActionReq::has_client_action() const {
  return _internal_has_client_action();
}
inline const ::types::ClientAction& ClientActionReq::_internal_client_action() const {
  const ::types::ClientAction* p = _impl_.client_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::ClientAction&>(
      ::types::_ClientAction_default_instance_);
}
inline const ::types::ClientAction& ClientActionReq::client_action() const {
  // @@protoc_insertion_point(field_get:world.ClientActionReq.client_action)
  return _internal_client_action();
}
inline void ClientActionReq::unsafe_arena_set_allocated_client_action(
    ::types::ClientAction* client_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  _impl_.client_action_ = client_action;
  if (client_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientActionReq.client_action)
}
inline ::types::ClientAction* ClientActionReq::release_client_action() {
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::ClientAction* ClientActionReq::unsafe_arena_release_client_action() {
  // @@protoc_insertion_point(field_release:world.ClientActionReq.client_action)
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
  return temp;
}
inline ::types::ClientAction* ClientActionReq::_internal_mutable_client_action() {
  
  if (_impl_.client_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ClientAction>(GetArenaForAllocation());
    _impl_.client_action_ = p;
  }
  return _impl_.client_action_;
}
inline ::types::ClientAction* ClientActionReq::mutable_client_action() {
  ::types::ClientAction* _msg = _internal_mutable_client_action();
  // @@protoc_insertion_point(field_mutable:world.ClientActionReq.client_action)
  return _msg;
}
inline void ClientActionReq::set_allocated_client_action(::types::ClientAction* client_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  if (client_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_action));
    if (message_arena != submessage_arena) {
      client_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_action, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_action_ = client_action;
  // @@protoc_insertion_point(field_set_allocated:world.ClientActionReq.client_action)
}

// float client_timestamp = 2;
inline void ClientActionReq::clear_client_timestamp() {
  _impl_.client_timestamp_ = 0;
}
inline float ClientActionReq::_internal_client_timestamp() const {
  return _impl_.client_timestamp_;
}
inline float ClientActionReq::client_timestamp() const {
  // @@protoc_insertion_point(field_get:world.ClientActionReq.client_timestamp)
  return _internal_client_timestamp();
}
inline void ClientActionReq::_internal_set_client_timestamp(float value) {
  
  _impl_.client_timestamp_ = value;
}
inline void ClientActionReq::set_client_timestamp(float value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:world.ClientActionReq.client_timestamp)
}

// -------------------------------------------------------------------

// ClientActionRes

// .types.Result result = 1;
inline void ClientActionRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result ClientActionRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result ClientActionRes::result() const {
  // @@protoc_insertion_point(field_get:world.ClientActionRes.result)
  return _internal_result();
}
inline void ClientActionRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void ClientActionRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.ClientActionRes.result)
}

// .types.ClientAction client_action = 2;
inline bool ClientActionRes::_internal_has_client_action() const {
  return this != internal_default_instance() && _impl_.client_action_ != nullptr;
}
inline bool ClientActionRes::has_client_action() const {
  return _internal_has_client_action();
}
inline const ::types::ClientAction& ClientActionRes::_internal_client_action() const {
  const ::types::ClientAction* p = _impl_.client_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::ClientAction&>(
      ::types::_ClientAction_default_instance_);
}
inline const ::types::ClientAction& ClientActionRes::client_action() const {
  // @@protoc_insertion_point(field_get:world.ClientActionRes.client_action)
  return _internal_client_action();
}
inline void ClientActionRes::unsafe_arena_set_allocated_client_action(
    ::types::ClientAction* client_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  _impl_.client_action_ = client_action;
  if (client_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientActionRes.client_action)
}
inline ::types::ClientAction* ClientActionRes::release_client_action() {
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::ClientAction* ClientActionRes::unsafe_arena_release_client_action() {
  // @@protoc_insertion_point(field_release:world.ClientActionRes.client_action)
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
  return temp;
}
inline ::types::ClientAction* ClientActionRes::_internal_mutable_client_action() {
  
  if (_impl_.client_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ClientAction>(GetArenaForAllocation());
    _impl_.client_action_ = p;
  }
  return _impl_.client_action_;
}
inline ::types::ClientAction* ClientActionRes::mutable_client_action() {
  ::types::ClientAction* _msg = _internal_mutable_client_action();
  // @@protoc_insertion_point(field_mutable:world.ClientActionRes.client_action)
  return _msg;
}
inline void ClientActionRes::set_allocated_client_action(::types::ClientAction* client_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  if (client_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_action));
    if (message_arena != submessage_arena) {
      client_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_action, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_action_ = client_action;
  // @@protoc_insertion_point(field_set_allocated:world.ClientActionRes.client_action)
}

// float client_timestamp = 3;
inline void ClientActionRes::clear_client_timestamp() {
  _impl_.client_timestamp_ = 0;
}
inline float ClientActionRes::_internal_client_timestamp() const {
  return _impl_.client_timestamp_;
}
inline float ClientActionRes::client_timestamp() const {
  // @@protoc_insertion_point(field_get:world.ClientActionRes.client_timestamp)
  return _internal_client_timestamp();
}
inline void ClientActionRes::_internal_set_client_timestamp(float value) {
  
  _impl_.client_timestamp_ = value;
}
inline void ClientActionRes::set_client_timestamp(float value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:world.ClientActionRes.client_timestamp)
}

// .google.protobuf.Timestamp server_timestamp = 4;
inline bool ClientActionRes::_internal_has_server_timestamp() const {
  return this != internal_default_instance() && _impl_.server_timestamp_ != nullptr;
}
inline bool ClientActionRes::has_server_timestamp() const {
  return _internal_has_server_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ClientActionRes::_internal_server_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.server_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ClientActionRes::server_timestamp() const {
  // @@protoc_insertion_point(field_get:world.ClientActionRes.server_timestamp)
  return _internal_server_timestamp();
}
inline void ClientActionRes::unsafe_arena_set_allocated_server_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_timestamp_);
  }
  _impl_.server_timestamp_ = server_timestamp;
  if (server_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.ClientActionRes.server_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientActionRes::release_server_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.server_timestamp_;
  _impl_.server_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientActionRes::unsafe_arena_release_server_timestamp() {
  // @@protoc_insertion_point(field_release:world.ClientActionRes.server_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.server_timestamp_;
  _impl_.server_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientActionRes::_internal_mutable_server_timestamp() {
  
  if (_impl_.server_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.server_timestamp_ = p;
  }
  return _impl_.server_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ClientActionRes::mutable_server_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_server_timestamp();
  // @@protoc_insertion_point(field_mutable:world.ClientActionRes.server_timestamp)
  return _msg;
}
inline void ClientActionRes::set_allocated_server_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* server_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.server_timestamp_);
  }
  if (server_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_timestamp));
    if (message_arena != submessage_arena) {
      server_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.server_timestamp_ = server_timestamp;
  // @@protoc_insertion_point(field_set_allocated:world.ClientActionRes.server_timestamp)
}

// int64 action_id = 5;
inline void ClientActionRes::clear_action_id() {
  _impl_.action_id_ = int64_t{0};
}
inline int64_t ClientActionRes::_internal_action_id() const {
  return _impl_.action_id_;
}
inline int64_t ClientActionRes::action_id() const {
  // @@protoc_insertion_point(field_get:world.ClientActionRes.action_id)
  return _internal_action_id();
}
inline void ClientActionRes::_internal_set_action_id(int64_t value) {
  
  _impl_.action_id_ = value;
}
inline void ClientActionRes::set_action_id(int64_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:world.ClientActionRes.action_id)
}

// -------------------------------------------------------------------

// OtherClientActionNotify

// int64 character_id = 1;
inline void OtherClientActionNotify::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t OtherClientActionNotify::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t OtherClientActionNotify::character_id() const {
  // @@protoc_insertion_point(field_get:world.OtherClientActionNotify.character_id)
  return _internal_character_id();
}
inline void OtherClientActionNotify::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void OtherClientActionNotify::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:world.OtherClientActionNotify.character_id)
}

// .types.ClientAction client_action = 2;
inline bool OtherClientActionNotify::_internal_has_client_action() const {
  return this != internal_default_instance() && _impl_.client_action_ != nullptr;
}
inline bool OtherClientActionNotify::has_client_action() const {
  return _internal_has_client_action();
}
inline const ::types::ClientAction& OtherClientActionNotify::_internal_client_action() const {
  const ::types::ClientAction* p = _impl_.client_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::ClientAction&>(
      ::types::_ClientAction_default_instance_);
}
inline const ::types::ClientAction& OtherClientActionNotify::client_action() const {
  // @@protoc_insertion_point(field_get:world.OtherClientActionNotify.client_action)
  return _internal_client_action();
}
inline void OtherClientActionNotify::unsafe_arena_set_allocated_client_action(
    ::types::ClientAction* client_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  _impl_.client_action_ = client_action;
  if (client_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.OtherClientActionNotify.client_action)
}
inline ::types::ClientAction* OtherClientActionNotify::release_client_action() {
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::ClientAction* OtherClientActionNotify::unsafe_arena_release_client_action() {
  // @@protoc_insertion_point(field_release:world.OtherClientActionNotify.client_action)
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
  return temp;
}
inline ::types::ClientAction* OtherClientActionNotify::_internal_mutable_client_action() {
  
  if (_impl_.client_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ClientAction>(GetArenaForAllocation());
    _impl_.client_action_ = p;
  }
  return _impl_.client_action_;
}
inline ::types::ClientAction* OtherClientActionNotify::mutable_client_action() {
  ::types::ClientAction* _msg = _internal_mutable_client_action();
  // @@protoc_insertion_point(field_mutable:world.OtherClientActionNotify.client_action)
  return _msg;
}
inline void OtherClientActionNotify::set_allocated_client_action(::types::ClientAction* client_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  if (client_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_action));
    if (message_arena != submessage_arena) {
      client_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_action, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_action_ = client_action;
  // @@protoc_insertion_point(field_set_allocated:world.OtherClientActionNotify.client_action)
}

// -------------------------------------------------------------------

// OtherClientEnterNotify

// .types.PcInfo pc_info = 1;
inline bool OtherClientEnterNotify::_internal_has_pc_info() const {
  return this != internal_default_instance() && _impl_.pc_info_ != nullptr;
}
inline bool OtherClientEnterNotify::has_pc_info() const {
  return _internal_has_pc_info();
}
inline const ::types::PcInfo& OtherClientEnterNotify::_internal_pc_info() const {
  const ::types::PcInfo* p = _impl_.pc_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::PcInfo&>(
      ::types::_PcInfo_default_instance_);
}
inline const ::types::PcInfo& OtherClientEnterNotify::pc_info() const {
  // @@protoc_insertion_point(field_get:world.OtherClientEnterNotify.pc_info)
  return _internal_pc_info();
}
inline void OtherClientEnterNotify::unsafe_arena_set_allocated_pc_info(
    ::types::PcInfo* pc_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pc_info_);
  }
  _impl_.pc_info_ = pc_info;
  if (pc_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.OtherClientEnterNotify.pc_info)
}
inline ::types::PcInfo* OtherClientEnterNotify::release_pc_info() {
  
  ::types::PcInfo* temp = _impl_.pc_info_;
  _impl_.pc_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::PcInfo* OtherClientEnterNotify::unsafe_arena_release_pc_info() {
  // @@protoc_insertion_point(field_release:world.OtherClientEnterNotify.pc_info)
  
  ::types::PcInfo* temp = _impl_.pc_info_;
  _impl_.pc_info_ = nullptr;
  return temp;
}
inline ::types::PcInfo* OtherClientEnterNotify::_internal_mutable_pc_info() {
  
  if (_impl_.pc_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::PcInfo>(GetArenaForAllocation());
    _impl_.pc_info_ = p;
  }
  return _impl_.pc_info_;
}
inline ::types::PcInfo* OtherClientEnterNotify::mutable_pc_info() {
  ::types::PcInfo* _msg = _internal_mutable_pc_info();
  // @@protoc_insertion_point(field_mutable:world.OtherClientEnterNotify.pc_info)
  return _msg;
}
inline void OtherClientEnterNotify::set_allocated_pc_info(::types::PcInfo* pc_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pc_info_);
  }
  if (pc_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pc_info));
    if (message_arena != submessage_arena) {
      pc_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pc_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pc_info_ = pc_info;
  // @@protoc_insertion_point(field_set_allocated:world.OtherClientEnterNotify.pc_info)
}

// -------------------------------------------------------------------

// OtherClientLeaveNotify

// int64 character_id = 1;
inline void OtherClientLeaveNotify::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t OtherClientLeaveNotify::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t OtherClientLeaveNotify::character_id() const {
  // @@protoc_insertion_point(field_get:world.OtherClientLeaveNotify.character_id)
  return _internal_character_id();
}
inline void OtherClientLeaveNotify::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void OtherClientLeaveNotify::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:world.OtherClientLeaveNotify.character_id)
}

// -------------------------------------------------------------------

// OtherClientMoveNotify

// int64 character_id = 1;
inline void OtherClientMoveNotify::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t OtherClientMoveNotify::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t OtherClientMoveNotify::character_id() const {
  // @@protoc_insertion_point(field_get:world.OtherClientMoveNotify.character_id)
  return _internal_character_id();
}
inline void OtherClientMoveNotify::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void OtherClientMoveNotify::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:world.OtherClientMoveNotify.character_id)
}

// .types.CharacterPose character_pos = 2;
inline bool OtherClientMoveNotify::_internal_has_character_pos() const {
  return this != internal_default_instance() && _impl_.character_pos_ != nullptr;
}
inline bool OtherClientMoveNotify::has_character_pos() const {
  return _internal_has_character_pos();
}
inline const ::types::CharacterPose& OtherClientMoveNotify::_internal_character_pos() const {
  const ::types::CharacterPose* p = _impl_.character_pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::CharacterPose&>(
      ::types::_CharacterPose_default_instance_);
}
inline const ::types::CharacterPose& OtherClientMoveNotify::character_pos() const {
  // @@protoc_insertion_point(field_get:world.OtherClientMoveNotify.character_pos)
  return _internal_character_pos();
}
inline void OtherClientMoveNotify::unsafe_arena_set_allocated_character_pos(
    ::types::CharacterPose* character_pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  _impl_.character_pos_ = character_pos;
  if (character_pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.OtherClientMoveNotify.character_pos)
}
inline ::types::CharacterPose* OtherClientMoveNotify::release_character_pos() {
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::CharacterPose* OtherClientMoveNotify::unsafe_arena_release_character_pos() {
  // @@protoc_insertion_point(field_release:world.OtherClientMoveNotify.character_pos)
  
  ::types::CharacterPose* temp = _impl_.character_pos_;
  _impl_.character_pos_ = nullptr;
  return temp;
}
inline ::types::CharacterPose* OtherClientMoveNotify::_internal_mutable_character_pos() {
  
  if (_impl_.character_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::CharacterPose>(GetArenaForAllocation());
    _impl_.character_pos_ = p;
  }
  return _impl_.character_pos_;
}
inline ::types::CharacterPose* OtherClientMoveNotify::mutable_character_pos() {
  ::types::CharacterPose* _msg = _internal_mutable_character_pos();
  // @@protoc_insertion_point(field_mutable:world.OtherClientMoveNotify.character_pos)
  return _msg;
}
inline void OtherClientMoveNotify::set_allocated_character_pos(::types::CharacterPose* character_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pos_);
  }
  if (character_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_pos));
    if (message_arena != submessage_arena) {
      character_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_pos, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_pos_ = character_pos;
  // @@protoc_insertion_point(field_set_allocated:world.OtherClientMoveNotify.character_pos)
}

// .types.ClientAction client_action = 3;
inline bool OtherClientMoveNotify::_internal_has_client_action() const {
  return this != internal_default_instance() && _impl_.client_action_ != nullptr;
}
inline bool OtherClientMoveNotify::has_client_action() const {
  return _internal_has_client_action();
}
inline const ::types::ClientAction& OtherClientMoveNotify::_internal_client_action() const {
  const ::types::ClientAction* p = _impl_.client_action_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::ClientAction&>(
      ::types::_ClientAction_default_instance_);
}
inline const ::types::ClientAction& OtherClientMoveNotify::client_action() const {
  // @@protoc_insertion_point(field_get:world.OtherClientMoveNotify.client_action)
  return _internal_client_action();
}
inline void OtherClientMoveNotify::unsafe_arena_set_allocated_client_action(
    ::types::ClientAction* client_action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  _impl_.client_action_ = client_action;
  if (client_action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.OtherClientMoveNotify.client_action)
}
inline ::types::ClientAction* OtherClientMoveNotify::release_client_action() {
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::ClientAction* OtherClientMoveNotify::unsafe_arena_release_client_action() {
  // @@protoc_insertion_point(field_release:world.OtherClientMoveNotify.client_action)
  
  ::types::ClientAction* temp = _impl_.client_action_;
  _impl_.client_action_ = nullptr;
  return temp;
}
inline ::types::ClientAction* OtherClientMoveNotify::_internal_mutable_client_action() {
  
  if (_impl_.client_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ClientAction>(GetArenaForAllocation());
    _impl_.client_action_ = p;
  }
  return _impl_.client_action_;
}
inline ::types::ClientAction* OtherClientMoveNotify::mutable_client_action() {
  ::types::ClientAction* _msg = _internal_mutable_client_action();
  // @@protoc_insertion_point(field_mutable:world.OtherClientMoveNotify.client_action)
  return _msg;
}
inline void OtherClientMoveNotify::set_allocated_client_action(::types::ClientAction* client_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_action_);
  }
  if (client_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_action));
    if (message_arena != submessage_arena) {
      client_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_action, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_action_ = client_action;
  // @@protoc_insertion_point(field_set_allocated:world.OtherClientMoveNotify.client_action)
}

// -------------------------------------------------------------------

// ChangeServerTickIntervalReq

// int32 server_tick_interval_ms = 2;
inline void ChangeServerTickIntervalReq::clear_server_tick_interval_ms() {
  _impl_.server_tick_interval_ms_ = 0;
}
inline int32_t ChangeServerTickIntervalReq::_internal_server_tick_interval_ms() const {
  return _impl_.server_tick_interval_ms_;
}
inline int32_t ChangeServerTickIntervalReq::server_tick_interval_ms() const {
  // @@protoc_insertion_point(field_get:world.ChangeServerTickIntervalReq.server_tick_interval_ms)
  return _internal_server_tick_interval_ms();
}
inline void ChangeServerTickIntervalReq::_internal_set_server_tick_interval_ms(int32_t value) {
  
  _impl_.server_tick_interval_ms_ = value;
}
inline void ChangeServerTickIntervalReq::set_server_tick_interval_ms(int32_t value) {
  _internal_set_server_tick_interval_ms(value);
  // @@protoc_insertion_point(field_set:world.ChangeServerTickIntervalReq.server_tick_interval_ms)
}

// -------------------------------------------------------------------

// ChangeServerTickIntervalRes

// int32 server_tick_interval_ms = 2;
inline void ChangeServerTickIntervalRes::clear_server_tick_interval_ms() {
  _impl_.server_tick_interval_ms_ = 0;
}
inline int32_t ChangeServerTickIntervalRes::_internal_server_tick_interval_ms() const {
  return _impl_.server_tick_interval_ms_;
}
inline int32_t ChangeServerTickIntervalRes::server_tick_interval_ms() const {
  // @@protoc_insertion_point(field_get:world.ChangeServerTickIntervalRes.server_tick_interval_ms)
  return _internal_server_tick_interval_ms();
}
inline void ChangeServerTickIntervalRes::_internal_set_server_tick_interval_ms(int32_t value) {
  
  _impl_.server_tick_interval_ms_ = value;
}
inline void ChangeServerTickIntervalRes::set_server_tick_interval_ms(int32_t value) {
  _internal_set_server_tick_interval_ms(value);
  // @@protoc_insertion_point(field_set:world.ChangeServerTickIntervalRes.server_tick_interval_ms)
}

// -------------------------------------------------------------------

// ServerTickIntervalChangedNotify

// int32 server_tick_interval_ms = 2;
inline void ServerTickIntervalChangedNotify::clear_server_tick_interval_ms() {
  _impl_.server_tick_interval_ms_ = 0;
}
inline int32_t ServerTickIntervalChangedNotify::_internal_server_tick_interval_ms() const {
  return _impl_.server_tick_interval_ms_;
}
inline int32_t ServerTickIntervalChangedNotify::server_tick_interval_ms() const {
  // @@protoc_insertion_point(field_get:world.ServerTickIntervalChangedNotify.server_tick_interval_ms)
  return _internal_server_tick_interval_ms();
}
inline void ServerTickIntervalChangedNotify::_internal_set_server_tick_interval_ms(int32_t value) {
  
  _impl_.server_tick_interval_ms_ = value;
}
inline void ServerTickIntervalChangedNotify::set_server_tick_interval_ms(int32_t value) {
  _internal_set_server_tick_interval_ms(value);
  // @@protoc_insertion_point(field_set:world.ServerTickIntervalChangedNotify.server_tick_interval_ms)
}

// -------------------------------------------------------------------

// SectionOwnershipChangedNotify

// int64 owner_character_id = 1;
inline void SectionOwnershipChangedNotify::clear_owner_character_id() {
  _impl_.owner_character_id_ = int64_t{0};
}
inline int64_t SectionOwnershipChangedNotify::_internal_owner_character_id() const {
  return _impl_.owner_character_id_;
}
inline int64_t SectionOwnershipChangedNotify::owner_character_id() const {
  // @@protoc_insertion_point(field_get:world.SectionOwnershipChangedNotify.owner_character_id)
  return _internal_owner_character_id();
}
inline void SectionOwnershipChangedNotify::_internal_set_owner_character_id(int64_t value) {
  
  _impl_.owner_character_id_ = value;
}
inline void SectionOwnershipChangedNotify::set_owner_character_id(int64_t value) {
  _internal_set_owner_character_id(value);
  // @@protoc_insertion_point(field_set:world.SectionOwnershipChangedNotify.owner_character_id)
}

// -------------------------------------------------------------------

// SpawnNpcOnSectionReq

// int32 spawner_id = 1;
inline void SpawnNpcOnSectionReq::clear_spawner_id() {
  _impl_.spawner_id_ = 0;
}
inline int32_t SpawnNpcOnSectionReq::_internal_spawner_id() const {
  return _impl_.spawner_id_;
}
inline int32_t SpawnNpcOnSectionReq::spawner_id() const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionReq.spawner_id)
  return _internal_spawner_id();
}
inline void SpawnNpcOnSectionReq::_internal_set_spawner_id(int32_t value) {
  
  _impl_.spawner_id_ = value;
}
inline void SpawnNpcOnSectionReq::set_spawner_id(int32_t value) {
  _internal_set_spawner_id(value);
  // @@protoc_insertion_point(field_set:world.SpawnNpcOnSectionReq.spawner_id)
}

// repeated .types.NpcSpawnInfo npc_spawn_infos = 2;
inline int SpawnNpcOnSectionReq::_internal_npc_spawn_infos_size() const {
  return _impl_.npc_spawn_infos_.size();
}
inline int SpawnNpcOnSectionReq::npc_spawn_infos_size() const {
  return _internal_npc_spawn_infos_size();
}
inline ::types::NpcSpawnInfo* SpawnNpcOnSectionReq::mutable_npc_spawn_infos(int index) {
  // @@protoc_insertion_point(field_mutable:world.SpawnNpcOnSectionReq.npc_spawn_infos)
  return _impl_.npc_spawn_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcSpawnInfo >*
SpawnNpcOnSectionReq::mutable_npc_spawn_infos() {
  // @@protoc_insertion_point(field_mutable_list:world.SpawnNpcOnSectionReq.npc_spawn_infos)
  return &_impl_.npc_spawn_infos_;
}
inline const ::types::NpcSpawnInfo& SpawnNpcOnSectionReq::_internal_npc_spawn_infos(int index) const {
  return _impl_.npc_spawn_infos_.Get(index);
}
inline const ::types::NpcSpawnInfo& SpawnNpcOnSectionReq::npc_spawn_infos(int index) const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionReq.npc_spawn_infos)
  return _internal_npc_spawn_infos(index);
}
inline ::types::NpcSpawnInfo* SpawnNpcOnSectionReq::_internal_add_npc_spawn_infos() {
  return _impl_.npc_spawn_infos_.Add();
}
inline ::types::NpcSpawnInfo* SpawnNpcOnSectionReq::add_npc_spawn_infos() {
  ::types::NpcSpawnInfo* _add = _internal_add_npc_spawn_infos();
  // @@protoc_insertion_point(field_add:world.SpawnNpcOnSectionReq.npc_spawn_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcSpawnInfo >&
SpawnNpcOnSectionReq::npc_spawn_infos() const {
  // @@protoc_insertion_point(field_list:world.SpawnNpcOnSectionReq.npc_spawn_infos)
  return _impl_.npc_spawn_infos_;
}

// float client_timestamp = 4;
inline void SpawnNpcOnSectionReq::clear_client_timestamp() {
  _impl_.client_timestamp_ = 0;
}
inline float SpawnNpcOnSectionReq::_internal_client_timestamp() const {
  return _impl_.client_timestamp_;
}
inline float SpawnNpcOnSectionReq::client_timestamp() const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionReq.client_timestamp)
  return _internal_client_timestamp();
}
inline void SpawnNpcOnSectionReq::_internal_set_client_timestamp(float value) {
  
  _impl_.client_timestamp_ = value;
}
inline void SpawnNpcOnSectionReq::set_client_timestamp(float value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:world.SpawnNpcOnSectionReq.client_timestamp)
}

// -------------------------------------------------------------------

// SpawnNpcOnSectionRes

// .types.Result result = 1;
inline void SpawnNpcOnSectionRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result SpawnNpcOnSectionRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result SpawnNpcOnSectionRes::result() const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionRes.result)
  return _internal_result();
}
inline void SpawnNpcOnSectionRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void SpawnNpcOnSectionRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.SpawnNpcOnSectionRes.result)
}

// int32 spawner_id = 2;
inline void SpawnNpcOnSectionRes::clear_spawner_id() {
  _impl_.spawner_id_ = 0;
}
inline int32_t SpawnNpcOnSectionRes::_internal_spawner_id() const {
  return _impl_.spawner_id_;
}
inline int32_t SpawnNpcOnSectionRes::spawner_id() const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionRes.spawner_id)
  return _internal_spawner_id();
}
inline void SpawnNpcOnSectionRes::_internal_set_spawner_id(int32_t value) {
  
  _impl_.spawner_id_ = value;
}
inline void SpawnNpcOnSectionRes::set_spawner_id(int32_t value) {
  _internal_set_spawner_id(value);
  // @@protoc_insertion_point(field_set:world.SpawnNpcOnSectionRes.spawner_id)
}

// float next_client_timestamp = 3;
inline void SpawnNpcOnSectionRes::clear_next_client_timestamp() {
  _impl_.next_client_timestamp_ = 0;
}
inline float SpawnNpcOnSectionRes::_internal_next_client_timestamp() const {
  return _impl_.next_client_timestamp_;
}
inline float SpawnNpcOnSectionRes::next_client_timestamp() const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionRes.next_client_timestamp)
  return _internal_next_client_timestamp();
}
inline void SpawnNpcOnSectionRes::_internal_set_next_client_timestamp(float value) {
  
  _impl_.next_client_timestamp_ = value;
}
inline void SpawnNpcOnSectionRes::set_next_client_timestamp(float value) {
  _internal_set_next_client_timestamp(value);
  // @@protoc_insertion_point(field_set:world.SpawnNpcOnSectionRes.next_client_timestamp)
}

// -------------------------------------------------------------------

// SpawnNpcOnSectionNotify

// int32 spawner_id = 1;
inline void SpawnNpcOnSectionNotify::clear_spawner_id() {
  _impl_.spawner_id_ = 0;
}
inline int32_t SpawnNpcOnSectionNotify::_internal_spawner_id() const {
  return _impl_.spawner_id_;
}
inline int32_t SpawnNpcOnSectionNotify::spawner_id() const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionNotify.spawner_id)
  return _internal_spawner_id();
}
inline void SpawnNpcOnSectionNotify::_internal_set_spawner_id(int32_t value) {
  
  _impl_.spawner_id_ = value;
}
inline void SpawnNpcOnSectionNotify::set_spawner_id(int32_t value) {
  _internal_set_spawner_id(value);
  // @@protoc_insertion_point(field_set:world.SpawnNpcOnSectionNotify.spawner_id)
}

// repeated .types.NpcInfo npc_infos = 2;
inline int SpawnNpcOnSectionNotify::_internal_npc_infos_size() const {
  return _impl_.npc_infos_.size();
}
inline int SpawnNpcOnSectionNotify::npc_infos_size() const {
  return _internal_npc_infos_size();
}
inline ::types::NpcInfo* SpawnNpcOnSectionNotify::mutable_npc_infos(int index) {
  // @@protoc_insertion_point(field_mutable:world.SpawnNpcOnSectionNotify.npc_infos)
  return _impl_.npc_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >*
SpawnNpcOnSectionNotify::mutable_npc_infos() {
  // @@protoc_insertion_point(field_mutable_list:world.SpawnNpcOnSectionNotify.npc_infos)
  return &_impl_.npc_infos_;
}
inline const ::types::NpcInfo& SpawnNpcOnSectionNotify::_internal_npc_infos(int index) const {
  return _impl_.npc_infos_.Get(index);
}
inline const ::types::NpcInfo& SpawnNpcOnSectionNotify::npc_infos(int index) const {
  // @@protoc_insertion_point(field_get:world.SpawnNpcOnSectionNotify.npc_infos)
  return _internal_npc_infos(index);
}
inline ::types::NpcInfo* SpawnNpcOnSectionNotify::_internal_add_npc_infos() {
  return _impl_.npc_infos_.Add();
}
inline ::types::NpcInfo* SpawnNpcOnSectionNotify::add_npc_infos() {
  ::types::NpcInfo* _add = _internal_add_npc_infos();
  // @@protoc_insertion_point(field_add:world.SpawnNpcOnSectionNotify.npc_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >&
SpawnNpcOnSectionNotify::npc_infos() const {
  // @@protoc_insertion_point(field_list:world.SpawnNpcOnSectionNotify.npc_infos)
  return _impl_.npc_infos_;
}

// -------------------------------------------------------------------

// SpawnProjectileOnSectionReq

// int64 action_id = 1;
inline void SpawnProjectileOnSectionReq::clear_action_id() {
  _impl_.action_id_ = int64_t{0};
}
inline int64_t SpawnProjectileOnSectionReq::_internal_action_id() const {
  return _impl_.action_id_;
}
inline int64_t SpawnProjectileOnSectionReq::action_id() const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionReq.action_id)
  return _internal_action_id();
}
inline void SpawnProjectileOnSectionReq::_internal_set_action_id(int64_t value) {
  
  _impl_.action_id_ = value;
}
inline void SpawnProjectileOnSectionReq::set_action_id(int64_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:world.SpawnProjectileOnSectionReq.action_id)
}

// .types.Pose pose = 2;
inline bool SpawnProjectileOnSectionReq::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool SpawnProjectileOnSectionReq::has_pose() const {
  return _internal_has_pose();
}
inline const ::types::Pose& SpawnProjectileOnSectionReq::_internal_pose() const {
  const ::types::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Pose&>(
      ::types::_Pose_default_instance_);
}
inline const ::types::Pose& SpawnProjectileOnSectionReq::pose() const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionReq.pose)
  return _internal_pose();
}
inline void SpawnProjectileOnSectionReq::unsafe_arena_set_allocated_pose(
    ::types::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.SpawnProjectileOnSectionReq.pose)
}
inline ::types::Pose* SpawnProjectileOnSectionReq::release_pose() {
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Pose* SpawnProjectileOnSectionReq::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:world.SpawnProjectileOnSectionReq.pose)
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::types::Pose* SpawnProjectileOnSectionReq::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::types::Pose* SpawnProjectileOnSectionReq::mutable_pose() {
  ::types::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:world.SpawnProjectileOnSectionReq.pose)
  return _msg;
}
inline void SpawnProjectileOnSectionReq::set_allocated_pose(::types::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:world.SpawnProjectileOnSectionReq.pose)
}

// float projectile_speed = 3;
inline void SpawnProjectileOnSectionReq::clear_projectile_speed() {
  _impl_.projectile_speed_ = 0;
}
inline float SpawnProjectileOnSectionReq::_internal_projectile_speed() const {
  return _impl_.projectile_speed_;
}
inline float SpawnProjectileOnSectionReq::projectile_speed() const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionReq.projectile_speed)
  return _internal_projectile_speed();
}
inline void SpawnProjectileOnSectionReq::_internal_set_projectile_speed(float value) {
  
  _impl_.projectile_speed_ = value;
}
inline void SpawnProjectileOnSectionReq::set_projectile_speed(float value) {
  _internal_set_projectile_speed(value);
  // @@protoc_insertion_point(field_set:world.SpawnProjectileOnSectionReq.projectile_speed)
}

// .types.Pose character_pose = 4;
inline bool SpawnProjectileOnSectionReq::_internal_has_character_pose() const {
  return this != internal_default_instance() && _impl_.character_pose_ != nullptr;
}
inline bool SpawnProjectileOnSectionReq::has_character_pose() const {
  return _internal_has_character_pose();
}
inline const ::types::Pose& SpawnProjectileOnSectionReq::_internal_character_pose() const {
  const ::types::Pose* p = _impl_.character_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Pose&>(
      ::types::_Pose_default_instance_);
}
inline const ::types::Pose& SpawnProjectileOnSectionReq::character_pose() const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionReq.character_pose)
  return _internal_character_pose();
}
inline void SpawnProjectileOnSectionReq::unsafe_arena_set_allocated_character_pose(
    ::types::Pose* character_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pose_);
  }
  _impl_.character_pose_ = character_pose;
  if (character_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.SpawnProjectileOnSectionReq.character_pose)
}
inline ::types::Pose* SpawnProjectileOnSectionReq::release_character_pose() {
  
  ::types::Pose* temp = _impl_.character_pose_;
  _impl_.character_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Pose* SpawnProjectileOnSectionReq::unsafe_arena_release_character_pose() {
  // @@protoc_insertion_point(field_release:world.SpawnProjectileOnSectionReq.character_pose)
  
  ::types::Pose* temp = _impl_.character_pose_;
  _impl_.character_pose_ = nullptr;
  return temp;
}
inline ::types::Pose* SpawnProjectileOnSectionReq::_internal_mutable_character_pose() {
  
  if (_impl_.character_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Pose>(GetArenaForAllocation());
    _impl_.character_pose_ = p;
  }
  return _impl_.character_pose_;
}
inline ::types::Pose* SpawnProjectileOnSectionReq::mutable_character_pose() {
  ::types::Pose* _msg = _internal_mutable_character_pose();
  // @@protoc_insertion_point(field_mutable:world.SpawnProjectileOnSectionReq.character_pose)
  return _msg;
}
inline void SpawnProjectileOnSectionReq::set_allocated_character_pose(::types::Pose* character_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pose_);
  }
  if (character_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_pose));
    if (message_arena != submessage_arena) {
      character_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_pose_ = character_pose;
  // @@protoc_insertion_point(field_set_allocated:world.SpawnProjectileOnSectionReq.character_pose)
}

// -------------------------------------------------------------------

// SpawnProjectileOnSectionRes

// .types.Result result = 1;
inline void SpawnProjectileOnSectionRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result SpawnProjectileOnSectionRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result SpawnProjectileOnSectionRes::result() const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionRes.result)
  return _internal_result();
}
inline void SpawnProjectileOnSectionRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void SpawnProjectileOnSectionRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.SpawnProjectileOnSectionRes.result)
}

// repeated .types.Vector3 debug_trajectory = 2;
inline int SpawnProjectileOnSectionRes::_internal_debug_trajectory_size() const {
  return _impl_.debug_trajectory_.size();
}
inline int SpawnProjectileOnSectionRes::debug_trajectory_size() const {
  return _internal_debug_trajectory_size();
}
inline ::types::Vector3* SpawnProjectileOnSectionRes::mutable_debug_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:world.SpawnProjectileOnSectionRes.debug_trajectory)
  return _impl_.debug_trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Vector3 >*
SpawnProjectileOnSectionRes::mutable_debug_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:world.SpawnProjectileOnSectionRes.debug_trajectory)
  return &_impl_.debug_trajectory_;
}
inline const ::types::Vector3& SpawnProjectileOnSectionRes::_internal_debug_trajectory(int index) const {
  return _impl_.debug_trajectory_.Get(index);
}
inline const ::types::Vector3& SpawnProjectileOnSectionRes::debug_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionRes.debug_trajectory)
  return _internal_debug_trajectory(index);
}
inline ::types::Vector3* SpawnProjectileOnSectionRes::_internal_add_debug_trajectory() {
  return _impl_.debug_trajectory_.Add();
}
inline ::types::Vector3* SpawnProjectileOnSectionRes::add_debug_trajectory() {
  ::types::Vector3* _add = _internal_add_debug_trajectory();
  // @@protoc_insertion_point(field_add:world.SpawnProjectileOnSectionRes.debug_trajectory)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::Vector3 >&
SpawnProjectileOnSectionRes::debug_trajectory() const {
  // @@protoc_insertion_point(field_list:world.SpawnProjectileOnSectionRes.debug_trajectory)
  return _impl_.debug_trajectory_;
}

// int64 object_id = 3;
inline void SpawnProjectileOnSectionRes::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t SpawnProjectileOnSectionRes::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t SpawnProjectileOnSectionRes::object_id() const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionRes.object_id)
  return _internal_object_id();
}
inline void SpawnProjectileOnSectionRes::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void SpawnProjectileOnSectionRes::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:world.SpawnProjectileOnSectionRes.object_id)
}

// -------------------------------------------------------------------

// SpawnProjectileOnSectionNotify

// .types.ProjectileInfo projectile_info = 1;
inline bool SpawnProjectileOnSectionNotify::_internal_has_projectile_info() const {
  return this != internal_default_instance() && _impl_.projectile_info_ != nullptr;
}
inline bool SpawnProjectileOnSectionNotify::has_projectile_info() const {
  return _internal_has_projectile_info();
}
inline const ::types::ProjectileInfo& SpawnProjectileOnSectionNotify::_internal_projectile_info() const {
  const ::types::ProjectileInfo* p = _impl_.projectile_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::ProjectileInfo&>(
      ::types::_ProjectileInfo_default_instance_);
}
inline const ::types::ProjectileInfo& SpawnProjectileOnSectionNotify::projectile_info() const {
  // @@protoc_insertion_point(field_get:world.SpawnProjectileOnSectionNotify.projectile_info)
  return _internal_projectile_info();
}
inline void SpawnProjectileOnSectionNotify::unsafe_arena_set_allocated_projectile_info(
    ::types::ProjectileInfo* projectile_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectile_info_);
  }
  _impl_.projectile_info_ = projectile_info;
  if (projectile_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.SpawnProjectileOnSectionNotify.projectile_info)
}
inline ::types::ProjectileInfo* SpawnProjectileOnSectionNotify::release_projectile_info() {
  
  ::types::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::ProjectileInfo* SpawnProjectileOnSectionNotify::unsafe_arena_release_projectile_info() {
  // @@protoc_insertion_point(field_release:world.SpawnProjectileOnSectionNotify.projectile_info)
  
  ::types::ProjectileInfo* temp = _impl_.projectile_info_;
  _impl_.projectile_info_ = nullptr;
  return temp;
}
inline ::types::ProjectileInfo* SpawnProjectileOnSectionNotify::_internal_mutable_projectile_info() {
  
  if (_impl_.projectile_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::ProjectileInfo>(GetArenaForAllocation());
    _impl_.projectile_info_ = p;
  }
  return _impl_.projectile_info_;
}
inline ::types::ProjectileInfo* SpawnProjectileOnSectionNotify::mutable_projectile_info() {
  ::types::ProjectileInfo* _msg = _internal_mutable_projectile_info();
  // @@protoc_insertion_point(field_mutable:world.SpawnProjectileOnSectionNotify.projectile_info)
  return _msg;
}
inline void SpawnProjectileOnSectionNotify::set_allocated_projectile_info(::types::ProjectileInfo* projectile_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectile_info_);
  }
  if (projectile_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectile_info));
    if (message_arena != submessage_arena) {
      projectile_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectile_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectile_info_ = projectile_info;
  // @@protoc_insertion_point(field_set_allocated:world.SpawnProjectileOnSectionNotify.projectile_info)
}

// -------------------------------------------------------------------

// HitObjectByProjectileReq

// int64 hit_object_id = 1;
inline void HitObjectByProjectileReq::clear_hit_object_id() {
  _impl_.hit_object_id_ = int64_t{0};
}
inline int64_t HitObjectByProjectileReq::_internal_hit_object_id() const {
  return _impl_.hit_object_id_;
}
inline int64_t HitObjectByProjectileReq::hit_object_id() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileReq.hit_object_id)
  return _internal_hit_object_id();
}
inline void HitObjectByProjectileReq::_internal_set_hit_object_id(int64_t value) {
  
  _impl_.hit_object_id_ = value;
}
inline void HitObjectByProjectileReq::set_hit_object_id(int64_t value) {
  _internal_set_hit_object_id(value);
  // @@protoc_insertion_point(field_set:world.HitObjectByProjectileReq.hit_object_id)
}

// .types.Vector3 on_hit_location = 2;
inline bool HitObjectByProjectileReq::_internal_has_on_hit_location() const {
  return this != internal_default_instance() && _impl_.on_hit_location_ != nullptr;
}
inline bool HitObjectByProjectileReq::has_on_hit_location() const {
  return _internal_has_on_hit_location();
}
inline const ::types::Vector3& HitObjectByProjectileReq::_internal_on_hit_location() const {
  const ::types::Vector3* p = _impl_.on_hit_location_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& HitObjectByProjectileReq::on_hit_location() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileReq.on_hit_location)
  return _internal_on_hit_location();
}
inline void HitObjectByProjectileReq::unsafe_arena_set_allocated_on_hit_location(
    ::types::Vector3* on_hit_location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.on_hit_location_);
  }
  _impl_.on_hit_location_ = on_hit_location;
  if (on_hit_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.HitObjectByProjectileReq.on_hit_location)
}
inline ::types::Vector3* HitObjectByProjectileReq::release_on_hit_location() {
  
  ::types::Vector3* temp = _impl_.on_hit_location_;
  _impl_.on_hit_location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* HitObjectByProjectileReq::unsafe_arena_release_on_hit_location() {
  // @@protoc_insertion_point(field_release:world.HitObjectByProjectileReq.on_hit_location)
  
  ::types::Vector3* temp = _impl_.on_hit_location_;
  _impl_.on_hit_location_ = nullptr;
  return temp;
}
inline ::types::Vector3* HitObjectByProjectileReq::_internal_mutable_on_hit_location() {
  
  if (_impl_.on_hit_location_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.on_hit_location_ = p;
  }
  return _impl_.on_hit_location_;
}
inline ::types::Vector3* HitObjectByProjectileReq::mutable_on_hit_location() {
  ::types::Vector3* _msg = _internal_mutable_on_hit_location();
  // @@protoc_insertion_point(field_mutable:world.HitObjectByProjectileReq.on_hit_location)
  return _msg;
}
inline void HitObjectByProjectileReq::set_allocated_on_hit_location(::types::Vector3* on_hit_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.on_hit_location_);
  }
  if (on_hit_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(on_hit_location));
    if (message_arena != submessage_arena) {
      on_hit_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, on_hit_location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.on_hit_location_ = on_hit_location;
  // @@protoc_insertion_point(field_set_allocated:world.HitObjectByProjectileReq.on_hit_location)
}

// int64 projectile_object_id = 3;
inline void HitObjectByProjectileReq::clear_projectile_object_id() {
  _impl_.projectile_object_id_ = int64_t{0};
}
inline int64_t HitObjectByProjectileReq::_internal_projectile_object_id() const {
  return _impl_.projectile_object_id_;
}
inline int64_t HitObjectByProjectileReq::projectile_object_id() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileReq.projectile_object_id)
  return _internal_projectile_object_id();
}
inline void HitObjectByProjectileReq::_internal_set_projectile_object_id(int64_t value) {
  
  _impl_.projectile_object_id_ = value;
}
inline void HitObjectByProjectileReq::set_projectile_object_id(int64_t value) {
  _internal_set_projectile_object_id(value);
  // @@protoc_insertion_point(field_set:world.HitObjectByProjectileReq.projectile_object_id)
}

// -------------------------------------------------------------------

// HitObjectByProjectileRes

// .types.Result result = 1;
inline void HitObjectByProjectileRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result HitObjectByProjectileRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result HitObjectByProjectileRes::result() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileRes.result)
  return _internal_result();
}
inline void HitObjectByProjectileRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void HitObjectByProjectileRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.HitObjectByProjectileRes.result)
}

// -------------------------------------------------------------------

// HitObjectByProjectileNotify

// int64 projectile_object_id = 1;
inline void HitObjectByProjectileNotify::clear_projectile_object_id() {
  _impl_.projectile_object_id_ = int64_t{0};
}
inline int64_t HitObjectByProjectileNotify::_internal_projectile_object_id() const {
  return _impl_.projectile_object_id_;
}
inline int64_t HitObjectByProjectileNotify::projectile_object_id() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileNotify.projectile_object_id)
  return _internal_projectile_object_id();
}
inline void HitObjectByProjectileNotify::_internal_set_projectile_object_id(int64_t value) {
  
  _impl_.projectile_object_id_ = value;
}
inline void HitObjectByProjectileNotify::set_projectile_object_id(int64_t value) {
  _internal_set_projectile_object_id(value);
  // @@protoc_insertion_point(field_set:world.HitObjectByProjectileNotify.projectile_object_id)
}

// int64 object_id = 2;
inline void HitObjectByProjectileNotify::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t HitObjectByProjectileNotify::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t HitObjectByProjectileNotify::object_id() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileNotify.object_id)
  return _internal_object_id();
}
inline void HitObjectByProjectileNotify::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void HitObjectByProjectileNotify::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:world.HitObjectByProjectileNotify.object_id)
}

// int64 current_hp = 3;
inline void HitObjectByProjectileNotify::clear_current_hp() {
  _impl_.current_hp_ = int64_t{0};
}
inline int64_t HitObjectByProjectileNotify::_internal_current_hp() const {
  return _impl_.current_hp_;
}
inline int64_t HitObjectByProjectileNotify::current_hp() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileNotify.current_hp)
  return _internal_current_hp();
}
inline void HitObjectByProjectileNotify::_internal_set_current_hp(int64_t value) {
  
  _impl_.current_hp_ = value;
}
inline void HitObjectByProjectileNotify::set_current_hp(int64_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:world.HitObjectByProjectileNotify.current_hp)
}

// bool is_alive = 4;
inline void HitObjectByProjectileNotify::clear_is_alive() {
  _impl_.is_alive_ = false;
}
inline bool HitObjectByProjectileNotify::_internal_is_alive() const {
  return _impl_.is_alive_;
}
inline bool HitObjectByProjectileNotify::is_alive() const {
  // @@protoc_insertion_point(field_get:world.HitObjectByProjectileNotify.is_alive)
  return _internal_is_alive();
}
inline void HitObjectByProjectileNotify::_internal_set_is_alive(bool value) {
  
  _impl_.is_alive_ = value;
}
inline void HitObjectByProjectileNotify::set_is_alive(bool value) {
  _internal_set_is_alive(value);
  // @@protoc_insertion_point(field_set:world.HitObjectByProjectileNotify.is_alive)
}

// -------------------------------------------------------------------

// DespawnNpcOnSectionNotify

// int64 object_id = 1;
inline void DespawnNpcOnSectionNotify::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t DespawnNpcOnSectionNotify::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t DespawnNpcOnSectionNotify::object_id() const {
  // @@protoc_insertion_point(field_get:world.DespawnNpcOnSectionNotify.object_id)
  return _internal_object_id();
}
inline void DespawnNpcOnSectionNotify::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void DespawnNpcOnSectionNotify::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:world.DespawnNpcOnSectionNotify.object_id)
}

// -------------------------------------------------------------------

// DespawnProjectileOnSectionNotify

// int64 object_id = 1;
inline void DespawnProjectileOnSectionNotify::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t DespawnProjectileOnSectionNotify::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t DespawnProjectileOnSectionNotify::object_id() const {
  // @@protoc_insertion_point(field_get:world.DespawnProjectileOnSectionNotify.object_id)
  return _internal_object_id();
}
inline void DespawnProjectileOnSectionNotify::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void DespawnProjectileOnSectionNotify::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:world.DespawnProjectileOnSectionNotify.object_id)
}

// -------------------------------------------------------------------

// DebugSimulationPositionNotify

// .types.Vector3 position = 1;
inline bool DebugSimulationPositionNotify::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool DebugSimulationPositionNotify::has_position() const {
  return _internal_has_position();
}
inline const ::types::Vector3& DebugSimulationPositionNotify::_internal_position() const {
  const ::types::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& DebugSimulationPositionNotify::position() const {
  // @@protoc_insertion_point(field_get:world.DebugSimulationPositionNotify.position)
  return _internal_position();
}
inline void DebugSimulationPositionNotify::unsafe_arena_set_allocated_position(
    ::types::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.DebugSimulationPositionNotify.position)
}
inline ::types::Vector3* DebugSimulationPositionNotify::release_position() {
  
  ::types::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* DebugSimulationPositionNotify::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:world.DebugSimulationPositionNotify.position)
  
  ::types::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::types::Vector3* DebugSimulationPositionNotify::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::types::Vector3* DebugSimulationPositionNotify::mutable_position() {
  ::types::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:world.DebugSimulationPositionNotify.position)
  return _msg;
}
inline void DebugSimulationPositionNotify::set_allocated_position(::types::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:world.DebugSimulationPositionNotify.position)
}

// .types.Color color = 2;
inline void DebugSimulationPositionNotify::clear_color() {
  _impl_.color_ = 0;
}
inline ::types::Color DebugSimulationPositionNotify::_internal_color() const {
  return static_cast< ::types::Color >(_impl_.color_);
}
inline ::types::Color DebugSimulationPositionNotify::color() const {
  // @@protoc_insertion_point(field_get:world.DebugSimulationPositionNotify.color)
  return _internal_color();
}
inline void DebugSimulationPositionNotify::_internal_set_color(::types::Color value) {
  
  _impl_.color_ = value;
}
inline void DebugSimulationPositionNotify::set_color(::types::Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:world.DebugSimulationPositionNotify.color)
}

// .types.DebugShape shape = 3;
inline void DebugSimulationPositionNotify::clear_shape() {
  _impl_.shape_ = 0;
}
inline ::types::DebugShape DebugSimulationPositionNotify::_internal_shape() const {
  return static_cast< ::types::DebugShape >(_impl_.shape_);
}
inline ::types::DebugShape DebugSimulationPositionNotify::shape() const {
  // @@protoc_insertion_point(field_get:world.DebugSimulationPositionNotify.shape)
  return _internal_shape();
}
inline void DebugSimulationPositionNotify::_internal_set_shape(::types::DebugShape value) {
  
  _impl_.shape_ = value;
}
inline void DebugSimulationPositionNotify::set_shape(::types::DebugShape value) {
  _internal_set_shape(value);
  // @@protoc_insertion_point(field_set:world.DebugSimulationPositionNotify.shape)
}

// .types.DebugShapeInfo shape_info = 4;
inline bool DebugSimulationPositionNotify::_internal_has_shape_info() const {
  return this != internal_default_instance() && _impl_.shape_info_ != nullptr;
}
inline bool DebugSimulationPositionNotify::has_shape_info() const {
  return _internal_has_shape_info();
}
inline const ::types::DebugShapeInfo& DebugSimulationPositionNotify::_internal_shape_info() const {
  const ::types::DebugShapeInfo* p = _impl_.shape_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::DebugShapeInfo&>(
      ::types::_DebugShapeInfo_default_instance_);
}
inline const ::types::DebugShapeInfo& DebugSimulationPositionNotify::shape_info() const {
  // @@protoc_insertion_point(field_get:world.DebugSimulationPositionNotify.shape_info)
  return _internal_shape_info();
}
inline void DebugSimulationPositionNotify::unsafe_arena_set_allocated_shape_info(
    ::types::DebugShapeInfo* shape_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_info_);
  }
  _impl_.shape_info_ = shape_info;
  if (shape_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:world.DebugSimulationPositionNotify.shape_info)
}
inline ::types::DebugShapeInfo* DebugSimulationPositionNotify::release_shape_info() {
  
  ::types::DebugShapeInfo* temp = _impl_.shape_info_;
  _impl_.shape_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::DebugShapeInfo* DebugSimulationPositionNotify::unsafe_arena_release_shape_info() {
  // @@protoc_insertion_point(field_release:world.DebugSimulationPositionNotify.shape_info)
  
  ::types::DebugShapeInfo* temp = _impl_.shape_info_;
  _impl_.shape_info_ = nullptr;
  return temp;
}
inline ::types::DebugShapeInfo* DebugSimulationPositionNotify::_internal_mutable_shape_info() {
  
  if (_impl_.shape_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::DebugShapeInfo>(GetArenaForAllocation());
    _impl_.shape_info_ = p;
  }
  return _impl_.shape_info_;
}
inline ::types::DebugShapeInfo* DebugSimulationPositionNotify::mutable_shape_info() {
  ::types::DebugShapeInfo* _msg = _internal_mutable_shape_info();
  // @@protoc_insertion_point(field_mutable:world.DebugSimulationPositionNotify.shape_info)
  return _msg;
}
inline void DebugSimulationPositionNotify::set_allocated_shape_info(::types::DebugShapeInfo* shape_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shape_info_);
  }
  if (shape_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_info));
    if (message_arena != submessage_arena) {
      shape_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.shape_info_ = shape_info;
  // @@protoc_insertion_point(field_set_allocated:world.DebugSimulationPositionNotify.shape_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace world

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_2eproto
