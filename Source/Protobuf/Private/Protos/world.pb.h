// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_world_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_world_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_world_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_world_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_world_2eproto;
namespace world {
class RegisterServerReq;
struct RegisterServerReqDefaultTypeInternal;
extern RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
class RegisterServerRes;
struct RegisterServerResDefaultTypeInternal;
extern RegisterServerResDefaultTypeInternal _RegisterServerRes_default_instance_;
class ServerPingReq;
struct ServerPingReqDefaultTypeInternal;
extern ServerPingReqDefaultTypeInternal _ServerPingReq_default_instance_;
class ServerPingRes;
struct ServerPingResDefaultTypeInternal;
extern ServerPingResDefaultTypeInternal _ServerPingRes_default_instance_;
}  // namespace world
PROTOBUF_NAMESPACE_OPEN
template<> ::world::RegisterServerReq* Arena::CreateMaybeMessage<::world::RegisterServerReq>(Arena*);
template<> ::world::RegisterServerRes* Arena::CreateMaybeMessage<::world::RegisterServerRes>(Arena*);
template<> ::world::ServerPingReq* Arena::CreateMaybeMessage<::world::ServerPingReq>(Arena*);
template<> ::world::ServerPingRes* Arena::CreateMaybeMessage<::world::ServerPingRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace world {

// ===================================================================

class RegisterServerReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.RegisterServerReq) */ {
 public:
  inline RegisterServerReq() : RegisterServerReq(nullptr) {}
  ~RegisterServerReq() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerReq(const RegisterServerReq& from);
  RegisterServerReq(RegisterServerReq&& from) noexcept
    : RegisterServerReq() {
    *this = ::std::move(from);
  }

  inline RegisterServerReq& operator=(const RegisterServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerReq& operator=(RegisterServerReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerReq* internal_default_instance() {
    return reinterpret_cast<const RegisterServerReq*>(
               &_RegisterServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterServerReq& a, RegisterServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerReq& from) {
    RegisterServerReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.RegisterServerReq";
  }
  protected:
  explicit RegisterServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 1,
    kLevelMapNameFieldNumber = 3,
    kServerTypeFieldNumber = 2,
  };
  // string server_address = 1;
  void clear_server_address();
  const std::string& server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_address();
  PROTOBUF_NODISCARD std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // string level_map_name = 3;
  void clear_level_map_name();
  const std::string& level_map_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level_map_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level_map_name();
  PROTOBUF_NODISCARD std::string* release_level_map_name();
  void set_allocated_level_map_name(std::string* level_map_name);
  private:
  const std::string& _internal_level_map_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level_map_name(const std::string& value);
  std::string* _internal_mutable_level_map_name();
  public:

  // .types.ServerType server_type = 2;
  void clear_server_type();
  ::types::ServerType server_type() const;
  void set_server_type(::types::ServerType value);
  private:
  ::types::ServerType _internal_server_type() const;
  void _internal_set_server_type(::types::ServerType value);
  public:

  // @@protoc_insertion_point(class_scope:world.RegisterServerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_map_name_;
    int server_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class RegisterServerRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.RegisterServerRes) */ {
 public:
  inline RegisterServerRes() : RegisterServerRes(nullptr) {}
  ~RegisterServerRes() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerRes(const RegisterServerRes& from);
  RegisterServerRes(RegisterServerRes&& from) noexcept
    : RegisterServerRes() {
    *this = ::std::move(from);
  }

  inline RegisterServerRes& operator=(const RegisterServerRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerRes& operator=(RegisterServerRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerRes* internal_default_instance() {
    return reinterpret_cast<const RegisterServerRes*>(
               &_RegisterServerRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterServerRes& a, RegisterServerRes& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerRes& from) {
    RegisterServerRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.RegisterServerRes";
  }
  protected:
  explicit RegisterServerRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.RegisterServerRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ServerPingReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ServerPingReq) */ {
 public:
  inline ServerPingReq() : ServerPingReq(nullptr) {}
  ~ServerPingReq() override;
  explicit PROTOBUF_CONSTEXPR ServerPingReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPingReq(const ServerPingReq& from);
  ServerPingReq(ServerPingReq&& from) noexcept
    : ServerPingReq() {
    *this = ::std::move(from);
  }

  inline ServerPingReq& operator=(const ServerPingReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPingReq& operator=(ServerPingReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPingReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPingReq* internal_default_instance() {
    return reinterpret_cast<const ServerPingReq*>(
               &_ServerPingReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerPingReq& a, ServerPingReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPingReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPingReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPingReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPingReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPingReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPingReq& from) {
    ServerPingReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPingReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ServerPingReq";
  }
  protected:
  explicit ServerPingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 1,
  };
  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ServerPingReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// -------------------------------------------------------------------

class ServerPingRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:world.ServerPingRes) */ {
 public:
  inline ServerPingRes() : ServerPingRes(nullptr) {}
  ~ServerPingRes() override;
  explicit PROTOBUF_CONSTEXPR ServerPingRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerPingRes(const ServerPingRes& from);
  ServerPingRes(ServerPingRes&& from) noexcept
    : ServerPingRes() {
    *this = ::std::move(from);
  }

  inline ServerPingRes& operator=(const ServerPingRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerPingRes& operator=(ServerPingRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerPingRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerPingRes* internal_default_instance() {
    return reinterpret_cast<const ServerPingRes*>(
               &_ServerPingRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerPingRes& a, ServerPingRes& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerPingRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerPingRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerPingRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerPingRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerPingRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerPingRes& from) {
    ServerPingRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerPingRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "world.ServerPingRes";
  }
  protected:
  explicit ServerPingRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:world.ServerPingRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int result_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_world_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterServerReq

// string server_address = 1;
inline void RegisterServerReq::clear_server_address() {
  _impl_.server_address_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::server_address() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerReq.server_address)
  return _internal_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerReq::set_server_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:world.RegisterServerReq.server_address)
}
inline std::string* RegisterServerReq::mutable_server_address() {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:world.RegisterServerReq.server_address)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_server_address() const {
  return _impl_.server_address_.Get();
}
inline void RegisterServerReq::_internal_set_server_address(const std::string& value) {
  
  _impl_.server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerReq::_internal_mutable_server_address() {
  
  return _impl_.server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerReq::release_server_address() {
  // @@protoc_insertion_point(field_release:world.RegisterServerReq.server_address)
  return _impl_.server_address_.Release();
}
inline void RegisterServerReq::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    
  } else {
    
  }
  _impl_.server_address_.SetAllocated(server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:world.RegisterServerReq.server_address)
}

// .types.ServerType server_type = 2;
inline void RegisterServerReq::clear_server_type() {
  _impl_.server_type_ = 0;
}
inline ::types::ServerType RegisterServerReq::_internal_server_type() const {
  return static_cast< ::types::ServerType >(_impl_.server_type_);
}
inline ::types::ServerType RegisterServerReq::server_type() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerReq.server_type)
  return _internal_server_type();
}
inline void RegisterServerReq::_internal_set_server_type(::types::ServerType value) {
  
  _impl_.server_type_ = value;
}
inline void RegisterServerReq::set_server_type(::types::ServerType value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:world.RegisterServerReq.server_type)
}

// string level_map_name = 3;
inline void RegisterServerReq::clear_level_map_name() {
  _impl_.level_map_name_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::level_map_name() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerReq.level_map_name)
  return _internal_level_map_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerReq::set_level_map_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.level_map_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:world.RegisterServerReq.level_map_name)
}
inline std::string* RegisterServerReq::mutable_level_map_name() {
  std::string* _s = _internal_mutable_level_map_name();
  // @@protoc_insertion_point(field_mutable:world.RegisterServerReq.level_map_name)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_level_map_name() const {
  return _impl_.level_map_name_.Get();
}
inline void RegisterServerReq::_internal_set_level_map_name(const std::string& value) {
  
  _impl_.level_map_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerReq::_internal_mutable_level_map_name() {
  
  return _impl_.level_map_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerReq::release_level_map_name() {
  // @@protoc_insertion_point(field_release:world.RegisterServerReq.level_map_name)
  return _impl_.level_map_name_.Release();
}
inline void RegisterServerReq::set_allocated_level_map_name(std::string* level_map_name) {
  if (level_map_name != nullptr) {
    
  } else {
    
  }
  _impl_.level_map_name_.SetAllocated(level_map_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.level_map_name_.IsDefault()) {
    _impl_.level_map_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:world.RegisterServerReq.level_map_name)
}

// -------------------------------------------------------------------

// RegisterServerRes

// .types.Result result = 1;
inline void RegisterServerRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result RegisterServerRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result RegisterServerRes::result() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerRes.result)
  return _internal_result();
}
inline void RegisterServerRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void RegisterServerRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.RegisterServerRes.result)
}

// int32 server_id = 2;
inline void RegisterServerRes::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t RegisterServerRes::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t RegisterServerRes::server_id() const {
  // @@protoc_insertion_point(field_get:world.RegisterServerRes.server_id)
  return _internal_server_id();
}
inline void RegisterServerRes::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void RegisterServerRes::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:world.RegisterServerRes.server_id)
}

// -------------------------------------------------------------------

// ServerPingReq

// int32 server_id = 1;
inline void ServerPingReq::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t ServerPingReq::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t ServerPingReq::server_id() const {
  // @@protoc_insertion_point(field_get:world.ServerPingReq.server_id)
  return _internal_server_id();
}
inline void ServerPingReq::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void ServerPingReq::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:world.ServerPingReq.server_id)
}

// -------------------------------------------------------------------

// ServerPingRes

// .types.Result result = 1;
inline void ServerPingRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result ServerPingRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result ServerPingRes::result() const {
  // @@protoc_insertion_point(field_get:world.ServerPingRes.result)
  return _internal_result();
}
inline void ServerPingRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void ServerPingRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:world.ServerPingRes.result)
}

// int32 server_id = 2;
inline void ServerPingRes::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t ServerPingRes::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t ServerPingRes::server_id() const {
  // @@protoc_insertion_point(field_get:world.ServerPingRes.server_id)
  return _internal_server_id();
}
inline void ServerPingRes::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void ServerPingRes::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:world.ServerPingRes.server_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace world

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_world_2eproto
