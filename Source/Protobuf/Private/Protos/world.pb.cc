// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#include "world.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace world {
PROTOBUF_CONSTEXPR RegisterServerReq::RegisterServerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerReqDefaultTypeInternal() {}
  union {
    RegisterServerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
PROTOBUF_CONSTEXPR RegisterServerRes::RegisterServerRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerResDefaultTypeInternal() {}
  union {
    RegisterServerRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerResDefaultTypeInternal _RegisterServerRes_default_instance_;
PROTOBUF_CONSTEXPR ServerPingReq::ServerPingReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerPingReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPingReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPingReqDefaultTypeInternal() {}
  union {
    ServerPingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPingReqDefaultTypeInternal _ServerPingReq_default_instance_;
PROTOBUF_CONSTEXPR ServerPingRes::ServerPingRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerPingResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPingResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPingResDefaultTypeInternal() {}
  union {
    ServerPingRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPingResDefaultTypeInternal _ServerPingRes_default_instance_;
PROTOBUF_CONSTEXPR HelloWorldServer::HelloWorldServer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.access_token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playing_character_id_)*/int64_t{0}
  , /*decltype(_impl_.playing_server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloWorldServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloWorldServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloWorldServerDefaultTypeInternal() {}
  union {
    HelloWorldServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloWorldServerDefaultTypeInternal _HelloWorldServer_default_instance_;
PROTOBUF_CONSTEXPR HelloWorldClient::HelloWorldClient(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_uid_)*/0
  , /*decltype(_impl_.server_tick_interval_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HelloWorldClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HelloWorldClientDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HelloWorldClientDefaultTypeInternal() {}
  union {
    HelloWorldClient _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HelloWorldClientDefaultTypeInternal _HelloWorldClient_default_instance_;
PROTOBUF_CONSTEXPR ClientEnterMapReq::ClientEnterMapReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_pos_)*/nullptr
  , /*decltype(_impl_.map_uid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientEnterMapReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientEnterMapReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientEnterMapReqDefaultTypeInternal() {}
  union {
    ClientEnterMapReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientEnterMapReqDefaultTypeInternal _ClientEnterMapReq_default_instance_;
PROTOBUF_CONSTEXPR ClientEnterMapRes::ClientEnterMapRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.section_info_)*/nullptr
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientEnterMapResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientEnterMapResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientEnterMapResDefaultTypeInternal() {}
  union {
    ClientEnterMapRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientEnterMapResDefaultTypeInternal _ClientEnterMapRes_default_instance_;
PROTOBUF_CONSTEXPR ClientEnterMapNotify::ClientEnterMapNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.section_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientEnterMapNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientEnterMapNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientEnterMapNotifyDefaultTypeInternal() {}
  union {
    ClientEnterMapNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientEnterMapNotifyDefaultTypeInternal _ClientEnterMapNotify_default_instance_;
PROTOBUF_CONSTEXPR ClientLeaveMapNotify::ClientLeaveMapNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.section_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientLeaveMapNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientLeaveMapNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientLeaveMapNotifyDefaultTypeInternal() {}
  union {
    ClientLeaveMapNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientLeaveMapNotifyDefaultTypeInternal _ClientLeaveMapNotify_default_instance_;
PROTOBUF_CONSTEXPR ClientMoveReq::ClientMoveReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_pos_)*/nullptr
  , /*decltype(_impl_.client_timestamp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientMoveReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMoveReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMoveReqDefaultTypeInternal() {}
  union {
    ClientMoveReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMoveReqDefaultTypeInternal _ClientMoveReq_default_instance_;
PROTOBUF_CONSTEXPR ClientMoveRes::ClientMoveRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_pos_)*/nullptr
  , /*decltype(_impl_.server_timestamp_)*/nullptr
  , /*decltype(_impl_.client_timestamp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientMoveResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMoveResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMoveResDefaultTypeInternal() {}
  union {
    ClientMoveRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMoveResDefaultTypeInternal _ClientMoveRes_default_instance_;
PROTOBUF_CONSTEXPR ClientActionReq::ClientActionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_action_)*/nullptr
  , /*decltype(_impl_.client_timestamp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientActionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientActionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientActionReqDefaultTypeInternal() {}
  union {
    ClientActionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientActionReqDefaultTypeInternal _ClientActionReq_default_instance_;
PROTOBUF_CONSTEXPR ClientActionRes::ClientActionRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_action_)*/nullptr
  , /*decltype(_impl_.server_timestamp_)*/nullptr
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.client_timestamp_)*/0
  , /*decltype(_impl_.action_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientActionResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientActionResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientActionResDefaultTypeInternal() {}
  union {
    ClientActionRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientActionResDefaultTypeInternal _ClientActionRes_default_instance_;
PROTOBUF_CONSTEXPR OtherClientActionNotify::OtherClientActionNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_action_)*/nullptr
  , /*decltype(_impl_.character_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OtherClientActionNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OtherClientActionNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OtherClientActionNotifyDefaultTypeInternal() {}
  union {
    OtherClientActionNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OtherClientActionNotifyDefaultTypeInternal _OtherClientActionNotify_default_instance_;
PROTOBUF_CONSTEXPR OtherClientEnterNotify::OtherClientEnterNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pc_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OtherClientEnterNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OtherClientEnterNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OtherClientEnterNotifyDefaultTypeInternal() {}
  union {
    OtherClientEnterNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OtherClientEnterNotifyDefaultTypeInternal _OtherClientEnterNotify_default_instance_;
PROTOBUF_CONSTEXPR OtherClientLeaveNotify::OtherClientLeaveNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OtherClientLeaveNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OtherClientLeaveNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OtherClientLeaveNotifyDefaultTypeInternal() {}
  union {
    OtherClientLeaveNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OtherClientLeaveNotifyDefaultTypeInternal _OtherClientLeaveNotify_default_instance_;
PROTOBUF_CONSTEXPR OtherClientMoveNotify::OtherClientMoveNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.character_pos_)*/nullptr
  , /*decltype(_impl_.client_action_)*/nullptr
  , /*decltype(_impl_.character_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OtherClientMoveNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OtherClientMoveNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OtherClientMoveNotifyDefaultTypeInternal() {}
  union {
    OtherClientMoveNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OtherClientMoveNotifyDefaultTypeInternal _OtherClientMoveNotify_default_instance_;
PROTOBUF_CONSTEXPR ChangeServerTickIntervalReq::ChangeServerTickIntervalReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_tick_interval_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangeServerTickIntervalReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeServerTickIntervalReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeServerTickIntervalReqDefaultTypeInternal() {}
  union {
    ChangeServerTickIntervalReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeServerTickIntervalReqDefaultTypeInternal _ChangeServerTickIntervalReq_default_instance_;
PROTOBUF_CONSTEXPR ChangeServerTickIntervalRes::ChangeServerTickIntervalRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_tick_interval_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChangeServerTickIntervalResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeServerTickIntervalResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeServerTickIntervalResDefaultTypeInternal() {}
  union {
    ChangeServerTickIntervalRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeServerTickIntervalResDefaultTypeInternal _ChangeServerTickIntervalRes_default_instance_;
PROTOBUF_CONSTEXPR ServerTickIntervalChangedNotify::ServerTickIntervalChangedNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_tick_interval_ms_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerTickIntervalChangedNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerTickIntervalChangedNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerTickIntervalChangedNotifyDefaultTypeInternal() {}
  union {
    ServerTickIntervalChangedNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerTickIntervalChangedNotifyDefaultTypeInternal _ServerTickIntervalChangedNotify_default_instance_;
PROTOBUF_CONSTEXPR SectionOwnershipChangedNotify::SectionOwnershipChangedNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_character_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SectionOwnershipChangedNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SectionOwnershipChangedNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SectionOwnershipChangedNotifyDefaultTypeInternal() {}
  union {
    SectionOwnershipChangedNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SectionOwnershipChangedNotifyDefaultTypeInternal _SectionOwnershipChangedNotify_default_instance_;
PROTOBUF_CONSTEXPR SpawnNpcOnSectionReq::SpawnNpcOnSectionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.npc_spawn_infos_)*/{}
  , /*decltype(_impl_.spawner_id_)*/0
  , /*decltype(_impl_.client_timestamp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnNpcOnSectionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnNpcOnSectionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnNpcOnSectionReqDefaultTypeInternal() {}
  union {
    SpawnNpcOnSectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnNpcOnSectionReqDefaultTypeInternal _SpawnNpcOnSectionReq_default_instance_;
PROTOBUF_CONSTEXPR SpawnNpcOnSectionRes::SpawnNpcOnSectionRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.spawner_id_)*/0
  , /*decltype(_impl_.next_client_timestamp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnNpcOnSectionResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnNpcOnSectionResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnNpcOnSectionResDefaultTypeInternal() {}
  union {
    SpawnNpcOnSectionRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnNpcOnSectionResDefaultTypeInternal _SpawnNpcOnSectionRes_default_instance_;
PROTOBUF_CONSTEXPR SpawnNpcOnSectionNotify::SpawnNpcOnSectionNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.npc_infos_)*/{}
  , /*decltype(_impl_.spawner_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnNpcOnSectionNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnNpcOnSectionNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnNpcOnSectionNotifyDefaultTypeInternal() {}
  union {
    SpawnNpcOnSectionNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnNpcOnSectionNotifyDefaultTypeInternal _SpawnNpcOnSectionNotify_default_instance_;
PROTOBUF_CONSTEXPR SpawnProjectileOnSectionReq::SpawnProjectileOnSectionReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.character_pose_)*/nullptr
  , /*decltype(_impl_.action_id_)*/int64_t{0}
  , /*decltype(_impl_.projectile_speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnProjectileOnSectionReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnProjectileOnSectionReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnProjectileOnSectionReqDefaultTypeInternal() {}
  union {
    SpawnProjectileOnSectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnProjectileOnSectionReqDefaultTypeInternal _SpawnProjectileOnSectionReq_default_instance_;
PROTOBUF_CONSTEXPR SpawnProjectileOnSectionRes::SpawnProjectileOnSectionRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.debug_trajectory_)*/{}
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnProjectileOnSectionResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnProjectileOnSectionResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnProjectileOnSectionResDefaultTypeInternal() {}
  union {
    SpawnProjectileOnSectionRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnProjectileOnSectionResDefaultTypeInternal _SpawnProjectileOnSectionRes_default_instance_;
PROTOBUF_CONSTEXPR SpawnProjectileOnSectionNotify::SpawnProjectileOnSectionNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectile_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpawnProjectileOnSectionNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnProjectileOnSectionNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnProjectileOnSectionNotifyDefaultTypeInternal() {}
  union {
    SpawnProjectileOnSectionNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnProjectileOnSectionNotifyDefaultTypeInternal _SpawnProjectileOnSectionNotify_default_instance_;
PROTOBUF_CONSTEXPR HitObjectByProjectileReq::HitObjectByProjectileReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.on_hit_location_)*/nullptr
  , /*decltype(_impl_.hit_object_id_)*/int64_t{0}
  , /*decltype(_impl_.projectile_object_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitObjectByProjectileReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitObjectByProjectileReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitObjectByProjectileReqDefaultTypeInternal() {}
  union {
    HitObjectByProjectileReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitObjectByProjectileReqDefaultTypeInternal _HitObjectByProjectileReq_default_instance_;
PROTOBUF_CONSTEXPR HitObjectByProjectileRes::HitObjectByProjectileRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitObjectByProjectileResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitObjectByProjectileResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitObjectByProjectileResDefaultTypeInternal() {}
  union {
    HitObjectByProjectileRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitObjectByProjectileResDefaultTypeInternal _HitObjectByProjectileRes_default_instance_;
PROTOBUF_CONSTEXPR HitObjectByProjectileNotify::HitObjectByProjectileNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.projectile_object_id_)*/int64_t{0}
  , /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_.current_hp_)*/int64_t{0}
  , /*decltype(_impl_.is_alive_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HitObjectByProjectileNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HitObjectByProjectileNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HitObjectByProjectileNotifyDefaultTypeInternal() {}
  union {
    HitObjectByProjectileNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HitObjectByProjectileNotifyDefaultTypeInternal _HitObjectByProjectileNotify_default_instance_;
PROTOBUF_CONSTEXPR DespawnNpcOnSectionNotify::DespawnNpcOnSectionNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DespawnNpcOnSectionNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DespawnNpcOnSectionNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DespawnNpcOnSectionNotifyDefaultTypeInternal() {}
  union {
    DespawnNpcOnSectionNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DespawnNpcOnSectionNotifyDefaultTypeInternal _DespawnNpcOnSectionNotify_default_instance_;
PROTOBUF_CONSTEXPR DespawnProjectileOnSectionNotify::DespawnProjectileOnSectionNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DespawnProjectileOnSectionNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DespawnProjectileOnSectionNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DespawnProjectileOnSectionNotifyDefaultTypeInternal() {}
  union {
    DespawnProjectileOnSectionNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DespawnProjectileOnSectionNotifyDefaultTypeInternal _DespawnProjectileOnSectionNotify_default_instance_;
PROTOBUF_CONSTEXPR DebugSimulationPositionNotify::DebugSimulationPositionNotify(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.shape_info_)*/nullptr
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_.shape_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugSimulationPositionNotifyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugSimulationPositionNotifyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugSimulationPositionNotifyDefaultTypeInternal() {}
  union {
    DebugSimulationPositionNotify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugSimulationPositionNotifyDefaultTypeInternal _DebugSimulationPositionNotify_default_instance_;
}  // namespace world
static ::_pb::Metadata file_level_metadata_world_2eproto[34];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_world_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_world_2eproto = nullptr;

const uint32_t TableStruct_world_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _impl_.server_address_),
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _impl_.server_type_),
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _impl_.level_map_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerRes, _impl_.server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingReq, _impl_.server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::ServerPingRes, _impl_.server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldServer, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldServer, _impl_.access_token_),
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldServer, _impl_.playing_character_id_),
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldServer, _impl_.playing_server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldClient, _impl_.map_uid_),
  PROTOBUF_FIELD_OFFSET(::world::HelloWorldClient, _impl_.server_tick_interval_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapReq, _impl_.map_uid_),
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapReq, _impl_.character_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapRes, _impl_.section_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientEnterMapNotify, _impl_.section_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientLeaveMapNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientLeaveMapNotify, _impl_.section_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientMoveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientMoveReq, _impl_.character_pos_),
  PROTOBUF_FIELD_OFFSET(::world::ClientMoveReq, _impl_.client_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientMoveRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientMoveRes, _impl_.character_pos_),
  PROTOBUF_FIELD_OFFSET(::world::ClientMoveRes, _impl_.client_timestamp_),
  PROTOBUF_FIELD_OFFSET(::world::ClientMoveRes, _impl_.server_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientActionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientActionReq, _impl_.client_action_),
  PROTOBUF_FIELD_OFFSET(::world::ClientActionReq, _impl_.client_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ClientActionRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ClientActionRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::ClientActionRes, _impl_.client_action_),
  PROTOBUF_FIELD_OFFSET(::world::ClientActionRes, _impl_.client_timestamp_),
  PROTOBUF_FIELD_OFFSET(::world::ClientActionRes, _impl_.server_timestamp_),
  PROTOBUF_FIELD_OFFSET(::world::ClientActionRes, _impl_.action_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientActionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientActionNotify, _impl_.character_id_),
  PROTOBUF_FIELD_OFFSET(::world::OtherClientActionNotify, _impl_.client_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientEnterNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientEnterNotify, _impl_.pc_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientLeaveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientLeaveNotify, _impl_.character_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientMoveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::OtherClientMoveNotify, _impl_.character_id_),
  PROTOBUF_FIELD_OFFSET(::world::OtherClientMoveNotify, _impl_.character_pos_),
  PROTOBUF_FIELD_OFFSET(::world::OtherClientMoveNotify, _impl_.client_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ChangeServerTickIntervalReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ChangeServerTickIntervalReq, _impl_.server_tick_interval_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ChangeServerTickIntervalRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ChangeServerTickIntervalRes, _impl_.server_tick_interval_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ServerTickIntervalChangedNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ServerTickIntervalChangedNotify, _impl_.server_tick_interval_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::SectionOwnershipChangedNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::SectionOwnershipChangedNotify, _impl_.owner_character_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionReq, _impl_.spawner_id_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionReq, _impl_.npc_spawn_infos_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionReq, _impl_.client_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionRes, _impl_.spawner_id_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionRes, _impl_.next_client_timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionNotify, _impl_.spawner_id_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnNpcOnSectionNotify, _impl_.npc_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionReq, _impl_.action_id_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionReq, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionReq, _impl_.projectile_speed_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionReq, _impl_.character_pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionRes, _impl_.debug_trajectory_),
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionRes, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::SpawnProjectileOnSectionNotify, _impl_.projectile_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileReq, _impl_.hit_object_id_),
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileReq, _impl_.on_hit_location_),
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileReq, _impl_.projectile_object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileRes, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileNotify, _impl_.projectile_object_id_),
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileNotify, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileNotify, _impl_.current_hp_),
  PROTOBUF_FIELD_OFFSET(::world::HitObjectByProjectileNotify, _impl_.is_alive_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::DespawnNpcOnSectionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::DespawnNpcOnSectionNotify, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::DespawnProjectileOnSectionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::DespawnProjectileOnSectionNotify, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::DebugSimulationPositionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::DebugSimulationPositionNotify, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::world::DebugSimulationPositionNotify, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::world::DebugSimulationPositionNotify, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::world::DebugSimulationPositionNotify, _impl_.shape_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::world::RegisterServerReq)},
  { 9, -1, -1, sizeof(::world::RegisterServerRes)},
  { 17, -1, -1, sizeof(::world::ServerPingReq)},
  { 24, -1, -1, sizeof(::world::ServerPingRes)},
  { 32, -1, -1, sizeof(::world::HelloWorldServer)},
  { 42, -1, -1, sizeof(::world::HelloWorldClient)},
  { 50, -1, -1, sizeof(::world::ClientEnterMapReq)},
  { 58, -1, -1, sizeof(::world::ClientEnterMapRes)},
  { 66, -1, -1, sizeof(::world::ClientEnterMapNotify)},
  { 73, -1, -1, sizeof(::world::ClientLeaveMapNotify)},
  { 80, -1, -1, sizeof(::world::ClientMoveReq)},
  { 88, -1, -1, sizeof(::world::ClientMoveRes)},
  { 97, -1, -1, sizeof(::world::ClientActionReq)},
  { 105, -1, -1, sizeof(::world::ClientActionRes)},
  { 116, -1, -1, sizeof(::world::OtherClientActionNotify)},
  { 124, -1, -1, sizeof(::world::OtherClientEnterNotify)},
  { 131, -1, -1, sizeof(::world::OtherClientLeaveNotify)},
  { 138, -1, -1, sizeof(::world::OtherClientMoveNotify)},
  { 147, -1, -1, sizeof(::world::ChangeServerTickIntervalReq)},
  { 154, -1, -1, sizeof(::world::ChangeServerTickIntervalRes)},
  { 161, -1, -1, sizeof(::world::ServerTickIntervalChangedNotify)},
  { 168, -1, -1, sizeof(::world::SectionOwnershipChangedNotify)},
  { 175, -1, -1, sizeof(::world::SpawnNpcOnSectionReq)},
  { 184, -1, -1, sizeof(::world::SpawnNpcOnSectionRes)},
  { 193, -1, -1, sizeof(::world::SpawnNpcOnSectionNotify)},
  { 201, -1, -1, sizeof(::world::SpawnProjectileOnSectionReq)},
  { 211, -1, -1, sizeof(::world::SpawnProjectileOnSectionRes)},
  { 220, -1, -1, sizeof(::world::SpawnProjectileOnSectionNotify)},
  { 227, -1, -1, sizeof(::world::HitObjectByProjectileReq)},
  { 236, -1, -1, sizeof(::world::HitObjectByProjectileRes)},
  { 243, -1, -1, sizeof(::world::HitObjectByProjectileNotify)},
  { 253, -1, -1, sizeof(::world::DespawnNpcOnSectionNotify)},
  { 260, -1, -1, sizeof(::world::DespawnProjectileOnSectionNotify)},
  { 267, -1, -1, sizeof(::world::DebugSimulationPositionNotify)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::world::_RegisterServerReq_default_instance_._instance,
  &::world::_RegisterServerRes_default_instance_._instance,
  &::world::_ServerPingReq_default_instance_._instance,
  &::world::_ServerPingRes_default_instance_._instance,
  &::world::_HelloWorldServer_default_instance_._instance,
  &::world::_HelloWorldClient_default_instance_._instance,
  &::world::_ClientEnterMapReq_default_instance_._instance,
  &::world::_ClientEnterMapRes_default_instance_._instance,
  &::world::_ClientEnterMapNotify_default_instance_._instance,
  &::world::_ClientLeaveMapNotify_default_instance_._instance,
  &::world::_ClientMoveReq_default_instance_._instance,
  &::world::_ClientMoveRes_default_instance_._instance,
  &::world::_ClientActionReq_default_instance_._instance,
  &::world::_ClientActionRes_default_instance_._instance,
  &::world::_OtherClientActionNotify_default_instance_._instance,
  &::world::_OtherClientEnterNotify_default_instance_._instance,
  &::world::_OtherClientLeaveNotify_default_instance_._instance,
  &::world::_OtherClientMoveNotify_default_instance_._instance,
  &::world::_ChangeServerTickIntervalReq_default_instance_._instance,
  &::world::_ChangeServerTickIntervalRes_default_instance_._instance,
  &::world::_ServerTickIntervalChangedNotify_default_instance_._instance,
  &::world::_SectionOwnershipChangedNotify_default_instance_._instance,
  &::world::_SpawnNpcOnSectionReq_default_instance_._instance,
  &::world::_SpawnNpcOnSectionRes_default_instance_._instance,
  &::world::_SpawnNpcOnSectionNotify_default_instance_._instance,
  &::world::_SpawnProjectileOnSectionReq_default_instance_._instance,
  &::world::_SpawnProjectileOnSectionRes_default_instance_._instance,
  &::world::_SpawnProjectileOnSectionNotify_default_instance_._instance,
  &::world::_HitObjectByProjectileReq_default_instance_._instance,
  &::world::_HitObjectByProjectileRes_default_instance_._instance,
  &::world::_HitObjectByProjectileNotify_default_instance_._instance,
  &::world::_DespawnNpcOnSectionNotify_default_instance_._instance,
  &::world::_DespawnProjectileOnSectionNotify_default_instance_._instance,
  &::world::_DebugSimulationPositionNotify_default_instance_._instance,
};

const char descriptor_table_protodef_world_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013world.proto\022\005world\032\013types.proto\032\037googl"
  "e/protobuf/timestamp.proto\"q\n\021RegisterSe"
  "rverReq\022\026\n\016server_address\030\001 \001(\t\022&\n\013serve"
  "r_type\030\002 \001(\0162\021.types.ServerType\022\026\n\016level"
  "_map_name\030\003 \001(\t:\004\310>\211 \"K\n\021RegisterServerR"
  "es\022\035\n\006result\030\001 \001(\0162\r.types.Result\022\021\n\tser"
  "ver_id\030\002 \001(\005:\004\310>\212 \"(\n\rServerPingReq\022\021\n\ts"
  "erver_id\030\001 \001(\005:\004\310>\213 \"G\n\rServerPingRes\022\035\n"
  "\006result\030\001 \001(\0162\r.types.Result\022\021\n\tserver_i"
  "d\030\002 \001(\005:\004\310>\213 \"x\n\020HelloWorldServer\022\017\n\007use"
  "r_id\030\001 \001(\t\022\024\n\014access_token\030\002 \001(\t\022\034\n\024play"
  "ing_character_id\030\003 \001(\003\022\031\n\021playing_server"
  "_id\030\004 \001(\005:\004\310>\226 \"J\n\020HelloWorldClient\022\017\n\007m"
  "ap_uid\030\001 \001(\005\022\037\n\027server_tick_interval_ms\030"
  "\002 \001(\005:\004\310>\227 \"W\n\021ClientEnterMapReq\022\017\n\007map_"
  "uid\030\001 \001(\005\022+\n\rcharacter_pos\030\002 \001(\0132\024.types"
  ".CharacterPose:\004\310>\244 \"b\n\021ClientEnterMapRe"
  "s\022\035\n\006result\030\001 \001(\0162\r.types.Result\022(\n\014sect"
  "ion_info\030\004 \001(\0132\022.types.SectionInfo:\004\310>\245 "
  "\"F\n\024ClientEnterMapNotify\022(\n\014section_info"
  "\030\001 \001(\0132\022.types.SectionInfo:\004\310>\240 \"F\n\024Clie"
  "ntLeaveMapNotify\022(\n\014section_info\030\002 \001(\0132\022"
  ".types.SectionInfo:\004\310>\241 \"\\\n\rClientMoveRe"
  "q\022+\n\rcharacter_pos\030\001 \001(\0132\024.types.Charact"
  "erPose\022\030\n\020client_timestamp\030\003 \001(\002:\004\310>\230 \"\222"
  "\001\n\rClientMoveRes\022+\n\rcharacter_pos\030\002 \001(\0132"
  "\024.types.CharacterPose\022\030\n\020client_timestam"
  "p\030\003 \001(\002\0224\n\020server_timestamp\030\004 \001(\0132\032.goog"
  "le.protobuf.Timestamp:\004\310>\231 \"]\n\017ClientAct"
  "ionReq\022*\n\rclient_action\030\001 \001(\0132\023.types.Cl"
  "ientAction\022\030\n\020client_timestamp\030\002 \001(\002:\004\310>"
  "\252 \"\305\001\n\017ClientActionRes\022\035\n\006result\030\001 \001(\0162\r"
  ".types.Result\022*\n\rclient_action\030\002 \001(\0132\023.t"
  "ypes.ClientAction\022\030\n\020client_timestamp\030\003 "
  "\001(\002\0224\n\020server_timestamp\030\004 \001(\0132\032.google.p"
  "rotobuf.Timestamp\022\021\n\taction_id\030\005 \001(\003:\004\310>"
  "\253 \"a\n\027OtherClientActionNotify\022\024\n\014charact"
  "er_id\030\001 \001(\003\022*\n\rclient_action\030\002 \001(\0132\023.typ"
  "es.ClientAction:\004\310>\254 \">\n\026OtherClientEnte"
  "rNotify\022\036\n\007pc_info\030\001 \001(\0132\r.types.PcInfo:"
  "\004\310>\242 \"4\n\026OtherClientLeaveNotify\022\024\n\014chara"
  "cter_id\030\001 \001(\003:\004\310>\243 \"\214\001\n\025OtherClientMoveN"
  "otify\022\024\n\014character_id\030\001 \001(\003\022+\n\rcharacter"
  "_pos\030\002 \001(\0132\024.types.CharacterPose\022*\n\rclie"
  "nt_action\030\003 \001(\0132\023.types.ClientAction:\004\310>"
  "\246 \"D\n\033ChangeServerTickIntervalReq\022\037\n\027ser"
  "ver_tick_interval_ms\030\002 \001(\005:\004\310>\250 \"D\n\033Chan"
  "geServerTickIntervalRes\022\037\n\027server_tick_i"
  "nterval_ms\030\002 \001(\005:\004\310>\251 \"H\n\037ServerTickInte"
  "rvalChangedNotify\022\037\n\027server_tick_interva"
  "l_ms\030\002 \001(\005:\004\310>\247 \"A\n\035SectionOwnershipChan"
  "gedNotify\022\032\n\022owner_character_id\030\001 \001(\003:\004\310"
  ">\255 \"x\n\024SpawnNpcOnSectionReq\022\022\n\nspawner_i"
  "d\030\001 \001(\005\022,\n\017npc_spawn_infos\030\002 \003(\0132\023.types"
  ".NpcSpawnInfo\022\030\n\020client_timestamp\030\004 \001(\002:"
  "\004\310>\256 \"n\n\024SpawnNpcOnSectionRes\022\035\n\006result\030"
  "\001 \001(\0162\r.types.Result\022\022\n\nspawner_id\030\002 \001(\005"
  "\022\035\n\025next_client_timestamp\030\003 \001(\002:\004\310>\257 \"V\n"
  "\027SpawnNpcOnSectionNotify\022\022\n\nspawner_id\030\001"
  " \001(\005\022!\n\tnpc_infos\030\002 \003(\0132\016.types.NpcInfo:"
  "\004\310>\260 \"\220\001\n\033SpawnProjectileOnSectionReq\022\021\n"
  "\taction_id\030\001 \001(\003\022\031\n\004pose\030\002 \001(\0132\013.types.P"
  "ose\022\030\n\020projectile_speed\030\003 \001(\002\022#\n\016charact"
  "er_pose\030\004 \001(\0132\013.types.Pose:\004\310>\261 \"\177\n\033Spaw"
  "nProjectileOnSectionRes\022\035\n\006result\030\001 \001(\0162"
  "\r.types.Result\022(\n\020debug_trajectory\030\002 \003(\013"
  "2\016.types.Vector3\022\021\n\tobject_id\030\003 \001(\003:\004\310>\262"
  " \"V\n\036SpawnProjectileOnSectionNotify\022.\n\017p"
  "rojectile_info\030\001 \001(\0132\025.types.ProjectileI"
  "nfo:\004\310>\263 \"~\n\030HitObjectByProjectileReq\022\025\n"
  "\rhit_object_id\030\001 \001(\003\022\'\n\017on_hit_location\030"
  "\002 \001(\0132\016.types.Vector3\022\034\n\024projectile_obje"
  "ct_id\030\003 \001(\003:\004\310>\264 \"\?\n\030HitObjectByProjecti"
  "leRes\022\035\n\006result\030\001 \001(\0162\r.types.Result:\004\310>"
  "\265 \"z\n\033HitObjectByProjectileNotify\022\034\n\024pro"
  "jectile_object_id\030\001 \001(\003\022\021\n\tobject_id\030\002 \001"
  "(\003\022\022\n\ncurrent_hp\030\003 \001(\003\022\020\n\010is_alive\030\004 \001(\010"
  ":\004\310>\266 \"4\n\031DespawnNpcOnSectionNotify\022\021\n\to"
  "bject_id\030\001 \001(\003:\004\310>\267 \";\n DespawnProjectil"
  "eOnSectionNotify\022\021\n\tobject_id\030\001 \001(\003:\004\310>\270"
  " \"\261\001\n\035DebugSimulationPositionNotify\022 \n\010p"
  "osition\030\001 \001(\0132\016.types.Vector3\022\033\n\005color\030\002"
  " \001(\0162\014.types.Color\022 \n\005shape\030\003 \001(\0162\021.type"
  "s.DebugShape\022)\n\nshape_info\030\004 \001(\0132\025.types"
  ".DebugShapeInfo:\004\310>\271 b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_world_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_types_2eproto,
};
static ::_pbi::once_flag descriptor_table_world_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_world_2eproto = {
    false, false, 3389, descriptor_table_protodef_world_2eproto,
    "world.proto",
    &descriptor_table_world_2eproto_once, descriptor_table_world_2eproto_deps, 2, 34,
    schemas, file_default_instances, TableStruct_world_2eproto::offsets,
    file_level_metadata_world_2eproto, file_level_enum_descriptors_world_2eproto,
    file_level_service_descriptors_world_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_world_2eproto_getter() {
  return &descriptor_table_world_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_world_2eproto(&descriptor_table_world_2eproto);
namespace world {

// ===================================================================

class RegisterServerReq::_Internal {
 public:
};

RegisterServerReq::RegisterServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.RegisterServerReq)
}
RegisterServerReq::RegisterServerReq(const RegisterServerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_address_){}
    , decltype(_impl_.level_map_name_){}
    , decltype(_impl_.server_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_address().empty()) {
    _this->_impl_.server_address_.Set(from._internal_server_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.level_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_level_map_name().empty()) {
    _this->_impl_.level_map_name_.Set(from._internal_level_map_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.server_type_ = from._impl_.server_type_;
  // @@protoc_insertion_point(copy_constructor:world.RegisterServerReq)
}

inline void RegisterServerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_address_){}
    , decltype(_impl_.level_map_name_){}
    , decltype(_impl_.server_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.level_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterServerReq::~RegisterServerReq() {
  // @@protoc_insertion_point(destructor:world.RegisterServerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_address_.Destroy();
  _impl_.level_map_name_.Destroy();
}

void RegisterServerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.RegisterServerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_address_.ClearToEmpty();
  _impl_.level_map_name_.ClearToEmpty();
  _impl_.server_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string server_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "world.RegisterServerReq.server_address"));
        } else
          goto handle_unusual;
        continue;
      // .types.ServerType server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_server_type(static_cast<::types::ServerType>(val));
        } else
          goto handle_unusual;
        continue;
      // string level_map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_level_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "world.RegisterServerReq.level_map_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.RegisterServerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (!this->_internal_server_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world.RegisterServerReq.server_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_address(), target);
  }

  // .types.ServerType server_type = 2;
  if (this->_internal_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_server_type(), target);
  }

  // string level_map_name = 3;
  if (!this->_internal_level_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_map_name().data(), static_cast<int>(this->_internal_level_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world.RegisterServerReq.level_map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_level_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.RegisterServerReq)
  return target;
}

size_t RegisterServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.RegisterServerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_address = 1;
  if (!this->_internal_server_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_address());
  }

  // string level_map_name = 3;
  if (!this->_internal_level_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_map_name());
  }

  // .types.ServerType server_type = 2;
  if (this->_internal_server_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_server_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerReq::GetClassData() const { return &_class_data_; }


void RegisterServerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerReq*>(&to_msg);
  auto& from = static_cast<const RegisterServerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.RegisterServerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_address().empty()) {
    _this->_internal_set_server_address(from._internal_server_address());
  }
  if (!from._internal_level_map_name().empty()) {
    _this->_internal_set_level_map_name(from._internal_level_map_name());
  }
  if (from._internal_server_type() != 0) {
    _this->_internal_set_server_type(from._internal_server_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerReq::CopyFrom(const RegisterServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.RegisterServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerReq::IsInitialized() const {
  return true;
}

void RegisterServerReq::InternalSwap(RegisterServerReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_address_, lhs_arena,
      &other->_impl_.server_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.level_map_name_, lhs_arena,
      &other->_impl_.level_map_name_, rhs_arena
  );
  swap(_impl_.server_type_, other->_impl_.server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[0]);
}

// ===================================================================

class RegisterServerRes::_Internal {
 public:
};

RegisterServerRes::RegisterServerRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.RegisterServerRes)
}
RegisterServerRes::RegisterServerRes(const RegisterServerRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  // @@protoc_insertion_point(copy_constructor:world.RegisterServerRes)
}

inline void RegisterServerRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterServerRes::~RegisterServerRes() {
  // @@protoc_insertion_point(destructor:world.RegisterServerRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterServerRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.RegisterServerRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.RegisterServerRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.RegisterServerRes)
  return target;
}

size_t RegisterServerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.RegisterServerRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerRes::GetClassData() const { return &_class_data_; }


void RegisterServerRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerRes*>(&to_msg);
  auto& from = static_cast<const RegisterServerRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.RegisterServerRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerRes::CopyFrom(const RegisterServerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.RegisterServerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerRes::IsInitialized() const {
  return true;
}

void RegisterServerRes::InternalSwap(RegisterServerRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterServerRes, _impl_.server_id_)
      + sizeof(RegisterServerRes::_impl_.server_id_)
      - PROTOBUF_FIELD_OFFSET(RegisterServerRes, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[1]);
}

// ===================================================================

class ServerPingReq::_Internal {
 public:
};

ServerPingReq::ServerPingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ServerPingReq)
}
ServerPingReq::ServerPingReq(const ServerPingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPingReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_id_ = from._impl_.server_id_;
  // @@protoc_insertion_point(copy_constructor:world.ServerPingReq)
}

inline void ServerPingReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerPingReq::~ServerPingReq() {
  // @@protoc_insertion_point(destructor:world.ServerPingReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerPingReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ServerPingReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPingReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerPingReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ServerPingReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ServerPingReq)
  return target;
}

size_t ServerPingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ServerPingReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPingReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPingReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPingReq::GetClassData() const { return &_class_data_; }


void ServerPingReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPingReq*>(&to_msg);
  auto& from = static_cast<const ServerPingReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ServerPingReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPingReq::CopyFrom(const ServerPingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ServerPingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPingReq::IsInitialized() const {
  return true;
}

void ServerPingReq::InternalSwap(ServerPingReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.server_id_, other->_impl_.server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPingReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[2]);
}

// ===================================================================

class ServerPingRes::_Internal {
 public:
};

ServerPingRes::ServerPingRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ServerPingRes)
}
ServerPingRes::ServerPingRes(const ServerPingRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPingRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  // @@protoc_insertion_point(copy_constructor:world.ServerPingRes)
}

inline void ServerPingRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerPingRes::~ServerPingRes() {
  // @@protoc_insertion_point(destructor:world.ServerPingRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPingRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerPingRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPingRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ServerPingRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPingRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerPingRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ServerPingRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ServerPingRes)
  return target;
}

size_t ServerPingRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ServerPingRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPingRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPingRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPingRes::GetClassData() const { return &_class_data_; }


void ServerPingRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPingRes*>(&to_msg);
  auto& from = static_cast<const ServerPingRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ServerPingRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPingRes::CopyFrom(const ServerPingRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ServerPingRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPingRes::IsInitialized() const {
  return true;
}

void ServerPingRes::InternalSwap(ServerPingRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerPingRes, _impl_.server_id_)
      + sizeof(ServerPingRes::_impl_.server_id_)
      - PROTOBUF_FIELD_OFFSET(ServerPingRes, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPingRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[3]);
}

// ===================================================================

class HelloWorldServer::_Internal {
 public:
};

HelloWorldServer::HelloWorldServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.HelloWorldServer)
}
HelloWorldServer::HelloWorldServer(const HelloWorldServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloWorldServer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.access_token_){}
    , decltype(_impl_.playing_character_id_){}
    , decltype(_impl_.playing_server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.access_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_access_token().empty()) {
    _this->_impl_.access_token_.Set(from._internal_access_token(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playing_character_id_, &from._impl_.playing_character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.playing_server_id_) -
    reinterpret_cast<char*>(&_impl_.playing_character_id_)) + sizeof(_impl_.playing_server_id_));
  // @@protoc_insertion_point(copy_constructor:world.HelloWorldServer)
}

inline void HelloWorldServer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.access_token_){}
    , decltype(_impl_.playing_character_id_){int64_t{0}}
    , decltype(_impl_.playing_server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.access_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.access_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HelloWorldServer::~HelloWorldServer() {
  // @@protoc_insertion_point(destructor:world.HelloWorldServer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloWorldServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.access_token_.Destroy();
}

void HelloWorldServer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloWorldServer::Clear() {
// @@protoc_insertion_point(message_clear_start:world.HelloWorldServer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.access_token_.ClearToEmpty();
  ::memset(&_impl_.playing_character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.playing_server_id_) -
      reinterpret_cast<char*>(&_impl_.playing_character_id_)) + sizeof(_impl_.playing_server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloWorldServer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "world.HelloWorldServer.user_id"));
        } else
          goto handle_unusual;
        continue;
      // string access_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_access_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "world.HelloWorldServer.access_token"));
        } else
          goto handle_unusual;
        continue;
      // int64 playing_character_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.playing_character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 playing_server_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.playing_server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloWorldServer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.HelloWorldServer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world.HelloWorldServer.user_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_user_id(), target);
  }

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_access_token().data(), static_cast<int>(this->_internal_access_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world.HelloWorldServer.access_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_access_token(), target);
  }

  // int64 playing_character_id = 3;
  if (this->_internal_playing_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_playing_character_id(), target);
  }

  // int32 playing_server_id = 4;
  if (this->_internal_playing_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_playing_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.HelloWorldServer)
  return target;
}

size_t HelloWorldServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.HelloWorldServer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_access_token());
  }

  // int64 playing_character_id = 3;
  if (this->_internal_playing_character_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playing_character_id());
  }

  // int32 playing_server_id = 4;
  if (this->_internal_playing_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_playing_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloWorldServer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloWorldServer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloWorldServer::GetClassData() const { return &_class_data_; }


void HelloWorldServer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloWorldServer*>(&to_msg);
  auto& from = static_cast<const HelloWorldServer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.HelloWorldServer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_access_token().empty()) {
    _this->_internal_set_access_token(from._internal_access_token());
  }
  if (from._internal_playing_character_id() != 0) {
    _this->_internal_set_playing_character_id(from._internal_playing_character_id());
  }
  if (from._internal_playing_server_id() != 0) {
    _this->_internal_set_playing_server_id(from._internal_playing_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloWorldServer::CopyFrom(const HelloWorldServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.HelloWorldServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloWorldServer::IsInitialized() const {
  return true;
}

void HelloWorldServer::InternalSwap(HelloWorldServer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.user_id_, lhs_arena,
      &other->_impl_.user_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.access_token_, lhs_arena,
      &other->_impl_.access_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HelloWorldServer, _impl_.playing_server_id_)
      + sizeof(HelloWorldServer::_impl_.playing_server_id_)
      - PROTOBUF_FIELD_OFFSET(HelloWorldServer, _impl_.playing_character_id_)>(
          reinterpret_cast<char*>(&_impl_.playing_character_id_),
          reinterpret_cast<char*>(&other->_impl_.playing_character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloWorldServer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[4]);
}

// ===================================================================

class HelloWorldClient::_Internal {
 public:
};

HelloWorldClient::HelloWorldClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.HelloWorldClient)
}
HelloWorldClient::HelloWorldClient(const HelloWorldClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HelloWorldClient* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_uid_){}
    , decltype(_impl_.server_tick_interval_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.map_uid_, &from._impl_.map_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_tick_interval_ms_) -
    reinterpret_cast<char*>(&_impl_.map_uid_)) + sizeof(_impl_.server_tick_interval_ms_));
  // @@protoc_insertion_point(copy_constructor:world.HelloWorldClient)
}

inline void HelloWorldClient::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_uid_){0}
    , decltype(_impl_.server_tick_interval_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HelloWorldClient::~HelloWorldClient() {
  // @@protoc_insertion_point(destructor:world.HelloWorldClient)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HelloWorldClient::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HelloWorldClient::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HelloWorldClient::Clear() {
// @@protoc_insertion_point(message_clear_start:world.HelloWorldClient)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.map_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_tick_interval_ms_) -
      reinterpret_cast<char*>(&_impl_.map_uid_)) + sizeof(_impl_.server_tick_interval_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HelloWorldClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.map_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 server_tick_interval_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_tick_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HelloWorldClient::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.HelloWorldClient)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_uid = 1;
  if (this->_internal_map_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_uid(), target);
  }

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_tick_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.HelloWorldClient)
  return target;
}

size_t HelloWorldClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.HelloWorldClient)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 map_uid = 1;
  if (this->_internal_map_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_uid());
  }

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_tick_interval_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HelloWorldClient::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HelloWorldClient::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HelloWorldClient::GetClassData() const { return &_class_data_; }


void HelloWorldClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HelloWorldClient*>(&to_msg);
  auto& from = static_cast<const HelloWorldClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.HelloWorldClient)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_map_uid() != 0) {
    _this->_internal_set_map_uid(from._internal_map_uid());
  }
  if (from._internal_server_tick_interval_ms() != 0) {
    _this->_internal_set_server_tick_interval_ms(from._internal_server_tick_interval_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HelloWorldClient::CopyFrom(const HelloWorldClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.HelloWorldClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloWorldClient::IsInitialized() const {
  return true;
}

void HelloWorldClient::InternalSwap(HelloWorldClient* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HelloWorldClient, _impl_.server_tick_interval_ms_)
      + sizeof(HelloWorldClient::_impl_.server_tick_interval_ms_)
      - PROTOBUF_FIELD_OFFSET(HelloWorldClient, _impl_.map_uid_)>(
          reinterpret_cast<char*>(&_impl_.map_uid_),
          reinterpret_cast<char*>(&other->_impl_.map_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloWorldClient::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[5]);
}

// ===================================================================

class ClientEnterMapReq::_Internal {
 public:
  static const ::types::CharacterPose& character_pos(const ClientEnterMapReq* msg);
};

const ::types::CharacterPose&
ClientEnterMapReq::_Internal::character_pos(const ClientEnterMapReq* msg) {
  return *msg->_impl_.character_pos_;
}
void ClientEnterMapReq::clear_character_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
}
ClientEnterMapReq::ClientEnterMapReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientEnterMapReq)
}
ClientEnterMapReq::ClientEnterMapReq(const ClientEnterMapReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientEnterMapReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.map_uid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character_pos()) {
    _this->_impl_.character_pos_ = new ::types::CharacterPose(*from._impl_.character_pos_);
  }
  _this->_impl_.map_uid_ = from._impl_.map_uid_;
  // @@protoc_insertion_point(copy_constructor:world.ClientEnterMapReq)
}

inline void ClientEnterMapReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.map_uid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientEnterMapReq::~ClientEnterMapReq() {
  // @@protoc_insertion_point(destructor:world.ClientEnterMapReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientEnterMapReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.character_pos_;
}

void ClientEnterMapReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientEnterMapReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientEnterMapReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
  _impl_.map_uid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientEnterMapReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 map_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.map_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.CharacterPose character_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientEnterMapReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientEnterMapReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 map_uid = 1;
  if (this->_internal_map_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_map_uid(), target);
  }

  // .types.CharacterPose character_pos = 2;
  if (this->_internal_has_character_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::character_pos(this),
        _Internal::character_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientEnterMapReq)
  return target;
}

size_t ClientEnterMapReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientEnterMapReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.CharacterPose character_pos = 2;
  if (this->_internal_has_character_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_pos_);
  }

  // int32 map_uid = 1;
  if (this->_internal_map_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientEnterMapReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientEnterMapReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientEnterMapReq::GetClassData() const { return &_class_data_; }


void ClientEnterMapReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientEnterMapReq*>(&to_msg);
  auto& from = static_cast<const ClientEnterMapReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientEnterMapReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character_pos()) {
    _this->_internal_mutable_character_pos()->::types::CharacterPose::MergeFrom(
        from._internal_character_pos());
  }
  if (from._internal_map_uid() != 0) {
    _this->_internal_set_map_uid(from._internal_map_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientEnterMapReq::CopyFrom(const ClientEnterMapReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientEnterMapReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEnterMapReq::IsInitialized() const {
  return true;
}

void ClientEnterMapReq::InternalSwap(ClientEnterMapReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientEnterMapReq, _impl_.map_uid_)
      + sizeof(ClientEnterMapReq::_impl_.map_uid_)
      - PROTOBUF_FIELD_OFFSET(ClientEnterMapReq, _impl_.character_pos_)>(
          reinterpret_cast<char*>(&_impl_.character_pos_),
          reinterpret_cast<char*>(&other->_impl_.character_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEnterMapReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[6]);
}

// ===================================================================

class ClientEnterMapRes::_Internal {
 public:
  static const ::types::SectionInfo& section_info(const ClientEnterMapRes* msg);
};

const ::types::SectionInfo&
ClientEnterMapRes::_Internal::section_info(const ClientEnterMapRes* msg) {
  return *msg->_impl_.section_info_;
}
void ClientEnterMapRes::clear_section_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.section_info_ != nullptr) {
    delete _impl_.section_info_;
  }
  _impl_.section_info_ = nullptr;
}
ClientEnterMapRes::ClientEnterMapRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientEnterMapRes)
}
ClientEnterMapRes::ClientEnterMapRes(const ClientEnterMapRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientEnterMapRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.section_info_){nullptr}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_section_info()) {
    _this->_impl_.section_info_ = new ::types::SectionInfo(*from._impl_.section_info_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:world.ClientEnterMapRes)
}

inline void ClientEnterMapRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.section_info_){nullptr}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientEnterMapRes::~ClientEnterMapRes() {
  // @@protoc_insertion_point(destructor:world.ClientEnterMapRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientEnterMapRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.section_info_;
}

void ClientEnterMapRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientEnterMapRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientEnterMapRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.section_info_ != nullptr) {
    delete _impl_.section_info_;
  }
  _impl_.section_info_ = nullptr;
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientEnterMapRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.SectionInfo section_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientEnterMapRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientEnterMapRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .types.SectionInfo section_info = 4;
  if (this->_internal_has_section_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::section_info(this),
        _Internal::section_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientEnterMapRes)
  return target;
}

size_t ClientEnterMapRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientEnterMapRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.SectionInfo section_info = 4;
  if (this->_internal_has_section_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.section_info_);
  }

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientEnterMapRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientEnterMapRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientEnterMapRes::GetClassData() const { return &_class_data_; }


void ClientEnterMapRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientEnterMapRes*>(&to_msg);
  auto& from = static_cast<const ClientEnterMapRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientEnterMapRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_section_info()) {
    _this->_internal_mutable_section_info()->::types::SectionInfo::MergeFrom(
        from._internal_section_info());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientEnterMapRes::CopyFrom(const ClientEnterMapRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientEnterMapRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEnterMapRes::IsInitialized() const {
  return true;
}

void ClientEnterMapRes::InternalSwap(ClientEnterMapRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientEnterMapRes, _impl_.result_)
      + sizeof(ClientEnterMapRes::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(ClientEnterMapRes, _impl_.section_info_)>(
          reinterpret_cast<char*>(&_impl_.section_info_),
          reinterpret_cast<char*>(&other->_impl_.section_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEnterMapRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[7]);
}

// ===================================================================

class ClientEnterMapNotify::_Internal {
 public:
  static const ::types::SectionInfo& section_info(const ClientEnterMapNotify* msg);
};

const ::types::SectionInfo&
ClientEnterMapNotify::_Internal::section_info(const ClientEnterMapNotify* msg) {
  return *msg->_impl_.section_info_;
}
void ClientEnterMapNotify::clear_section_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.section_info_ != nullptr) {
    delete _impl_.section_info_;
  }
  _impl_.section_info_ = nullptr;
}
ClientEnterMapNotify::ClientEnterMapNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientEnterMapNotify)
}
ClientEnterMapNotify::ClientEnterMapNotify(const ClientEnterMapNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientEnterMapNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.section_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_section_info()) {
    _this->_impl_.section_info_ = new ::types::SectionInfo(*from._impl_.section_info_);
  }
  // @@protoc_insertion_point(copy_constructor:world.ClientEnterMapNotify)
}

inline void ClientEnterMapNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.section_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientEnterMapNotify::~ClientEnterMapNotify() {
  // @@protoc_insertion_point(destructor:world.ClientEnterMapNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientEnterMapNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.section_info_;
}

void ClientEnterMapNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientEnterMapNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientEnterMapNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.section_info_ != nullptr) {
    delete _impl_.section_info_;
  }
  _impl_.section_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientEnterMapNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.SectionInfo section_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientEnterMapNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientEnterMapNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.SectionInfo section_info = 1;
  if (this->_internal_has_section_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::section_info(this),
        _Internal::section_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientEnterMapNotify)
  return target;
}

size_t ClientEnterMapNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientEnterMapNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.SectionInfo section_info = 1;
  if (this->_internal_has_section_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.section_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientEnterMapNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientEnterMapNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientEnterMapNotify::GetClassData() const { return &_class_data_; }


void ClientEnterMapNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientEnterMapNotify*>(&to_msg);
  auto& from = static_cast<const ClientEnterMapNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientEnterMapNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_section_info()) {
    _this->_internal_mutable_section_info()->::types::SectionInfo::MergeFrom(
        from._internal_section_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientEnterMapNotify::CopyFrom(const ClientEnterMapNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientEnterMapNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEnterMapNotify::IsInitialized() const {
  return true;
}

void ClientEnterMapNotify::InternalSwap(ClientEnterMapNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.section_info_, other->_impl_.section_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientEnterMapNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[8]);
}

// ===================================================================

class ClientLeaveMapNotify::_Internal {
 public:
  static const ::types::SectionInfo& section_info(const ClientLeaveMapNotify* msg);
};

const ::types::SectionInfo&
ClientLeaveMapNotify::_Internal::section_info(const ClientLeaveMapNotify* msg) {
  return *msg->_impl_.section_info_;
}
void ClientLeaveMapNotify::clear_section_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.section_info_ != nullptr) {
    delete _impl_.section_info_;
  }
  _impl_.section_info_ = nullptr;
}
ClientLeaveMapNotify::ClientLeaveMapNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientLeaveMapNotify)
}
ClientLeaveMapNotify::ClientLeaveMapNotify(const ClientLeaveMapNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientLeaveMapNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.section_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_section_info()) {
    _this->_impl_.section_info_ = new ::types::SectionInfo(*from._impl_.section_info_);
  }
  // @@protoc_insertion_point(copy_constructor:world.ClientLeaveMapNotify)
}

inline void ClientLeaveMapNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.section_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientLeaveMapNotify::~ClientLeaveMapNotify() {
  // @@protoc_insertion_point(destructor:world.ClientLeaveMapNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientLeaveMapNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.section_info_;
}

void ClientLeaveMapNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientLeaveMapNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientLeaveMapNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.section_info_ != nullptr) {
    delete _impl_.section_info_;
  }
  _impl_.section_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientLeaveMapNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.SectionInfo section_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_section_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientLeaveMapNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientLeaveMapNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.SectionInfo section_info = 2;
  if (this->_internal_has_section_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::section_info(this),
        _Internal::section_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientLeaveMapNotify)
  return target;
}

size_t ClientLeaveMapNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientLeaveMapNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.SectionInfo section_info = 2;
  if (this->_internal_has_section_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.section_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientLeaveMapNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientLeaveMapNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientLeaveMapNotify::GetClassData() const { return &_class_data_; }


void ClientLeaveMapNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientLeaveMapNotify*>(&to_msg);
  auto& from = static_cast<const ClientLeaveMapNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientLeaveMapNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_section_info()) {
    _this->_internal_mutable_section_info()->::types::SectionInfo::MergeFrom(
        from._internal_section_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientLeaveMapNotify::CopyFrom(const ClientLeaveMapNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientLeaveMapNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLeaveMapNotify::IsInitialized() const {
  return true;
}

void ClientLeaveMapNotify::InternalSwap(ClientLeaveMapNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.section_info_, other->_impl_.section_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientLeaveMapNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[9]);
}

// ===================================================================

class ClientMoveReq::_Internal {
 public:
  static const ::types::CharacterPose& character_pos(const ClientMoveReq* msg);
};

const ::types::CharacterPose&
ClientMoveReq::_Internal::character_pos(const ClientMoveReq* msg) {
  return *msg->_impl_.character_pos_;
}
void ClientMoveReq::clear_character_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
}
ClientMoveReq::ClientMoveReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientMoveReq)
}
ClientMoveReq::ClientMoveReq(const ClientMoveReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMoveReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.client_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character_pos()) {
    _this->_impl_.character_pos_ = new ::types::CharacterPose(*from._impl_.character_pos_);
  }
  _this->_impl_.client_timestamp_ = from._impl_.client_timestamp_;
  // @@protoc_insertion_point(copy_constructor:world.ClientMoveReq)
}

inline void ClientMoveReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.client_timestamp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientMoveReq::~ClientMoveReq() {
  // @@protoc_insertion_point(destructor:world.ClientMoveReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMoveReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.character_pos_;
}

void ClientMoveReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMoveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientMoveReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
  _impl_.client_timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMoveReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.CharacterPose character_pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float client_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.client_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientMoveReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientMoveReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.CharacterPose character_pos = 1;
  if (this->_internal_has_character_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::character_pos(this),
        _Internal::character_pos(this).GetCachedSize(), target, stream);
  }

  // float client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_client_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientMoveReq)
  return target;
}

size_t ClientMoveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientMoveReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.CharacterPose character_pos = 1;
  if (this->_internal_has_character_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_pos_);
  }

  // float client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMoveReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMoveReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMoveReq::GetClassData() const { return &_class_data_; }


void ClientMoveReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMoveReq*>(&to_msg);
  auto& from = static_cast<const ClientMoveReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientMoveReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character_pos()) {
    _this->_internal_mutable_character_pos()->::types::CharacterPose::MergeFrom(
        from._internal_character_pos());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = from._internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    _this->_internal_set_client_timestamp(from._internal_client_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMoveReq::CopyFrom(const ClientMoveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientMoveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMoveReq::IsInitialized() const {
  return true;
}

void ClientMoveReq::InternalSwap(ClientMoveReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientMoveReq, _impl_.client_timestamp_)
      + sizeof(ClientMoveReq::_impl_.client_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ClientMoveReq, _impl_.character_pos_)>(
          reinterpret_cast<char*>(&_impl_.character_pos_),
          reinterpret_cast<char*>(&other->_impl_.character_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMoveReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[10]);
}

// ===================================================================

class ClientMoveRes::_Internal {
 public:
  static const ::types::CharacterPose& character_pos(const ClientMoveRes* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& server_timestamp(const ClientMoveRes* msg);
};

const ::types::CharacterPose&
ClientMoveRes::_Internal::character_pos(const ClientMoveRes* msg) {
  return *msg->_impl_.character_pos_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ClientMoveRes::_Internal::server_timestamp(const ClientMoveRes* msg) {
  return *msg->_impl_.server_timestamp_;
}
void ClientMoveRes::clear_character_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
}
void ClientMoveRes::clear_server_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_timestamp_ != nullptr) {
    delete _impl_.server_timestamp_;
  }
  _impl_.server_timestamp_ = nullptr;
}
ClientMoveRes::ClientMoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientMoveRes)
}
ClientMoveRes::ClientMoveRes(const ClientMoveRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMoveRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.server_timestamp_){nullptr}
    , decltype(_impl_.client_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character_pos()) {
    _this->_impl_.character_pos_ = new ::types::CharacterPose(*from._impl_.character_pos_);
  }
  if (from._internal_has_server_timestamp()) {
    _this->_impl_.server_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.server_timestamp_);
  }
  _this->_impl_.client_timestamp_ = from._impl_.client_timestamp_;
  // @@protoc_insertion_point(copy_constructor:world.ClientMoveRes)
}

inline void ClientMoveRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.server_timestamp_){nullptr}
    , decltype(_impl_.client_timestamp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientMoveRes::~ClientMoveRes() {
  // @@protoc_insertion_point(destructor:world.ClientMoveRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMoveRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.character_pos_;
  if (this != internal_default_instance()) delete _impl_.server_timestamp_;
}

void ClientMoveRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMoveRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientMoveRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_timestamp_ != nullptr) {
    delete _impl_.server_timestamp_;
  }
  _impl_.server_timestamp_ = nullptr;
  _impl_.client_timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMoveRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.CharacterPose character_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float client_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.client_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp server_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientMoveRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientMoveRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.CharacterPose character_pos = 2;
  if (this->_internal_has_character_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::character_pos(this),
        _Internal::character_pos(this).GetCachedSize(), target, stream);
  }

  // float client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_client_timestamp(), target);
  }

  // .google.protobuf.Timestamp server_timestamp = 4;
  if (this->_internal_has_server_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::server_timestamp(this),
        _Internal::server_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientMoveRes)
  return target;
}

size_t ClientMoveRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientMoveRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.CharacterPose character_pos = 2;
  if (this->_internal_has_character_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_pos_);
  }

  // .google.protobuf.Timestamp server_timestamp = 4;
  if (this->_internal_has_server_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_timestamp_);
  }

  // float client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMoveRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMoveRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMoveRes::GetClassData() const { return &_class_data_; }


void ClientMoveRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMoveRes*>(&to_msg);
  auto& from = static_cast<const ClientMoveRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientMoveRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character_pos()) {
    _this->_internal_mutable_character_pos()->::types::CharacterPose::MergeFrom(
        from._internal_character_pos());
  }
  if (from._internal_has_server_timestamp()) {
    _this->_internal_mutable_server_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_server_timestamp());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = from._internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    _this->_internal_set_client_timestamp(from._internal_client_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMoveRes::CopyFrom(const ClientMoveRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientMoveRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMoveRes::IsInitialized() const {
  return true;
}

void ClientMoveRes::InternalSwap(ClientMoveRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientMoveRes, _impl_.client_timestamp_)
      + sizeof(ClientMoveRes::_impl_.client_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ClientMoveRes, _impl_.character_pos_)>(
          reinterpret_cast<char*>(&_impl_.character_pos_),
          reinterpret_cast<char*>(&other->_impl_.character_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMoveRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[11]);
}

// ===================================================================

class ClientActionReq::_Internal {
 public:
  static const ::types::ClientAction& client_action(const ClientActionReq* msg);
};

const ::types::ClientAction&
ClientActionReq::_Internal::client_action(const ClientActionReq* msg) {
  return *msg->_impl_.client_action_;
}
void ClientActionReq::clear_client_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
}
ClientActionReq::ClientActionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientActionReq)
}
ClientActionReq::ClientActionReq(const ClientActionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientActionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.client_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client_action()) {
    _this->_impl_.client_action_ = new ::types::ClientAction(*from._impl_.client_action_);
  }
  _this->_impl_.client_timestamp_ = from._impl_.client_timestamp_;
  // @@protoc_insertion_point(copy_constructor:world.ClientActionReq)
}

inline void ClientActionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.client_timestamp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientActionReq::~ClientActionReq() {
  // @@protoc_insertion_point(destructor:world.ClientActionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientActionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.client_action_;
}

void ClientActionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientActionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientActionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
  _impl_.client_timestamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientActionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.ClientAction client_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float client_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.client_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientActionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientActionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.ClientAction client_action = 1;
  if (this->_internal_has_client_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client_action(this),
        _Internal::client_action(this).GetCachedSize(), target, stream);
  }

  // float client_timestamp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_client_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientActionReq)
  return target;
}

size_t ClientActionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientActionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.ClientAction client_action = 1;
  if (this->_internal_has_client_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_action_);
  }

  // float client_timestamp = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientActionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientActionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientActionReq::GetClassData() const { return &_class_data_; }


void ClientActionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientActionReq*>(&to_msg);
  auto& from = static_cast<const ClientActionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientActionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_action()) {
    _this->_internal_mutable_client_action()->::types::ClientAction::MergeFrom(
        from._internal_client_action());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = from._internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    _this->_internal_set_client_timestamp(from._internal_client_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientActionReq::CopyFrom(const ClientActionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientActionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientActionReq::IsInitialized() const {
  return true;
}

void ClientActionReq::InternalSwap(ClientActionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientActionReq, _impl_.client_timestamp_)
      + sizeof(ClientActionReq::_impl_.client_timestamp_)
      - PROTOBUF_FIELD_OFFSET(ClientActionReq, _impl_.client_action_)>(
          reinterpret_cast<char*>(&_impl_.client_action_),
          reinterpret_cast<char*>(&other->_impl_.client_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientActionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[12]);
}

// ===================================================================

class ClientActionRes::_Internal {
 public:
  static const ::types::ClientAction& client_action(const ClientActionRes* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& server_timestamp(const ClientActionRes* msg);
};

const ::types::ClientAction&
ClientActionRes::_Internal::client_action(const ClientActionRes* msg) {
  return *msg->_impl_.client_action_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ClientActionRes::_Internal::server_timestamp(const ClientActionRes* msg) {
  return *msg->_impl_.server_timestamp_;
}
void ClientActionRes::clear_client_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
}
void ClientActionRes::clear_server_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_timestamp_ != nullptr) {
    delete _impl_.server_timestamp_;
  }
  _impl_.server_timestamp_ = nullptr;
}
ClientActionRes::ClientActionRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ClientActionRes)
}
ClientActionRes::ClientActionRes(const ClientActionRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientActionRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.server_timestamp_){nullptr}
    , decltype(_impl_.result_){}
    , decltype(_impl_.client_timestamp_){}
    , decltype(_impl_.action_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client_action()) {
    _this->_impl_.client_action_ = new ::types::ClientAction(*from._impl_.client_action_);
  }
  if (from._internal_has_server_timestamp()) {
    _this->_impl_.server_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.server_timestamp_);
  }
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.action_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.action_id_));
  // @@protoc_insertion_point(copy_constructor:world.ClientActionRes)
}

inline void ClientActionRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.server_timestamp_){nullptr}
    , decltype(_impl_.result_){0}
    , decltype(_impl_.client_timestamp_){0}
    , decltype(_impl_.action_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientActionRes::~ClientActionRes() {
  // @@protoc_insertion_point(destructor:world.ClientActionRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientActionRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.client_action_;
  if (this != internal_default_instance()) delete _impl_.server_timestamp_;
}

void ClientActionRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientActionRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ClientActionRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.server_timestamp_ != nullptr) {
    delete _impl_.server_timestamp_;
  }
  _impl_.server_timestamp_ = nullptr;
  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.action_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.action_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientActionRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.ClientAction client_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float client_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.client_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp server_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 action_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientActionRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ClientActionRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .types.ClientAction client_action = 2;
  if (this->_internal_has_client_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::client_action(this),
        _Internal::client_action(this).GetCachedSize(), target, stream);
  }

  // float client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_client_timestamp(), target);
  }

  // .google.protobuf.Timestamp server_timestamp = 4;
  if (this->_internal_has_server_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::server_timestamp(this),
        _Internal::server_timestamp(this).GetCachedSize(), target, stream);
  }

  // int64 action_id = 5;
  if (this->_internal_action_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_action_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ClientActionRes)
  return target;
}

size_t ClientActionRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ClientActionRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.ClientAction client_action = 2;
  if (this->_internal_has_client_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_action_);
  }

  // .google.protobuf.Timestamp server_timestamp = 4;
  if (this->_internal_has_server_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_timestamp_);
  }

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // float client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    total_size += 1 + 4;
  }

  // int64 action_id = 5;
  if (this->_internal_action_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_action_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientActionRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientActionRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientActionRes::GetClassData() const { return &_class_data_; }


void ClientActionRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientActionRes*>(&to_msg);
  auto& from = static_cast<const ClientActionRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ClientActionRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_action()) {
    _this->_internal_mutable_client_action()->::types::ClientAction::MergeFrom(
        from._internal_client_action());
  }
  if (from._internal_has_server_timestamp()) {
    _this->_internal_mutable_server_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_server_timestamp());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = from._internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    _this->_internal_set_client_timestamp(from._internal_client_timestamp());
  }
  if (from._internal_action_id() != 0) {
    _this->_internal_set_action_id(from._internal_action_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientActionRes::CopyFrom(const ClientActionRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ClientActionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientActionRes::IsInitialized() const {
  return true;
}

void ClientActionRes::InternalSwap(ClientActionRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientActionRes, _impl_.action_id_)
      + sizeof(ClientActionRes::_impl_.action_id_)
      - PROTOBUF_FIELD_OFFSET(ClientActionRes, _impl_.client_action_)>(
          reinterpret_cast<char*>(&_impl_.client_action_),
          reinterpret_cast<char*>(&other->_impl_.client_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientActionRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[13]);
}

// ===================================================================

class OtherClientActionNotify::_Internal {
 public:
  static const ::types::ClientAction& client_action(const OtherClientActionNotify* msg);
};

const ::types::ClientAction&
OtherClientActionNotify::_Internal::client_action(const OtherClientActionNotify* msg) {
  return *msg->_impl_.client_action_;
}
void OtherClientActionNotify::clear_client_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
}
OtherClientActionNotify::OtherClientActionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.OtherClientActionNotify)
}
OtherClientActionNotify::OtherClientActionNotify(const OtherClientActionNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OtherClientActionNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.character_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client_action()) {
    _this->_impl_.client_action_ = new ::types::ClientAction(*from._impl_.client_action_);
  }
  _this->_impl_.character_id_ = from._impl_.character_id_;
  // @@protoc_insertion_point(copy_constructor:world.OtherClientActionNotify)
}

inline void OtherClientActionNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.character_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OtherClientActionNotify::~OtherClientActionNotify() {
  // @@protoc_insertion_point(destructor:world.OtherClientActionNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OtherClientActionNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.client_action_;
}

void OtherClientActionNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OtherClientActionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.OtherClientActionNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
  _impl_.character_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherClientActionNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.ClientAction client_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OtherClientActionNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.OtherClientActionNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // .types.ClientAction client_action = 2;
  if (this->_internal_has_client_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::client_action(this),
        _Internal::client_action(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.OtherClientActionNotify)
  return target;
}

size_t OtherClientActionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.OtherClientActionNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.ClientAction client_action = 2;
  if (this->_internal_has_client_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_action_);
  }

  // int64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OtherClientActionNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OtherClientActionNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OtherClientActionNotify::GetClassData() const { return &_class_data_; }


void OtherClientActionNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OtherClientActionNotify*>(&to_msg);
  auto& from = static_cast<const OtherClientActionNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.OtherClientActionNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client_action()) {
    _this->_internal_mutable_client_action()->::types::ClientAction::MergeFrom(
        from._internal_client_action());
  }
  if (from._internal_character_id() != 0) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OtherClientActionNotify::CopyFrom(const OtherClientActionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.OtherClientActionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherClientActionNotify::IsInitialized() const {
  return true;
}

void OtherClientActionNotify::InternalSwap(OtherClientActionNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OtherClientActionNotify, _impl_.character_id_)
      + sizeof(OtherClientActionNotify::_impl_.character_id_)
      - PROTOBUF_FIELD_OFFSET(OtherClientActionNotify, _impl_.client_action_)>(
          reinterpret_cast<char*>(&_impl_.client_action_),
          reinterpret_cast<char*>(&other->_impl_.client_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherClientActionNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[14]);
}

// ===================================================================

class OtherClientEnterNotify::_Internal {
 public:
  static const ::types::PcInfo& pc_info(const OtherClientEnterNotify* msg);
};

const ::types::PcInfo&
OtherClientEnterNotify::_Internal::pc_info(const OtherClientEnterNotify* msg) {
  return *msg->_impl_.pc_info_;
}
void OtherClientEnterNotify::clear_pc_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.pc_info_ != nullptr) {
    delete _impl_.pc_info_;
  }
  _impl_.pc_info_ = nullptr;
}
OtherClientEnterNotify::OtherClientEnterNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.OtherClientEnterNotify)
}
OtherClientEnterNotify::OtherClientEnterNotify(const OtherClientEnterNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OtherClientEnterNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pc_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pc_info()) {
    _this->_impl_.pc_info_ = new ::types::PcInfo(*from._impl_.pc_info_);
  }
  // @@protoc_insertion_point(copy_constructor:world.OtherClientEnterNotify)
}

inline void OtherClientEnterNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pc_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OtherClientEnterNotify::~OtherClientEnterNotify() {
  // @@protoc_insertion_point(destructor:world.OtherClientEnterNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OtherClientEnterNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pc_info_;
}

void OtherClientEnterNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OtherClientEnterNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.OtherClientEnterNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pc_info_ != nullptr) {
    delete _impl_.pc_info_;
  }
  _impl_.pc_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherClientEnterNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.PcInfo pc_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pc_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OtherClientEnterNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.OtherClientEnterNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.PcInfo pc_info = 1;
  if (this->_internal_has_pc_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pc_info(this),
        _Internal::pc_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.OtherClientEnterNotify)
  return target;
}

size_t OtherClientEnterNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.OtherClientEnterNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.PcInfo pc_info = 1;
  if (this->_internal_has_pc_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pc_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OtherClientEnterNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OtherClientEnterNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OtherClientEnterNotify::GetClassData() const { return &_class_data_; }


void OtherClientEnterNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OtherClientEnterNotify*>(&to_msg);
  auto& from = static_cast<const OtherClientEnterNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.OtherClientEnterNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pc_info()) {
    _this->_internal_mutable_pc_info()->::types::PcInfo::MergeFrom(
        from._internal_pc_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OtherClientEnterNotify::CopyFrom(const OtherClientEnterNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.OtherClientEnterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherClientEnterNotify::IsInitialized() const {
  return true;
}

void OtherClientEnterNotify::InternalSwap(OtherClientEnterNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.pc_info_, other->_impl_.pc_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherClientEnterNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[15]);
}

// ===================================================================

class OtherClientLeaveNotify::_Internal {
 public:
};

OtherClientLeaveNotify::OtherClientLeaveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.OtherClientLeaveNotify)
}
OtherClientLeaveNotify::OtherClientLeaveNotify(const OtherClientLeaveNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OtherClientLeaveNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.character_id_ = from._impl_.character_id_;
  // @@protoc_insertion_point(copy_constructor:world.OtherClientLeaveNotify)
}

inline void OtherClientLeaveNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OtherClientLeaveNotify::~OtherClientLeaveNotify() {
  // @@protoc_insertion_point(destructor:world.OtherClientLeaveNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OtherClientLeaveNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OtherClientLeaveNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OtherClientLeaveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.OtherClientLeaveNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherClientLeaveNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OtherClientLeaveNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.OtherClientLeaveNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.OtherClientLeaveNotify)
  return target;
}

size_t OtherClientLeaveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.OtherClientLeaveNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OtherClientLeaveNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OtherClientLeaveNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OtherClientLeaveNotify::GetClassData() const { return &_class_data_; }


void OtherClientLeaveNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OtherClientLeaveNotify*>(&to_msg);
  auto& from = static_cast<const OtherClientLeaveNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.OtherClientLeaveNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_character_id() != 0) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OtherClientLeaveNotify::CopyFrom(const OtherClientLeaveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.OtherClientLeaveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherClientLeaveNotify::IsInitialized() const {
  return true;
}

void OtherClientLeaveNotify::InternalSwap(OtherClientLeaveNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.character_id_, other->_impl_.character_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherClientLeaveNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[16]);
}

// ===================================================================

class OtherClientMoveNotify::_Internal {
 public:
  static const ::types::CharacterPose& character_pos(const OtherClientMoveNotify* msg);
  static const ::types::ClientAction& client_action(const OtherClientMoveNotify* msg);
};

const ::types::CharacterPose&
OtherClientMoveNotify::_Internal::character_pos(const OtherClientMoveNotify* msg) {
  return *msg->_impl_.character_pos_;
}
const ::types::ClientAction&
OtherClientMoveNotify::_Internal::client_action(const OtherClientMoveNotify* msg) {
  return *msg->_impl_.client_action_;
}
void OtherClientMoveNotify::clear_character_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
}
void OtherClientMoveNotify::clear_client_action() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
}
OtherClientMoveNotify::OtherClientMoveNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.OtherClientMoveNotify)
}
OtherClientMoveNotify::OtherClientMoveNotify(const OtherClientMoveNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OtherClientMoveNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.character_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character_pos()) {
    _this->_impl_.character_pos_ = new ::types::CharacterPose(*from._impl_.character_pos_);
  }
  if (from._internal_has_client_action()) {
    _this->_impl_.client_action_ = new ::types::ClientAction(*from._impl_.client_action_);
  }
  _this->_impl_.character_id_ = from._impl_.character_id_;
  // @@protoc_insertion_point(copy_constructor:world.OtherClientMoveNotify)
}

inline void OtherClientMoveNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.character_pos_){nullptr}
    , decltype(_impl_.client_action_){nullptr}
    , decltype(_impl_.character_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OtherClientMoveNotify::~OtherClientMoveNotify() {
  // @@protoc_insertion_point(destructor:world.OtherClientMoveNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OtherClientMoveNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.character_pos_;
  if (this != internal_default_instance()) delete _impl_.client_action_;
}

void OtherClientMoveNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OtherClientMoveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.OtherClientMoveNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.character_pos_ != nullptr) {
    delete _impl_.character_pos_;
  }
  _impl_.character_pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.client_action_ != nullptr) {
    delete _impl_.client_action_;
  }
  _impl_.client_action_ = nullptr;
  _impl_.character_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherClientMoveNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.CharacterPose character_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.ClientAction client_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OtherClientMoveNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.OtherClientMoveNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // .types.CharacterPose character_pos = 2;
  if (this->_internal_has_character_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::character_pos(this),
        _Internal::character_pos(this).GetCachedSize(), target, stream);
  }

  // .types.ClientAction client_action = 3;
  if (this->_internal_has_client_action()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::client_action(this),
        _Internal::client_action(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.OtherClientMoveNotify)
  return target;
}

size_t OtherClientMoveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.OtherClientMoveNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.CharacterPose character_pos = 2;
  if (this->_internal_has_character_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_pos_);
  }

  // .types.ClientAction client_action = 3;
  if (this->_internal_has_client_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_action_);
  }

  // int64 character_id = 1;
  if (this->_internal_character_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OtherClientMoveNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OtherClientMoveNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OtherClientMoveNotify::GetClassData() const { return &_class_data_; }


void OtherClientMoveNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OtherClientMoveNotify*>(&to_msg);
  auto& from = static_cast<const OtherClientMoveNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.OtherClientMoveNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_character_pos()) {
    _this->_internal_mutable_character_pos()->::types::CharacterPose::MergeFrom(
        from._internal_character_pos());
  }
  if (from._internal_has_client_action()) {
    _this->_internal_mutable_client_action()->::types::ClientAction::MergeFrom(
        from._internal_client_action());
  }
  if (from._internal_character_id() != 0) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OtherClientMoveNotify::CopyFrom(const OtherClientMoveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.OtherClientMoveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherClientMoveNotify::IsInitialized() const {
  return true;
}

void OtherClientMoveNotify::InternalSwap(OtherClientMoveNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OtherClientMoveNotify, _impl_.character_id_)
      + sizeof(OtherClientMoveNotify::_impl_.character_id_)
      - PROTOBUF_FIELD_OFFSET(OtherClientMoveNotify, _impl_.character_pos_)>(
          reinterpret_cast<char*>(&_impl_.character_pos_),
          reinterpret_cast<char*>(&other->_impl_.character_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherClientMoveNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[17]);
}

// ===================================================================

class ChangeServerTickIntervalReq::_Internal {
 public:
};

ChangeServerTickIntervalReq::ChangeServerTickIntervalReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ChangeServerTickIntervalReq)
}
ChangeServerTickIntervalReq::ChangeServerTickIntervalReq(const ChangeServerTickIntervalReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeServerTickIntervalReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_tick_interval_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_tick_interval_ms_ = from._impl_.server_tick_interval_ms_;
  // @@protoc_insertion_point(copy_constructor:world.ChangeServerTickIntervalReq)
}

inline void ChangeServerTickIntervalReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_tick_interval_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChangeServerTickIntervalReq::~ChangeServerTickIntervalReq() {
  // @@protoc_insertion_point(destructor:world.ChangeServerTickIntervalReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeServerTickIntervalReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeServerTickIntervalReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeServerTickIntervalReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ChangeServerTickIntervalReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_tick_interval_ms_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeServerTickIntervalReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_tick_interval_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_tick_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeServerTickIntervalReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ChangeServerTickIntervalReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_tick_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ChangeServerTickIntervalReq)
  return target;
}

size_t ChangeServerTickIntervalReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ChangeServerTickIntervalReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_tick_interval_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeServerTickIntervalReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeServerTickIntervalReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeServerTickIntervalReq::GetClassData() const { return &_class_data_; }


void ChangeServerTickIntervalReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeServerTickIntervalReq*>(&to_msg);
  auto& from = static_cast<const ChangeServerTickIntervalReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ChangeServerTickIntervalReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_tick_interval_ms() != 0) {
    _this->_internal_set_server_tick_interval_ms(from._internal_server_tick_interval_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeServerTickIntervalReq::CopyFrom(const ChangeServerTickIntervalReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ChangeServerTickIntervalReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeServerTickIntervalReq::IsInitialized() const {
  return true;
}

void ChangeServerTickIntervalReq::InternalSwap(ChangeServerTickIntervalReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.server_tick_interval_ms_, other->_impl_.server_tick_interval_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeServerTickIntervalReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[18]);
}

// ===================================================================

class ChangeServerTickIntervalRes::_Internal {
 public:
};

ChangeServerTickIntervalRes::ChangeServerTickIntervalRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ChangeServerTickIntervalRes)
}
ChangeServerTickIntervalRes::ChangeServerTickIntervalRes(const ChangeServerTickIntervalRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChangeServerTickIntervalRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_tick_interval_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_tick_interval_ms_ = from._impl_.server_tick_interval_ms_;
  // @@protoc_insertion_point(copy_constructor:world.ChangeServerTickIntervalRes)
}

inline void ChangeServerTickIntervalRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_tick_interval_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ChangeServerTickIntervalRes::~ChangeServerTickIntervalRes() {
  // @@protoc_insertion_point(destructor:world.ChangeServerTickIntervalRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeServerTickIntervalRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeServerTickIntervalRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeServerTickIntervalRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ChangeServerTickIntervalRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_tick_interval_ms_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeServerTickIntervalRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_tick_interval_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_tick_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeServerTickIntervalRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ChangeServerTickIntervalRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_tick_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ChangeServerTickIntervalRes)
  return target;
}

size_t ChangeServerTickIntervalRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ChangeServerTickIntervalRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_tick_interval_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeServerTickIntervalRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChangeServerTickIntervalRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeServerTickIntervalRes::GetClassData() const { return &_class_data_; }


void ChangeServerTickIntervalRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChangeServerTickIntervalRes*>(&to_msg);
  auto& from = static_cast<const ChangeServerTickIntervalRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ChangeServerTickIntervalRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_tick_interval_ms() != 0) {
    _this->_internal_set_server_tick_interval_ms(from._internal_server_tick_interval_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeServerTickIntervalRes::CopyFrom(const ChangeServerTickIntervalRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ChangeServerTickIntervalRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeServerTickIntervalRes::IsInitialized() const {
  return true;
}

void ChangeServerTickIntervalRes::InternalSwap(ChangeServerTickIntervalRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.server_tick_interval_ms_, other->_impl_.server_tick_interval_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeServerTickIntervalRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[19]);
}

// ===================================================================

class ServerTickIntervalChangedNotify::_Internal {
 public:
};

ServerTickIntervalChangedNotify::ServerTickIntervalChangedNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ServerTickIntervalChangedNotify)
}
ServerTickIntervalChangedNotify::ServerTickIntervalChangedNotify(const ServerTickIntervalChangedNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerTickIntervalChangedNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_tick_interval_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_tick_interval_ms_ = from._impl_.server_tick_interval_ms_;
  // @@protoc_insertion_point(copy_constructor:world.ServerTickIntervalChangedNotify)
}

inline void ServerTickIntervalChangedNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_tick_interval_ms_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerTickIntervalChangedNotify::~ServerTickIntervalChangedNotify() {
  // @@protoc_insertion_point(destructor:world.ServerTickIntervalChangedNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerTickIntervalChangedNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerTickIntervalChangedNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerTickIntervalChangedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ServerTickIntervalChangedNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_tick_interval_ms_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerTickIntervalChangedNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_tick_interval_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_tick_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerTickIntervalChangedNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ServerTickIntervalChangedNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_tick_interval_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ServerTickIntervalChangedNotify)
  return target;
}

size_t ServerTickIntervalChangedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ServerTickIntervalChangedNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_tick_interval_ms = 2;
  if (this->_internal_server_tick_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_tick_interval_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerTickIntervalChangedNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerTickIntervalChangedNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerTickIntervalChangedNotify::GetClassData() const { return &_class_data_; }


void ServerTickIntervalChangedNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerTickIntervalChangedNotify*>(&to_msg);
  auto& from = static_cast<const ServerTickIntervalChangedNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ServerTickIntervalChangedNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_tick_interval_ms() != 0) {
    _this->_internal_set_server_tick_interval_ms(from._internal_server_tick_interval_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerTickIntervalChangedNotify::CopyFrom(const ServerTickIntervalChangedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ServerTickIntervalChangedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTickIntervalChangedNotify::IsInitialized() const {
  return true;
}

void ServerTickIntervalChangedNotify::InternalSwap(ServerTickIntervalChangedNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.server_tick_interval_ms_, other->_impl_.server_tick_interval_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerTickIntervalChangedNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[20]);
}

// ===================================================================

class SectionOwnershipChangedNotify::_Internal {
 public:
};

SectionOwnershipChangedNotify::SectionOwnershipChangedNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.SectionOwnershipChangedNotify)
}
SectionOwnershipChangedNotify::SectionOwnershipChangedNotify(const SectionOwnershipChangedNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SectionOwnershipChangedNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_character_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.owner_character_id_ = from._impl_.owner_character_id_;
  // @@protoc_insertion_point(copy_constructor:world.SectionOwnershipChangedNotify)
}

inline void SectionOwnershipChangedNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_character_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SectionOwnershipChangedNotify::~SectionOwnershipChangedNotify() {
  // @@protoc_insertion_point(destructor:world.SectionOwnershipChangedNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SectionOwnershipChangedNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SectionOwnershipChangedNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SectionOwnershipChangedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SectionOwnershipChangedNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_character_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SectionOwnershipChangedNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 owner_character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SectionOwnershipChangedNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SectionOwnershipChangedNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 owner_character_id = 1;
  if (this->_internal_owner_character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_owner_character_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SectionOwnershipChangedNotify)
  return target;
}

size_t SectionOwnershipChangedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SectionOwnershipChangedNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 owner_character_id = 1;
  if (this->_internal_owner_character_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_owner_character_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SectionOwnershipChangedNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SectionOwnershipChangedNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SectionOwnershipChangedNotify::GetClassData() const { return &_class_data_; }


void SectionOwnershipChangedNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SectionOwnershipChangedNotify*>(&to_msg);
  auto& from = static_cast<const SectionOwnershipChangedNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.SectionOwnershipChangedNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_owner_character_id() != 0) {
    _this->_internal_set_owner_character_id(from._internal_owner_character_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SectionOwnershipChangedNotify::CopyFrom(const SectionOwnershipChangedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SectionOwnershipChangedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SectionOwnershipChangedNotify::IsInitialized() const {
  return true;
}

void SectionOwnershipChangedNotify::InternalSwap(SectionOwnershipChangedNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.owner_character_id_, other->_impl_.owner_character_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SectionOwnershipChangedNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[21]);
}

// ===================================================================

class SpawnNpcOnSectionReq::_Internal {
 public:
};

void SpawnNpcOnSectionReq::clear_npc_spawn_infos() {
  _impl_.npc_spawn_infos_.Clear();
}
SpawnNpcOnSectionReq::SpawnNpcOnSectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.SpawnNpcOnSectionReq)
}
SpawnNpcOnSectionReq::SpawnNpcOnSectionReq(const SpawnNpcOnSectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnNpcOnSectionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.npc_spawn_infos_){from._impl_.npc_spawn_infos_}
    , decltype(_impl_.spawner_id_){}
    , decltype(_impl_.client_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.spawner_id_, &from._impl_.spawner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.client_timestamp_) -
    reinterpret_cast<char*>(&_impl_.spawner_id_)) + sizeof(_impl_.client_timestamp_));
  // @@protoc_insertion_point(copy_constructor:world.SpawnNpcOnSectionReq)
}

inline void SpawnNpcOnSectionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.npc_spawn_infos_){arena}
    , decltype(_impl_.spawner_id_){0}
    , decltype(_impl_.client_timestamp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawnNpcOnSectionReq::~SpawnNpcOnSectionReq() {
  // @@protoc_insertion_point(destructor:world.SpawnNpcOnSectionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnNpcOnSectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.npc_spawn_infos_.~RepeatedPtrField();
}

void SpawnNpcOnSectionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnNpcOnSectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SpawnNpcOnSectionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.npc_spawn_infos_.Clear();
  ::memset(&_impl_.spawner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.client_timestamp_) -
      reinterpret_cast<char*>(&_impl_.spawner_id_)) + sizeof(_impl_.client_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnNpcOnSectionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 spawner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.spawner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.NpcSpawnInfo npc_spawn_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_npc_spawn_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // float client_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.client_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnNpcOnSectionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SpawnNpcOnSectionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spawner_id = 1;
  if (this->_internal_spawner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_spawner_id(), target);
  }

  // repeated .types.NpcSpawnInfo npc_spawn_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_npc_spawn_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_npc_spawn_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // float client_timestamp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_client_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SpawnNpcOnSectionReq)
  return target;
}

size_t SpawnNpcOnSectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SpawnNpcOnSectionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.NpcSpawnInfo npc_spawn_infos = 2;
  total_size += 1UL * this->_internal_npc_spawn_infos_size();
  for (const auto& msg : this->_impl_.npc_spawn_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 spawner_id = 1;
  if (this->_internal_spawner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spawner_id());
  }

  // float client_timestamp = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = this->_internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnNpcOnSectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnNpcOnSectionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnNpcOnSectionReq::GetClassData() const { return &_class_data_; }


void SpawnNpcOnSectionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnNpcOnSectionReq*>(&to_msg);
  auto& from = static_cast<const SpawnNpcOnSectionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.SpawnNpcOnSectionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.npc_spawn_infos_.MergeFrom(from._impl_.npc_spawn_infos_);
  if (from._internal_spawner_id() != 0) {
    _this->_internal_set_spawner_id(from._internal_spawner_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_client_timestamp = from._internal_client_timestamp();
  uint32_t raw_client_timestamp;
  memcpy(&raw_client_timestamp, &tmp_client_timestamp, sizeof(tmp_client_timestamp));
  if (raw_client_timestamp != 0) {
    _this->_internal_set_client_timestamp(from._internal_client_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnNpcOnSectionReq::CopyFrom(const SpawnNpcOnSectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SpawnNpcOnSectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnNpcOnSectionReq::IsInitialized() const {
  return true;
}

void SpawnNpcOnSectionReq::InternalSwap(SpawnNpcOnSectionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.npc_spawn_infos_.InternalSwap(&other->_impl_.npc_spawn_infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnNpcOnSectionReq, _impl_.client_timestamp_)
      + sizeof(SpawnNpcOnSectionReq::_impl_.client_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SpawnNpcOnSectionReq, _impl_.spawner_id_)>(
          reinterpret_cast<char*>(&_impl_.spawner_id_),
          reinterpret_cast<char*>(&other->_impl_.spawner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnNpcOnSectionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[22]);
}

// ===================================================================

class SpawnNpcOnSectionRes::_Internal {
 public:
};

SpawnNpcOnSectionRes::SpawnNpcOnSectionRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.SpawnNpcOnSectionRes)
}
SpawnNpcOnSectionRes::SpawnNpcOnSectionRes(const SpawnNpcOnSectionRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnNpcOnSectionRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.spawner_id_){}
    , decltype(_impl_.next_client_timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.next_client_timestamp_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.next_client_timestamp_));
  // @@protoc_insertion_point(copy_constructor:world.SpawnNpcOnSectionRes)
}

inline void SpawnNpcOnSectionRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.spawner_id_){0}
    , decltype(_impl_.next_client_timestamp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawnNpcOnSectionRes::~SpawnNpcOnSectionRes() {
  // @@protoc_insertion_point(destructor:world.SpawnNpcOnSectionRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnNpcOnSectionRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpawnNpcOnSectionRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnNpcOnSectionRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SpawnNpcOnSectionRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.next_client_timestamp_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.next_client_timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnNpcOnSectionRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 spawner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.spawner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float next_client_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.next_client_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnNpcOnSectionRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SpawnNpcOnSectionRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 spawner_id = 2;
  if (this->_internal_spawner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_spawner_id(), target);
  }

  // float next_client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_next_client_timestamp = this->_internal_next_client_timestamp();
  uint32_t raw_next_client_timestamp;
  memcpy(&raw_next_client_timestamp, &tmp_next_client_timestamp, sizeof(tmp_next_client_timestamp));
  if (raw_next_client_timestamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_next_client_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SpawnNpcOnSectionRes)
  return target;
}

size_t SpawnNpcOnSectionRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SpawnNpcOnSectionRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 spawner_id = 2;
  if (this->_internal_spawner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spawner_id());
  }

  // float next_client_timestamp = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_next_client_timestamp = this->_internal_next_client_timestamp();
  uint32_t raw_next_client_timestamp;
  memcpy(&raw_next_client_timestamp, &tmp_next_client_timestamp, sizeof(tmp_next_client_timestamp));
  if (raw_next_client_timestamp != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnNpcOnSectionRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnNpcOnSectionRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnNpcOnSectionRes::GetClassData() const { return &_class_data_; }


void SpawnNpcOnSectionRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnNpcOnSectionRes*>(&to_msg);
  auto& from = static_cast<const SpawnNpcOnSectionRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.SpawnNpcOnSectionRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_spawner_id() != 0) {
    _this->_internal_set_spawner_id(from._internal_spawner_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_next_client_timestamp = from._internal_next_client_timestamp();
  uint32_t raw_next_client_timestamp;
  memcpy(&raw_next_client_timestamp, &tmp_next_client_timestamp, sizeof(tmp_next_client_timestamp));
  if (raw_next_client_timestamp != 0) {
    _this->_internal_set_next_client_timestamp(from._internal_next_client_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnNpcOnSectionRes::CopyFrom(const SpawnNpcOnSectionRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SpawnNpcOnSectionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnNpcOnSectionRes::IsInitialized() const {
  return true;
}

void SpawnNpcOnSectionRes::InternalSwap(SpawnNpcOnSectionRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnNpcOnSectionRes, _impl_.next_client_timestamp_)
      + sizeof(SpawnNpcOnSectionRes::_impl_.next_client_timestamp_)
      - PROTOBUF_FIELD_OFFSET(SpawnNpcOnSectionRes, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnNpcOnSectionRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[23]);
}

// ===================================================================

class SpawnNpcOnSectionNotify::_Internal {
 public:
};

void SpawnNpcOnSectionNotify::clear_npc_infos() {
  _impl_.npc_infos_.Clear();
}
SpawnNpcOnSectionNotify::SpawnNpcOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.SpawnNpcOnSectionNotify)
}
SpawnNpcOnSectionNotify::SpawnNpcOnSectionNotify(const SpawnNpcOnSectionNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnNpcOnSectionNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.npc_infos_){from._impl_.npc_infos_}
    , decltype(_impl_.spawner_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.spawner_id_ = from._impl_.spawner_id_;
  // @@protoc_insertion_point(copy_constructor:world.SpawnNpcOnSectionNotify)
}

inline void SpawnNpcOnSectionNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.npc_infos_){arena}
    , decltype(_impl_.spawner_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawnNpcOnSectionNotify::~SpawnNpcOnSectionNotify() {
  // @@protoc_insertion_point(destructor:world.SpawnNpcOnSectionNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnNpcOnSectionNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.npc_infos_.~RepeatedPtrField();
}

void SpawnNpcOnSectionNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnNpcOnSectionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SpawnNpcOnSectionNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.npc_infos_.Clear();
  _impl_.spawner_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnNpcOnSectionNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 spawner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.spawner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .types.NpcInfo npc_infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_npc_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnNpcOnSectionNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SpawnNpcOnSectionNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 spawner_id = 1;
  if (this->_internal_spawner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_spawner_id(), target);
  }

  // repeated .types.NpcInfo npc_infos = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_npc_infos_size()); i < n; i++) {
    const auto& repfield = this->_internal_npc_infos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SpawnNpcOnSectionNotify)
  return target;
}

size_t SpawnNpcOnSectionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SpawnNpcOnSectionNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.NpcInfo npc_infos = 2;
  total_size += 1UL * this->_internal_npc_infos_size();
  for (const auto& msg : this->_impl_.npc_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 spawner_id = 1;
  if (this->_internal_spawner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_spawner_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnNpcOnSectionNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnNpcOnSectionNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnNpcOnSectionNotify::GetClassData() const { return &_class_data_; }


void SpawnNpcOnSectionNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnNpcOnSectionNotify*>(&to_msg);
  auto& from = static_cast<const SpawnNpcOnSectionNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.SpawnNpcOnSectionNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.npc_infos_.MergeFrom(from._impl_.npc_infos_);
  if (from._internal_spawner_id() != 0) {
    _this->_internal_set_spawner_id(from._internal_spawner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnNpcOnSectionNotify::CopyFrom(const SpawnNpcOnSectionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SpawnNpcOnSectionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnNpcOnSectionNotify::IsInitialized() const {
  return true;
}

void SpawnNpcOnSectionNotify::InternalSwap(SpawnNpcOnSectionNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.npc_infos_.InternalSwap(&other->_impl_.npc_infos_);
  swap(_impl_.spawner_id_, other->_impl_.spawner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnNpcOnSectionNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[24]);
}

// ===================================================================

class SpawnProjectileOnSectionReq::_Internal {
 public:
  static const ::types::Pose& pose(const SpawnProjectileOnSectionReq* msg);
  static const ::types::Pose& character_pose(const SpawnProjectileOnSectionReq* msg);
};

const ::types::Pose&
SpawnProjectileOnSectionReq::_Internal::pose(const SpawnProjectileOnSectionReq* msg) {
  return *msg->_impl_.pose_;
}
const ::types::Pose&
SpawnProjectileOnSectionReq::_Internal::character_pose(const SpawnProjectileOnSectionReq* msg) {
  return *msg->_impl_.character_pose_;
}
void SpawnProjectileOnSectionReq::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
void SpawnProjectileOnSectionReq::clear_character_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_pose_ != nullptr) {
    delete _impl_.character_pose_;
  }
  _impl_.character_pose_ = nullptr;
}
SpawnProjectileOnSectionReq::SpawnProjectileOnSectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.SpawnProjectileOnSectionReq)
}
SpawnProjectileOnSectionReq::SpawnProjectileOnSectionReq(const SpawnProjectileOnSectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnProjectileOnSectionReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.character_pose_){nullptr}
    , decltype(_impl_.action_id_){}
    , decltype(_impl_.projectile_speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::types::Pose(*from._impl_.pose_);
  }
  if (from._internal_has_character_pose()) {
    _this->_impl_.character_pose_ = new ::types::Pose(*from._impl_.character_pose_);
  }
  ::memcpy(&_impl_.action_id_, &from._impl_.action_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.projectile_speed_) -
    reinterpret_cast<char*>(&_impl_.action_id_)) + sizeof(_impl_.projectile_speed_));
  // @@protoc_insertion_point(copy_constructor:world.SpawnProjectileOnSectionReq)
}

inline void SpawnProjectileOnSectionReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.character_pose_){nullptr}
    , decltype(_impl_.action_id_){int64_t{0}}
    , decltype(_impl_.projectile_speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawnProjectileOnSectionReq::~SpawnProjectileOnSectionReq() {
  // @@protoc_insertion_point(destructor:world.SpawnProjectileOnSectionReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnProjectileOnSectionReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.character_pose_;
}

void SpawnProjectileOnSectionReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnProjectileOnSectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SpawnProjectileOnSectionReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.character_pose_ != nullptr) {
    delete _impl_.character_pose_;
  }
  _impl_.character_pose_ = nullptr;
  ::memset(&_impl_.action_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.projectile_speed_) -
      reinterpret_cast<char*>(&_impl_.action_id_)) + sizeof(_impl_.projectile_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnProjectileOnSectionReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 action_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.action_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.Pose pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float projectile_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.projectile_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .types.Pose character_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_character_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnProjectileOnSectionReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SpawnProjectileOnSectionReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 action_id = 1;
  if (this->_internal_action_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_action_id(), target);
  }

  // .types.Pose pose = 2;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // float projectile_speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_projectile_speed = this->_internal_projectile_speed();
  uint32_t raw_projectile_speed;
  memcpy(&raw_projectile_speed, &tmp_projectile_speed, sizeof(tmp_projectile_speed));
  if (raw_projectile_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_projectile_speed(), target);
  }

  // .types.Pose character_pose = 4;
  if (this->_internal_has_character_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::character_pose(this),
        _Internal::character_pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SpawnProjectileOnSectionReq)
  return target;
}

size_t SpawnProjectileOnSectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SpawnProjectileOnSectionReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Pose pose = 2;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // .types.Pose character_pose = 4;
  if (this->_internal_has_character_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.character_pose_);
  }

  // int64 action_id = 1;
  if (this->_internal_action_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_action_id());
  }

  // float projectile_speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_projectile_speed = this->_internal_projectile_speed();
  uint32_t raw_projectile_speed;
  memcpy(&raw_projectile_speed, &tmp_projectile_speed, sizeof(tmp_projectile_speed));
  if (raw_projectile_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnProjectileOnSectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnProjectileOnSectionReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnProjectileOnSectionReq::GetClassData() const { return &_class_data_; }


void SpawnProjectileOnSectionReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnProjectileOnSectionReq*>(&to_msg);
  auto& from = static_cast<const SpawnProjectileOnSectionReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.SpawnProjectileOnSectionReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::types::Pose::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_has_character_pose()) {
    _this->_internal_mutable_character_pose()->::types::Pose::MergeFrom(
        from._internal_character_pose());
  }
  if (from._internal_action_id() != 0) {
    _this->_internal_set_action_id(from._internal_action_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_projectile_speed = from._internal_projectile_speed();
  uint32_t raw_projectile_speed;
  memcpy(&raw_projectile_speed, &tmp_projectile_speed, sizeof(tmp_projectile_speed));
  if (raw_projectile_speed != 0) {
    _this->_internal_set_projectile_speed(from._internal_projectile_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnProjectileOnSectionReq::CopyFrom(const SpawnProjectileOnSectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SpawnProjectileOnSectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnProjectileOnSectionReq::IsInitialized() const {
  return true;
}

void SpawnProjectileOnSectionReq::InternalSwap(SpawnProjectileOnSectionReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnProjectileOnSectionReq, _impl_.projectile_speed_)
      + sizeof(SpawnProjectileOnSectionReq::_impl_.projectile_speed_)
      - PROTOBUF_FIELD_OFFSET(SpawnProjectileOnSectionReq, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnProjectileOnSectionReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[25]);
}

// ===================================================================

class SpawnProjectileOnSectionRes::_Internal {
 public:
};

void SpawnProjectileOnSectionRes::clear_debug_trajectory() {
  _impl_.debug_trajectory_.Clear();
}
SpawnProjectileOnSectionRes::SpawnProjectileOnSectionRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.SpawnProjectileOnSectionRes)
}
SpawnProjectileOnSectionRes::SpawnProjectileOnSectionRes(const SpawnProjectileOnSectionRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnProjectileOnSectionRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_trajectory_){from._impl_.debug_trajectory_}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.result_));
  // @@protoc_insertion_point(copy_constructor:world.SpawnProjectileOnSectionRes)
}

inline void SpawnProjectileOnSectionRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_trajectory_){arena}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawnProjectileOnSectionRes::~SpawnProjectileOnSectionRes() {
  // @@protoc_insertion_point(destructor:world.SpawnProjectileOnSectionRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnProjectileOnSectionRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debug_trajectory_.~RepeatedPtrField();
}

void SpawnProjectileOnSectionRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnProjectileOnSectionRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SpawnProjectileOnSectionRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debug_trajectory_.Clear();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnProjectileOnSectionRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .types.Vector3 debug_trajectory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnProjectileOnSectionRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SpawnProjectileOnSectionRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .types.Vector3 debug_trajectory = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_trajectory_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug_trajectory(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 object_id = 3;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SpawnProjectileOnSectionRes)
  return target;
}

size_t SpawnProjectileOnSectionRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SpawnProjectileOnSectionRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .types.Vector3 debug_trajectory = 2;
  total_size += 1UL * this->_internal_debug_trajectory_size();
  for (const auto& msg : this->_impl_.debug_trajectory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 object_id = 3;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnProjectileOnSectionRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnProjectileOnSectionRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnProjectileOnSectionRes::GetClassData() const { return &_class_data_; }


void SpawnProjectileOnSectionRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnProjectileOnSectionRes*>(&to_msg);
  auto& from = static_cast<const SpawnProjectileOnSectionRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.SpawnProjectileOnSectionRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.debug_trajectory_.MergeFrom(from._impl_.debug_trajectory_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnProjectileOnSectionRes::CopyFrom(const SpawnProjectileOnSectionRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SpawnProjectileOnSectionRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnProjectileOnSectionRes::IsInitialized() const {
  return true;
}

void SpawnProjectileOnSectionRes::InternalSwap(SpawnProjectileOnSectionRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.debug_trajectory_.InternalSwap(&other->_impl_.debug_trajectory_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpawnProjectileOnSectionRes, _impl_.result_)
      + sizeof(SpawnProjectileOnSectionRes::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(SpawnProjectileOnSectionRes, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnProjectileOnSectionRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[26]);
}

// ===================================================================

class SpawnProjectileOnSectionNotify::_Internal {
 public:
  static const ::types::ProjectileInfo& projectile_info(const SpawnProjectileOnSectionNotify* msg);
};

const ::types::ProjectileInfo&
SpawnProjectileOnSectionNotify::_Internal::projectile_info(const SpawnProjectileOnSectionNotify* msg) {
  return *msg->_impl_.projectile_info_;
}
void SpawnProjectileOnSectionNotify::clear_projectile_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.projectile_info_ != nullptr) {
    delete _impl_.projectile_info_;
  }
  _impl_.projectile_info_ = nullptr;
}
SpawnProjectileOnSectionNotify::SpawnProjectileOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.SpawnProjectileOnSectionNotify)
}
SpawnProjectileOnSectionNotify::SpawnProjectileOnSectionNotify(const SpawnProjectileOnSectionNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnProjectileOnSectionNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_projectile_info()) {
    _this->_impl_.projectile_info_ = new ::types::ProjectileInfo(*from._impl_.projectile_info_);
  }
  // @@protoc_insertion_point(copy_constructor:world.SpawnProjectileOnSectionNotify)
}

inline void SpawnProjectileOnSectionNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SpawnProjectileOnSectionNotify::~SpawnProjectileOnSectionNotify() {
  // @@protoc_insertion_point(destructor:world.SpawnProjectileOnSectionNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnProjectileOnSectionNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.projectile_info_;
}

void SpawnProjectileOnSectionNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnProjectileOnSectionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.SpawnProjectileOnSectionNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.projectile_info_ != nullptr) {
    delete _impl_.projectile_info_;
  }
  _impl_.projectile_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnProjectileOnSectionNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.ProjectileInfo projectile_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_projectile_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpawnProjectileOnSectionNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.SpawnProjectileOnSectionNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.ProjectileInfo projectile_info = 1;
  if (this->_internal_has_projectile_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::projectile_info(this),
        _Internal::projectile_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.SpawnProjectileOnSectionNotify)
  return target;
}

size_t SpawnProjectileOnSectionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.SpawnProjectileOnSectionNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.ProjectileInfo projectile_info = 1;
  if (this->_internal_has_projectile_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.projectile_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnProjectileOnSectionNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnProjectileOnSectionNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnProjectileOnSectionNotify::GetClassData() const { return &_class_data_; }


void SpawnProjectileOnSectionNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnProjectileOnSectionNotify*>(&to_msg);
  auto& from = static_cast<const SpawnProjectileOnSectionNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.SpawnProjectileOnSectionNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_projectile_info()) {
    _this->_internal_mutable_projectile_info()->::types::ProjectileInfo::MergeFrom(
        from._internal_projectile_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnProjectileOnSectionNotify::CopyFrom(const SpawnProjectileOnSectionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.SpawnProjectileOnSectionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnProjectileOnSectionNotify::IsInitialized() const {
  return true;
}

void SpawnProjectileOnSectionNotify::InternalSwap(SpawnProjectileOnSectionNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.projectile_info_, other->_impl_.projectile_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnProjectileOnSectionNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[27]);
}

// ===================================================================

class HitObjectByProjectileReq::_Internal {
 public:
  static const ::types::Vector3& on_hit_location(const HitObjectByProjectileReq* msg);
};

const ::types::Vector3&
HitObjectByProjectileReq::_Internal::on_hit_location(const HitObjectByProjectileReq* msg) {
  return *msg->_impl_.on_hit_location_;
}
void HitObjectByProjectileReq::clear_on_hit_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.on_hit_location_ != nullptr) {
    delete _impl_.on_hit_location_;
  }
  _impl_.on_hit_location_ = nullptr;
}
HitObjectByProjectileReq::HitObjectByProjectileReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.HitObjectByProjectileReq)
}
HitObjectByProjectileReq::HitObjectByProjectileReq(const HitObjectByProjectileReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitObjectByProjectileReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.on_hit_location_){nullptr}
    , decltype(_impl_.hit_object_id_){}
    , decltype(_impl_.projectile_object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_on_hit_location()) {
    _this->_impl_.on_hit_location_ = new ::types::Vector3(*from._impl_.on_hit_location_);
  }
  ::memcpy(&_impl_.hit_object_id_, &from._impl_.hit_object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.projectile_object_id_) -
    reinterpret_cast<char*>(&_impl_.hit_object_id_)) + sizeof(_impl_.projectile_object_id_));
  // @@protoc_insertion_point(copy_constructor:world.HitObjectByProjectileReq)
}

inline void HitObjectByProjectileReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.on_hit_location_){nullptr}
    , decltype(_impl_.hit_object_id_){int64_t{0}}
    , decltype(_impl_.projectile_object_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitObjectByProjectileReq::~HitObjectByProjectileReq() {
  // @@protoc_insertion_point(destructor:world.HitObjectByProjectileReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitObjectByProjectileReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.on_hit_location_;
}

void HitObjectByProjectileReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitObjectByProjectileReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.HitObjectByProjectileReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.on_hit_location_ != nullptr) {
    delete _impl_.on_hit_location_;
  }
  _impl_.on_hit_location_ = nullptr;
  ::memset(&_impl_.hit_object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.projectile_object_id_) -
      reinterpret_cast<char*>(&_impl_.hit_object_id_)) + sizeof(_impl_.projectile_object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitObjectByProjectileReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 hit_object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hit_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.Vector3 on_hit_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_hit_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 projectile_object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.projectile_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitObjectByProjectileReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.HitObjectByProjectileReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 hit_object_id = 1;
  if (this->_internal_hit_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_hit_object_id(), target);
  }

  // .types.Vector3 on_hit_location = 2;
  if (this->_internal_has_on_hit_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::on_hit_location(this),
        _Internal::on_hit_location(this).GetCachedSize(), target, stream);
  }

  // int64 projectile_object_id = 3;
  if (this->_internal_projectile_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_projectile_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.HitObjectByProjectileReq)
  return target;
}

size_t HitObjectByProjectileReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.HitObjectByProjectileReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Vector3 on_hit_location = 2;
  if (this->_internal_has_on_hit_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.on_hit_location_);
  }

  // int64 hit_object_id = 1;
  if (this->_internal_hit_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hit_object_id());
  }

  // int64 projectile_object_id = 3;
  if (this->_internal_projectile_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_projectile_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitObjectByProjectileReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitObjectByProjectileReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitObjectByProjectileReq::GetClassData() const { return &_class_data_; }


void HitObjectByProjectileReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitObjectByProjectileReq*>(&to_msg);
  auto& from = static_cast<const HitObjectByProjectileReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.HitObjectByProjectileReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_on_hit_location()) {
    _this->_internal_mutable_on_hit_location()->::types::Vector3::MergeFrom(
        from._internal_on_hit_location());
  }
  if (from._internal_hit_object_id() != 0) {
    _this->_internal_set_hit_object_id(from._internal_hit_object_id());
  }
  if (from._internal_projectile_object_id() != 0) {
    _this->_internal_set_projectile_object_id(from._internal_projectile_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitObjectByProjectileReq::CopyFrom(const HitObjectByProjectileReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.HitObjectByProjectileReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitObjectByProjectileReq::IsInitialized() const {
  return true;
}

void HitObjectByProjectileReq::InternalSwap(HitObjectByProjectileReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitObjectByProjectileReq, _impl_.projectile_object_id_)
      + sizeof(HitObjectByProjectileReq::_impl_.projectile_object_id_)
      - PROTOBUF_FIELD_OFFSET(HitObjectByProjectileReq, _impl_.on_hit_location_)>(
          reinterpret_cast<char*>(&_impl_.on_hit_location_),
          reinterpret_cast<char*>(&other->_impl_.on_hit_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitObjectByProjectileReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[28]);
}

// ===================================================================

class HitObjectByProjectileRes::_Internal {
 public:
};

HitObjectByProjectileRes::HitObjectByProjectileRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.HitObjectByProjectileRes)
}
HitObjectByProjectileRes::HitObjectByProjectileRes(const HitObjectByProjectileRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitObjectByProjectileRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:world.HitObjectByProjectileRes)
}

inline void HitObjectByProjectileRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitObjectByProjectileRes::~HitObjectByProjectileRes() {
  // @@protoc_insertion_point(destructor:world.HitObjectByProjectileRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitObjectByProjectileRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HitObjectByProjectileRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitObjectByProjectileRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.HitObjectByProjectileRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitObjectByProjectileRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitObjectByProjectileRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.HitObjectByProjectileRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.HitObjectByProjectileRes)
  return target;
}

size_t HitObjectByProjectileRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.HitObjectByProjectileRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitObjectByProjectileRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitObjectByProjectileRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitObjectByProjectileRes::GetClassData() const { return &_class_data_; }


void HitObjectByProjectileRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitObjectByProjectileRes*>(&to_msg);
  auto& from = static_cast<const HitObjectByProjectileRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.HitObjectByProjectileRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitObjectByProjectileRes::CopyFrom(const HitObjectByProjectileRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.HitObjectByProjectileRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitObjectByProjectileRes::IsInitialized() const {
  return true;
}

void HitObjectByProjectileRes::InternalSwap(HitObjectByProjectileRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HitObjectByProjectileRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[29]);
}

// ===================================================================

class HitObjectByProjectileNotify::_Internal {
 public:
};

HitObjectByProjectileNotify::HitObjectByProjectileNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.HitObjectByProjectileNotify)
}
HitObjectByProjectileNotify::HitObjectByProjectileNotify(const HitObjectByProjectileNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HitObjectByProjectileNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_object_id_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.current_hp_){}
    , decltype(_impl_.is_alive_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.projectile_object_id_, &from._impl_.projectile_object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_alive_) -
    reinterpret_cast<char*>(&_impl_.projectile_object_id_)) + sizeof(_impl_.is_alive_));
  // @@protoc_insertion_point(copy_constructor:world.HitObjectByProjectileNotify)
}

inline void HitObjectByProjectileNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.projectile_object_id_){int64_t{0}}
    , decltype(_impl_.object_id_){int64_t{0}}
    , decltype(_impl_.current_hp_){int64_t{0}}
    , decltype(_impl_.is_alive_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HitObjectByProjectileNotify::~HitObjectByProjectileNotify() {
  // @@protoc_insertion_point(destructor:world.HitObjectByProjectileNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HitObjectByProjectileNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HitObjectByProjectileNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HitObjectByProjectileNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.HitObjectByProjectileNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.projectile_object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_alive_) -
      reinterpret_cast<char*>(&_impl_.projectile_object_id_)) + sizeof(_impl_.is_alive_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HitObjectByProjectileNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 projectile_object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.projectile_object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 current_hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_alive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.is_alive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HitObjectByProjectileNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.HitObjectByProjectileNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 projectile_object_id = 1;
  if (this->_internal_projectile_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_projectile_object_id(), target);
  }

  // int64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_object_id(), target);
  }

  // int64 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_hp(), target);
  }

  // bool is_alive = 4;
  if (this->_internal_is_alive() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_alive(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.HitObjectByProjectileNotify)
  return target;
}

size_t HitObjectByProjectileNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.HitObjectByProjectileNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 projectile_object_id = 1;
  if (this->_internal_projectile_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_projectile_object_id());
  }

  // int64 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  // int64 current_hp = 3;
  if (this->_internal_current_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_current_hp());
  }

  // bool is_alive = 4;
  if (this->_internal_is_alive() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HitObjectByProjectileNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HitObjectByProjectileNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HitObjectByProjectileNotify::GetClassData() const { return &_class_data_; }


void HitObjectByProjectileNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HitObjectByProjectileNotify*>(&to_msg);
  auto& from = static_cast<const HitObjectByProjectileNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.HitObjectByProjectileNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_projectile_object_id() != 0) {
    _this->_internal_set_projectile_object_id(from._internal_projectile_object_id());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_current_hp() != 0) {
    _this->_internal_set_current_hp(from._internal_current_hp());
  }
  if (from._internal_is_alive() != 0) {
    _this->_internal_set_is_alive(from._internal_is_alive());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HitObjectByProjectileNotify::CopyFrom(const HitObjectByProjectileNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.HitObjectByProjectileNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HitObjectByProjectileNotify::IsInitialized() const {
  return true;
}

void HitObjectByProjectileNotify::InternalSwap(HitObjectByProjectileNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HitObjectByProjectileNotify, _impl_.is_alive_)
      + sizeof(HitObjectByProjectileNotify::_impl_.is_alive_)
      - PROTOBUF_FIELD_OFFSET(HitObjectByProjectileNotify, _impl_.projectile_object_id_)>(
          reinterpret_cast<char*>(&_impl_.projectile_object_id_),
          reinterpret_cast<char*>(&other->_impl_.projectile_object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HitObjectByProjectileNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[30]);
}

// ===================================================================

class DespawnNpcOnSectionNotify::_Internal {
 public:
};

DespawnNpcOnSectionNotify::DespawnNpcOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.DespawnNpcOnSectionNotify)
}
DespawnNpcOnSectionNotify::DespawnNpcOnSectionNotify(const DespawnNpcOnSectionNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DespawnNpcOnSectionNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:world.DespawnNpcOnSectionNotify)
}

inline void DespawnNpcOnSectionNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DespawnNpcOnSectionNotify::~DespawnNpcOnSectionNotify() {
  // @@protoc_insertion_point(destructor:world.DespawnNpcOnSectionNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DespawnNpcOnSectionNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DespawnNpcOnSectionNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DespawnNpcOnSectionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.DespawnNpcOnSectionNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DespawnNpcOnSectionNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DespawnNpcOnSectionNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.DespawnNpcOnSectionNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.DespawnNpcOnSectionNotify)
  return target;
}

size_t DespawnNpcOnSectionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.DespawnNpcOnSectionNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DespawnNpcOnSectionNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DespawnNpcOnSectionNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DespawnNpcOnSectionNotify::GetClassData() const { return &_class_data_; }


void DespawnNpcOnSectionNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DespawnNpcOnSectionNotify*>(&to_msg);
  auto& from = static_cast<const DespawnNpcOnSectionNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.DespawnNpcOnSectionNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DespawnNpcOnSectionNotify::CopyFrom(const DespawnNpcOnSectionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.DespawnNpcOnSectionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DespawnNpcOnSectionNotify::IsInitialized() const {
  return true;
}

void DespawnNpcOnSectionNotify::InternalSwap(DespawnNpcOnSectionNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DespawnNpcOnSectionNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[31]);
}

// ===================================================================

class DespawnProjectileOnSectionNotify::_Internal {
 public:
};

DespawnProjectileOnSectionNotify::DespawnProjectileOnSectionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.DespawnProjectileOnSectionNotify)
}
DespawnProjectileOnSectionNotify::DespawnProjectileOnSectionNotify(const DespawnProjectileOnSectionNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DespawnProjectileOnSectionNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:world.DespawnProjectileOnSectionNotify)
}

inline void DespawnProjectileOnSectionNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DespawnProjectileOnSectionNotify::~DespawnProjectileOnSectionNotify() {
  // @@protoc_insertion_point(destructor:world.DespawnProjectileOnSectionNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DespawnProjectileOnSectionNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DespawnProjectileOnSectionNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DespawnProjectileOnSectionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.DespawnProjectileOnSectionNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DespawnProjectileOnSectionNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DespawnProjectileOnSectionNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.DespawnProjectileOnSectionNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.DespawnProjectileOnSectionNotify)
  return target;
}

size_t DespawnProjectileOnSectionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.DespawnProjectileOnSectionNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DespawnProjectileOnSectionNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DespawnProjectileOnSectionNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DespawnProjectileOnSectionNotify::GetClassData() const { return &_class_data_; }


void DespawnProjectileOnSectionNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DespawnProjectileOnSectionNotify*>(&to_msg);
  auto& from = static_cast<const DespawnProjectileOnSectionNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.DespawnProjectileOnSectionNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DespawnProjectileOnSectionNotify::CopyFrom(const DespawnProjectileOnSectionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.DespawnProjectileOnSectionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DespawnProjectileOnSectionNotify::IsInitialized() const {
  return true;
}

void DespawnProjectileOnSectionNotify::InternalSwap(DespawnProjectileOnSectionNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DespawnProjectileOnSectionNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[32]);
}

// ===================================================================

class DebugSimulationPositionNotify::_Internal {
 public:
  static const ::types::Vector3& position(const DebugSimulationPositionNotify* msg);
  static const ::types::DebugShapeInfo& shape_info(const DebugSimulationPositionNotify* msg);
};

const ::types::Vector3&
DebugSimulationPositionNotify::_Internal::position(const DebugSimulationPositionNotify* msg) {
  return *msg->_impl_.position_;
}
const ::types::DebugShapeInfo&
DebugSimulationPositionNotify::_Internal::shape_info(const DebugSimulationPositionNotify* msg) {
  return *msg->_impl_.shape_info_;
}
void DebugSimulationPositionNotify::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
void DebugSimulationPositionNotify::clear_shape_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_info_ != nullptr) {
    delete _impl_.shape_info_;
  }
  _impl_.shape_info_ = nullptr;
}
DebugSimulationPositionNotify::DebugSimulationPositionNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.DebugSimulationPositionNotify)
}
DebugSimulationPositionNotify::DebugSimulationPositionNotify(const DebugSimulationPositionNotify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugSimulationPositionNotify* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.shape_info_){nullptr}
    , decltype(_impl_.color_){}
    , decltype(_impl_.shape_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::types::Vector3(*from._impl_.position_);
  }
  if (from._internal_has_shape_info()) {
    _this->_impl_.shape_info_ = new ::types::DebugShapeInfo(*from._impl_.shape_info_);
  }
  ::memcpy(&_impl_.color_, &from._impl_.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.shape_) -
    reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.shape_));
  // @@protoc_insertion_point(copy_constructor:world.DebugSimulationPositionNotify)
}

inline void DebugSimulationPositionNotify::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.shape_info_){nullptr}
    , decltype(_impl_.color_){0}
    , decltype(_impl_.shape_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DebugSimulationPositionNotify::~DebugSimulationPositionNotify() {
  // @@protoc_insertion_point(destructor:world.DebugSimulationPositionNotify)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugSimulationPositionNotify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.shape_info_;
}

void DebugSimulationPositionNotify::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugSimulationPositionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:world.DebugSimulationPositionNotify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.shape_info_ != nullptr) {
    delete _impl_.shape_info_;
  }
  _impl_.shape_info_ = nullptr;
  ::memset(&_impl_.color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.shape_) -
      reinterpret_cast<char*>(&_impl_.color_)) + sizeof(_impl_.shape_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugSimulationPositionNotify::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .types.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::types::Color>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.DebugShape shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shape(static_cast<::types::DebugShape>(val));
        } else
          goto handle_unusual;
        continue;
      // .types.DebugShapeInfo shape_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugSimulationPositionNotify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.DebugSimulationPositionNotify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Vector3 position = 1;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .types.Color color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  // .types.DebugShape shape = 3;
  if (this->_internal_shape() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_shape(), target);
  }

  // .types.DebugShapeInfo shape_info = 4;
  if (this->_internal_has_shape_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::shape_info(this),
        _Internal::shape_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.DebugSimulationPositionNotify)
  return target;
}

size_t DebugSimulationPositionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.DebugSimulationPositionNotify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Vector3 position = 1;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .types.DebugShapeInfo shape_info = 4;
  if (this->_internal_has_shape_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_info_);
  }

  // .types.Color color = 2;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
  }

  // .types.DebugShape shape = 3;
  if (this->_internal_shape() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_shape());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugSimulationPositionNotify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugSimulationPositionNotify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugSimulationPositionNotify::GetClassData() const { return &_class_data_; }


void DebugSimulationPositionNotify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugSimulationPositionNotify*>(&to_msg);
  auto& from = static_cast<const DebugSimulationPositionNotify&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.DebugSimulationPositionNotify)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::types::Vector3::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_shape_info()) {
    _this->_internal_mutable_shape_info()->::types::DebugShapeInfo::MergeFrom(
        from._internal_shape_info());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_shape() != 0) {
    _this->_internal_set_shape(from._internal_shape());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugSimulationPositionNotify::CopyFrom(const DebugSimulationPositionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.DebugSimulationPositionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSimulationPositionNotify::IsInitialized() const {
  return true;
}

void DebugSimulationPositionNotify::InternalSwap(DebugSimulationPositionNotify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugSimulationPositionNotify, _impl_.shape_)
      + sizeof(DebugSimulationPositionNotify::_impl_.shape_)
      - PROTOBUF_FIELD_OFFSET(DebugSimulationPositionNotify, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugSimulationPositionNotify::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[33]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace world
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::world::RegisterServerReq*
Arena::CreateMaybeMessage< ::world::RegisterServerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::RegisterServerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::RegisterServerRes*
Arena::CreateMaybeMessage< ::world::RegisterServerRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::RegisterServerRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ServerPingReq*
Arena::CreateMaybeMessage< ::world::ServerPingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ServerPingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ServerPingRes*
Arena::CreateMaybeMessage< ::world::ServerPingRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ServerPingRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::HelloWorldServer*
Arena::CreateMaybeMessage< ::world::HelloWorldServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::HelloWorldServer >(arena);
}
template<> PROTOBUF_NOINLINE ::world::HelloWorldClient*
Arena::CreateMaybeMessage< ::world::HelloWorldClient >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::HelloWorldClient >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientEnterMapReq*
Arena::CreateMaybeMessage< ::world::ClientEnterMapReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientEnterMapReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientEnterMapRes*
Arena::CreateMaybeMessage< ::world::ClientEnterMapRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientEnterMapRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientEnterMapNotify*
Arena::CreateMaybeMessage< ::world::ClientEnterMapNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientEnterMapNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientLeaveMapNotify*
Arena::CreateMaybeMessage< ::world::ClientLeaveMapNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientLeaveMapNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientMoveReq*
Arena::CreateMaybeMessage< ::world::ClientMoveReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientMoveReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientMoveRes*
Arena::CreateMaybeMessage< ::world::ClientMoveRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientMoveRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientActionReq*
Arena::CreateMaybeMessage< ::world::ClientActionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientActionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ClientActionRes*
Arena::CreateMaybeMessage< ::world::ClientActionRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ClientActionRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::OtherClientActionNotify*
Arena::CreateMaybeMessage< ::world::OtherClientActionNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::OtherClientActionNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::OtherClientEnterNotify*
Arena::CreateMaybeMessage< ::world::OtherClientEnterNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::OtherClientEnterNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::OtherClientLeaveNotify*
Arena::CreateMaybeMessage< ::world::OtherClientLeaveNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::OtherClientLeaveNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::OtherClientMoveNotify*
Arena::CreateMaybeMessage< ::world::OtherClientMoveNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::OtherClientMoveNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ChangeServerTickIntervalReq*
Arena::CreateMaybeMessage< ::world::ChangeServerTickIntervalReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ChangeServerTickIntervalReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ChangeServerTickIntervalRes*
Arena::CreateMaybeMessage< ::world::ChangeServerTickIntervalRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ChangeServerTickIntervalRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ServerTickIntervalChangedNotify*
Arena::CreateMaybeMessage< ::world::ServerTickIntervalChangedNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ServerTickIntervalChangedNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SectionOwnershipChangedNotify*
Arena::CreateMaybeMessage< ::world::SectionOwnershipChangedNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SectionOwnershipChangedNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SpawnNpcOnSectionReq*
Arena::CreateMaybeMessage< ::world::SpawnNpcOnSectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SpawnNpcOnSectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SpawnNpcOnSectionRes*
Arena::CreateMaybeMessage< ::world::SpawnNpcOnSectionRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SpawnNpcOnSectionRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SpawnNpcOnSectionNotify*
Arena::CreateMaybeMessage< ::world::SpawnNpcOnSectionNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SpawnNpcOnSectionNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SpawnProjectileOnSectionReq*
Arena::CreateMaybeMessage< ::world::SpawnProjectileOnSectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SpawnProjectileOnSectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SpawnProjectileOnSectionRes*
Arena::CreateMaybeMessage< ::world::SpawnProjectileOnSectionRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SpawnProjectileOnSectionRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::SpawnProjectileOnSectionNotify*
Arena::CreateMaybeMessage< ::world::SpawnProjectileOnSectionNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::SpawnProjectileOnSectionNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::HitObjectByProjectileReq*
Arena::CreateMaybeMessage< ::world::HitObjectByProjectileReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::HitObjectByProjectileReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::HitObjectByProjectileRes*
Arena::CreateMaybeMessage< ::world::HitObjectByProjectileRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::HitObjectByProjectileRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::HitObjectByProjectileNotify*
Arena::CreateMaybeMessage< ::world::HitObjectByProjectileNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::HitObjectByProjectileNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::DespawnNpcOnSectionNotify*
Arena::CreateMaybeMessage< ::world::DespawnNpcOnSectionNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::DespawnNpcOnSectionNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::DespawnProjectileOnSectionNotify*
Arena::CreateMaybeMessage< ::world::DespawnProjectileOnSectionNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::DespawnProjectileOnSectionNotify >(arena);
}
template<> PROTOBUF_NOINLINE ::world::DebugSimulationPositionNotify*
Arena::CreateMaybeMessage< ::world::DebugSimulationPositionNotify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::DebugSimulationPositionNotify >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
