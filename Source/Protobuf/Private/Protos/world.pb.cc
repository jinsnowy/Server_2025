// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#include "world.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace world {
PROTOBUF_CONSTEXPR RegisterServerReq::RegisterServerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_map_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerReqDefaultTypeInternal() {}
  union {
    RegisterServerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
PROTOBUF_CONSTEXPR RegisterServerRes::RegisterServerRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerResDefaultTypeInternal() {}
  union {
    RegisterServerRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerResDefaultTypeInternal _RegisterServerRes_default_instance_;
PROTOBUF_CONSTEXPR ServerPingReq::ServerPingReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerPingReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPingReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPingReqDefaultTypeInternal() {}
  union {
    ServerPingReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPingReqDefaultTypeInternal _ServerPingReq_default_instance_;
PROTOBUF_CONSTEXPR ServerPingRes::ServerPingRes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerPingResDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerPingResDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerPingResDefaultTypeInternal() {}
  union {
    ServerPingRes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerPingResDefaultTypeInternal _ServerPingRes_default_instance_;
}  // namespace world
static ::_pb::Metadata file_level_metadata_world_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_world_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_world_2eproto = nullptr;

const uint32_t TableStruct_world_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _impl_.server_address_),
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _impl_.server_type_),
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerReq, _impl_.level_map_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::RegisterServerRes, _impl_.server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingReq, _impl_.server_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::world::ServerPingRes, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::world::ServerPingRes, _impl_.server_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::world::RegisterServerReq)},
  { 9, -1, -1, sizeof(::world::RegisterServerRes)},
  { 17, -1, -1, sizeof(::world::ServerPingReq)},
  { 24, -1, -1, sizeof(::world::ServerPingRes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::world::_RegisterServerReq_default_instance_._instance,
  &::world::_RegisterServerRes_default_instance_._instance,
  &::world::_ServerPingReq_default_instance_._instance,
  &::world::_ServerPingRes_default_instance_._instance,
};

const char descriptor_table_protodef_world_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013world.proto\022\005world\032\013types.proto\"q\n\021Reg"
  "isterServerReq\022\026\n\016server_address\030\001 \001(\t\022&"
  "\n\013server_type\030\002 \001(\0162\021.types.ServerType\022\026"
  "\n\016level_map_name\030\003 \001(\t:\004\310>\211 \"K\n\021Register"
  "ServerRes\022\035\n\006result\030\001 \001(\0162\r.types.Result"
  "\022\021\n\tserver_id\030\002 \001(\005:\004\310>\212 \"(\n\rServerPingR"
  "eq\022\021\n\tserver_id\030\001 \001(\005:\004\310>\213 \"G\n\rServerPin"
  "gRes\022\035\n\006result\030\001 \001(\0162\r.types.Result\022\021\n\ts"
  "erver_id\030\002 \001(\005:\004\310>\213 b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_world_2eproto_deps[1] = {
  &::descriptor_table_types_2eproto,
};
static ::_pbi::once_flag descriptor_table_world_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_world_2eproto = {
    false, false, 348, descriptor_table_protodef_world_2eproto,
    "world.proto",
    &descriptor_table_world_2eproto_once, descriptor_table_world_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_world_2eproto::offsets,
    file_level_metadata_world_2eproto, file_level_enum_descriptors_world_2eproto,
    file_level_service_descriptors_world_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_world_2eproto_getter() {
  return &descriptor_table_world_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_world_2eproto(&descriptor_table_world_2eproto);
namespace world {

// ===================================================================

class RegisterServerReq::_Internal {
 public:
};

RegisterServerReq::RegisterServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.RegisterServerReq)
}
RegisterServerReq::RegisterServerReq(const RegisterServerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_address_){}
    , decltype(_impl_.level_map_name_){}
    , decltype(_impl_.server_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_address().empty()) {
    _this->_impl_.server_address_.Set(from._internal_server_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.level_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_level_map_name().empty()) {
    _this->_impl_.level_map_name_.Set(from._internal_level_map_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.server_type_ = from._impl_.server_type_;
  // @@protoc_insertion_point(copy_constructor:world.RegisterServerReq)
}

inline void RegisterServerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_address_){}
    , decltype(_impl_.level_map_name_){}
    , decltype(_impl_.server_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.level_map_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_map_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterServerReq::~RegisterServerReq() {
  // @@protoc_insertion_point(destructor:world.RegisterServerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_address_.Destroy();
  _impl_.level_map_name_.Destroy();
}

void RegisterServerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.RegisterServerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_address_.ClearToEmpty();
  _impl_.level_map_name_.ClearToEmpty();
  _impl_.server_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string server_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "world.RegisterServerReq.server_address"));
        } else
          goto handle_unusual;
        continue;
      // .types.ServerType server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_server_type(static_cast<::types::ServerType>(val));
        } else
          goto handle_unusual;
        continue;
      // string level_map_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_level_map_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "world.RegisterServerReq.level_map_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.RegisterServerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (!this->_internal_server_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world.RegisterServerReq.server_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_address(), target);
  }

  // .types.ServerType server_type = 2;
  if (this->_internal_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_server_type(), target);
  }

  // string level_map_name = 3;
  if (!this->_internal_level_map_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_map_name().data(), static_cast<int>(this->_internal_level_map_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "world.RegisterServerReq.level_map_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_level_map_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.RegisterServerReq)
  return target;
}

size_t RegisterServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.RegisterServerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_address = 1;
  if (!this->_internal_server_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_address());
  }

  // string level_map_name = 3;
  if (!this->_internal_level_map_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_map_name());
  }

  // .types.ServerType server_type = 2;
  if (this->_internal_server_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_server_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerReq::GetClassData() const { return &_class_data_; }


void RegisterServerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerReq*>(&to_msg);
  auto& from = static_cast<const RegisterServerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.RegisterServerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_address().empty()) {
    _this->_internal_set_server_address(from._internal_server_address());
  }
  if (!from._internal_level_map_name().empty()) {
    _this->_internal_set_level_map_name(from._internal_level_map_name());
  }
  if (from._internal_server_type() != 0) {
    _this->_internal_set_server_type(from._internal_server_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerReq::CopyFrom(const RegisterServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.RegisterServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerReq::IsInitialized() const {
  return true;
}

void RegisterServerReq::InternalSwap(RegisterServerReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_address_, lhs_arena,
      &other->_impl_.server_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.level_map_name_, lhs_arena,
      &other->_impl_.level_map_name_, rhs_arena
  );
  swap(_impl_.server_type_, other->_impl_.server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[0]);
}

// ===================================================================

class RegisterServerRes::_Internal {
 public:
};

RegisterServerRes::RegisterServerRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.RegisterServerRes)
}
RegisterServerRes::RegisterServerRes(const RegisterServerRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  // @@protoc_insertion_point(copy_constructor:world.RegisterServerRes)
}

inline void RegisterServerRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterServerRes::~RegisterServerRes() {
  // @@protoc_insertion_point(destructor:world.RegisterServerRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterServerRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.RegisterServerRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.RegisterServerRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.RegisterServerRes)
  return target;
}

size_t RegisterServerRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.RegisterServerRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerRes::GetClassData() const { return &_class_data_; }


void RegisterServerRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerRes*>(&to_msg);
  auto& from = static_cast<const RegisterServerRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.RegisterServerRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerRes::CopyFrom(const RegisterServerRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.RegisterServerRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerRes::IsInitialized() const {
  return true;
}

void RegisterServerRes::InternalSwap(RegisterServerRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterServerRes, _impl_.server_id_)
      + sizeof(RegisterServerRes::_impl_.server_id_)
      - PROTOBUF_FIELD_OFFSET(RegisterServerRes, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[1]);
}

// ===================================================================

class ServerPingReq::_Internal {
 public:
};

ServerPingReq::ServerPingReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ServerPingReq)
}
ServerPingReq::ServerPingReq(const ServerPingReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPingReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.server_id_ = from._impl_.server_id_;
  // @@protoc_insertion_point(copy_constructor:world.ServerPingReq)
}

inline void ServerPingReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerPingReq::~ServerPingReq() {
  // @@protoc_insertion_point(destructor:world.ServerPingReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPingReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerPingReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPingReq::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ServerPingReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPingReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 server_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerPingReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ServerPingReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ServerPingReq)
  return target;
}

size_t ServerPingReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ServerPingReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 server_id = 1;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPingReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPingReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPingReq::GetClassData() const { return &_class_data_; }


void ServerPingReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPingReq*>(&to_msg);
  auto& from = static_cast<const ServerPingReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ServerPingReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPingReq::CopyFrom(const ServerPingReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ServerPingReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPingReq::IsInitialized() const {
  return true;
}

void ServerPingReq::InternalSwap(ServerPingReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.server_id_, other->_impl_.server_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPingReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[2]);
}

// ===================================================================

class ServerPingRes::_Internal {
 public:
};

ServerPingRes::ServerPingRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:world.ServerPingRes)
}
ServerPingRes::ServerPingRes(const ServerPingRes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerPingRes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  // @@protoc_insertion_point(copy_constructor:world.ServerPingRes)
}

inline void ServerPingRes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerPingRes::~ServerPingRes() {
  // @@protoc_insertion_point(destructor:world.ServerPingRes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerPingRes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerPingRes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerPingRes::Clear() {
// @@protoc_insertion_point(message_clear_start:world.ServerPingRes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerPingRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerPingRes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:world.ServerPingRes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:world.ServerPingRes)
  return target;
}

size_t ServerPingRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:world.ServerPingRes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerPingRes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerPingRes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerPingRes::GetClassData() const { return &_class_data_; }


void ServerPingRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerPingRes*>(&to_msg);
  auto& from = static_cast<const ServerPingRes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:world.ServerPingRes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerPingRes::CopyFrom(const ServerPingRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:world.ServerPingRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerPingRes::IsInitialized() const {
  return true;
}

void ServerPingRes::InternalSwap(ServerPingRes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerPingRes, _impl_.server_id_)
      + sizeof(ServerPingRes::_impl_.server_id_)
      - PROTOBUF_FIELD_OFFSET(ServerPingRes, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerPingRes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace world
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::world::RegisterServerReq*
Arena::CreateMaybeMessage< ::world::RegisterServerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::RegisterServerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::RegisterServerRes*
Arena::CreateMaybeMessage< ::world::RegisterServerRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::RegisterServerRes >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ServerPingReq*
Arena::CreateMaybeMessage< ::world::ServerPingReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ServerPingReq >(arena);
}
template<> PROTOBUF_NOINLINE ::world::ServerPingRes*
Arena::CreateMaybeMessage< ::world::ServerPingRes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::world::ServerPingRes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
