// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace types {
}  // namespace types
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_types_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_types_2eproto = nullptr;
const uint32_t TableStruct_types_2eproto::offsets[1] = {};
static constexpr ::_pbi::MigrationSchema* schemas = nullptr;
static constexpr ::_pb::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_types_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013types.proto\022\005types\032 google/protobuf/de"
  "scriptor.proto*\246\002\n\010protocol\022\014\n\010kInvalid\020"
  "\000\022\013\n\006kHello\020\201 \022\r\n\010kPingReq\020\202 \022\r\n\010kPingRe"
  "s\020\203 \022\025\n\020kContentReadyReq\020\204 \022\025\n\020kContentR"
  "eadyRes\020\205 \022\021\n\014kHelloClient\020\206 \022\021\n\014kHelloS"
  "erver\020\207 \022\033\n\026kDisconnectAlertNotify\020\210 \022\027\n"
  "\022kRegisterServerReq\020\211 \022\027\n\022kRegisterServe"
  "rRes\020\212 \022\023\n\016kServerPingReq\020\213 \022\023\n\016kServerP"
  "ingRes\020\214 \022\024\n\017kHelloClientAck\020\215 *\207\001\n\006Resu"
  "lt\022\014\n\010kSuccess\020\000\022\014\n\010kUnknown\020\001\022\023\n\017kInval"
  "idRequest\020\002\022\025\n\021kInvalidParameter\020\003\022\r\n\tkN"
  "otFound\020\004\022\022\n\016kInternalError\020\005\022\022\n\016kDataba"
  "seError\020\006*Z\n\nServerType\022\022\n\016kUnknownServe"
  "r\020\000\022\024\n\020kDedicatedServer\020\001\022\020\n\014kWorldServe"
  "r\020\002\022\020\n\014kLobbyServer\020\003:H\n\nmessage_id\022\037.go"
  "ogle.protobuf.MessageOptions\030\351\007 \001(\0162\017.ty"
  "pes.protocol\210\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_types_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_types_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_types_2eproto = {
    false, false, 663, descriptor_table_protodef_types_2eproto,
    "types.proto",
    &descriptor_table_types_2eproto_once, descriptor_table_types_2eproto_deps, 1, 0,
    schemas, file_default_instances, TableStruct_types_2eproto::offsets,
    nullptr, file_level_enum_descriptors_types_2eproto,
    file_level_service_descriptors_types_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_types_2eproto_getter() {
  return &descriptor_table_types_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_types_2eproto(&descriptor_table_types_2eproto);
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[0];
}
bool protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 4097:
    case 4098:
    case 4099:
    case 4100:
    case 4101:
    case 4102:
    case 4103:
    case 4104:
    case 4105:
    case 4106:
    case 4107:
    case 4108:
    case 4109:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[1];
}
bool Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_types_2eproto);
  return file_level_enum_descriptors_types_2eproto[2];
}
bool ServerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::types::protocol, ::types::protocol_IsValid>, 14, false>
  message_id(kMessageIdFieldNumber, static_cast< ::types::protocol >(0), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
