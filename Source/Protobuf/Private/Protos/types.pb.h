// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace types {
class AxisAndAngle;
struct AxisAndAngleDefaultTypeInternal;
extern AxisAndAngleDefaultTypeInternal _AxisAndAngle_default_instance_;
class BaseAttackAction;
struct BaseAttackActionDefaultTypeInternal;
extern BaseAttackActionDefaultTypeInternal _BaseAttackAction_default_instance_;
class Box;
struct BoxDefaultTypeInternal;
extern BoxDefaultTypeInternal _Box_default_instance_;
class Capsule;
struct CapsuleDefaultTypeInternal;
extern CapsuleDefaultTypeInternal _Capsule_default_instance_;
class CharacterInfo;
struct CharacterInfoDefaultTypeInternal;
extern CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
class CharacterPose;
struct CharacterPoseDefaultTypeInternal;
extern CharacterPoseDefaultTypeInternal _CharacterPose_default_instance_;
class ClientAction;
struct ClientActionDefaultTypeInternal;
extern ClientActionDefaultTypeInternal _ClientAction_default_instance_;
class DebugShapeInfo;
struct DebugShapeInfoDefaultTypeInternal;
extern DebugShapeInfoDefaultTypeInternal _DebugShapeInfo_default_instance_;
class JumpAction;
struct JumpActionDefaultTypeInternal;
extern JumpActionDefaultTypeInternal _JumpAction_default_instance_;
class MovementChanged;
struct MovementChangedDefaultTypeInternal;
extern MovementChangedDefaultTypeInternal _MovementChanged_default_instance_;
class NpcInfo;
struct NpcInfoDefaultTypeInternal;
extern NpcInfoDefaultTypeInternal _NpcInfo_default_instance_;
class NpcSpawnInfo;
struct NpcSpawnInfoDefaultTypeInternal;
extern NpcSpawnInfoDefaultTypeInternal _NpcSpawnInfo_default_instance_;
class PcInfo;
struct PcInfoDefaultTypeInternal;
extern PcInfoDefaultTypeInternal _PcInfo_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class ProjectileInfo;
struct ProjectileInfoDefaultTypeInternal;
extern ProjectileInfoDefaultTypeInternal _ProjectileInfo_default_instance_;
class Quat;
struct QuatDefaultTypeInternal;
extern QuatDefaultTypeInternal _Quat_default_instance_;
class Rotator;
struct RotatorDefaultTypeInternal;
extern RotatorDefaultTypeInternal _Rotator_default_instance_;
class SectionInfo;
struct SectionInfoDefaultTypeInternal;
extern SectionInfoDefaultTypeInternal _SectionInfo_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class Sphere;
struct SphereDefaultTypeInternal;
extern SphereDefaultTypeInternal _Sphere_default_instance_;
class SprintAction;
struct SprintActionDefaultTypeInternal;
extern SprintActionDefaultTypeInternal _SprintAction_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace types
PROTOBUF_NAMESPACE_OPEN
template<> ::types::AxisAndAngle* Arena::CreateMaybeMessage<::types::AxisAndAngle>(Arena*);
template<> ::types::BaseAttackAction* Arena::CreateMaybeMessage<::types::BaseAttackAction>(Arena*);
template<> ::types::Box* Arena::CreateMaybeMessage<::types::Box>(Arena*);
template<> ::types::Capsule* Arena::CreateMaybeMessage<::types::Capsule>(Arena*);
template<> ::types::CharacterInfo* Arena::CreateMaybeMessage<::types::CharacterInfo>(Arena*);
template<> ::types::CharacterPose* Arena::CreateMaybeMessage<::types::CharacterPose>(Arena*);
template<> ::types::ClientAction* Arena::CreateMaybeMessage<::types::ClientAction>(Arena*);
template<> ::types::DebugShapeInfo* Arena::CreateMaybeMessage<::types::DebugShapeInfo>(Arena*);
template<> ::types::JumpAction* Arena::CreateMaybeMessage<::types::JumpAction>(Arena*);
template<> ::types::MovementChanged* Arena::CreateMaybeMessage<::types::MovementChanged>(Arena*);
template<> ::types::NpcInfo* Arena::CreateMaybeMessage<::types::NpcInfo>(Arena*);
template<> ::types::NpcSpawnInfo* Arena::CreateMaybeMessage<::types::NpcSpawnInfo>(Arena*);
template<> ::types::PcInfo* Arena::CreateMaybeMessage<::types::PcInfo>(Arena*);
template<> ::types::Pose* Arena::CreateMaybeMessage<::types::Pose>(Arena*);
template<> ::types::ProjectileInfo* Arena::CreateMaybeMessage<::types::ProjectileInfo>(Arena*);
template<> ::types::Quat* Arena::CreateMaybeMessage<::types::Quat>(Arena*);
template<> ::types::Rotator* Arena::CreateMaybeMessage<::types::Rotator>(Arena*);
template<> ::types::SectionInfo* Arena::CreateMaybeMessage<::types::SectionInfo>(Arena*);
template<> ::types::ServerInfo* Arena::CreateMaybeMessage<::types::ServerInfo>(Arena*);
template<> ::types::Sphere* Arena::CreateMaybeMessage<::types::Sphere>(Arena*);
template<> ::types::SprintAction* Arena::CreateMaybeMessage<::types::SprintAction>(Arena*);
template<> ::types::Transform* Arena::CreateMaybeMessage<::types::Transform>(Arena*);
template<> ::types::Vector2* Arena::CreateMaybeMessage<::types::Vector2>(Arena*);
template<> ::types::Vector3* Arena::CreateMaybeMessage<::types::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace types {

enum protocol : int {
  kInvalid = 0,
  kHello = 4097,
  kPingReq = 4098,
  kPingRes = 4099,
  kContentReadyReq = 4100,
  kContentReadyRes = 4101,
  kHelloClient = 4102,
  kHelloServer = 4103,
  kDisconnectAlertNotify = 4104,
  kRegisterServerReq = 4105,
  kRegisterServerRes = 4106,
  kServerPingReq = 4107,
  kServerPingRes = 4108,
  kHelloClientAck = 4109,
  kWorldServerListReq = 4110,
  kWorldServerListRes = 4111,
  kCreateCharacterReq = 4112,
  kCreateCharacterRes = 4113,
  kGetCharacterListReq = 4114,
  kGetCharacterListRes = 4115,
  kPlayStartCharacterReq = 4116,
  kPlayStartCharacterRes = 4117,
  kHelloWorldServer = 4118,
  kHelloWorldClient = 4119,
  kClientMoveReq = 4120,
  kClientMoveRes = 4121,
  kClientEnterMapNotify = 4128,
  kClientLeaveMapNotify = 4129,
  kOtherClientEnterNotify = 4130,
  kOtherClientLeaveNotify = 4131,
  kClientEnterMapReq = 4132,
  kClientEnterMapRes = 4133,
  kOtherClientMoveNotify = 4134,
  kServerTickIntervalChangedNotify = 4135,
  kChangeServerTickIntervalReq = 4136,
  kChangeServerTickIntervalRes = 4137,
  kClientActionReq = 4138,
  kClientActionRes = 4139,
  kOtherClientActionNotify = 4140,
  kSectionOwnershipChangedNotify = 4141,
  kSpawnNpcOnSectionReq = 4142,
  kSpawnNpcOnSectionRes = 4143,
  kSpawnNpcOnSectionNotify = 4144,
  kSpawnProjectileOnSectionReq = 4145,
  kSpawnProjectileOnSectionRes = 4146,
  kSpawnProjectileOnSectionNotify = 4147,
  kHitObjectByProjectileReq = 4148,
  kHitObjectByProjectileRes = 4149,
  kHitObjectByProjectileNotify = 4150,
  kDespawnNpcOnSectionNotify = 4151,
  kDespawnProjectileOnSectionNotify = 4152,
  kDebugSimulationPositionNotify = 4153,
  protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool protocol_IsValid(int value);
constexpr protocol protocol_MIN = kInvalid;
constexpr protocol protocol_MAX = kDebugSimulationPositionNotify;
constexpr int protocol_ARRAYSIZE = protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* protocol_descriptor();
template<typename T>
inline const std::string& protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    protocol_descriptor(), enum_t_value);
}
inline bool protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<protocol>(
    protocol_descriptor(), name, value);
}
enum Result : int {
  kSuccess = 0,
  kUnknown = 1,
  kInvalidRequest = 2,
  kInvalidParameter = 3,
  kNotFound = 4,
  kInternalError = 5,
  kDatabaseError = 6,
  kDuplicatedName = 7,
  kAccessTokenExpired = 8,
  kInvalidServerId = 9,
  kInvalidCharacterId = 10,
  kInvalidUserId = 11,
  kInvalidCooldown = 12,
  kUnauthorized = 13,
  kInvalidSpeed = 14,
  kInvalidPosition = 15,
  kInvalidRotation = 16,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Result_IsValid(int value);
constexpr Result Result_MIN = kSuccess;
constexpr Result Result_MAX = kInvalidRotation;
constexpr int Result_ARRAYSIZE = Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor();
template<typename T>
inline const std::string& Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_descriptor(), enum_t_value);
}
inline bool Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
enum Color : int {
  kRed = 0,
  kBlue = 1,
  kGreen = 2,
  kYellow = 3,
  kWhite = 4,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = kRed;
constexpr Color Color_MAX = kWhite;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
enum DebugShape : int {
  kSphere = 0,
  kBox = 1,
  kCapsule = 2,
  DebugShape_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DebugShape_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DebugShape_IsValid(int value);
constexpr DebugShape DebugShape_MIN = kSphere;
constexpr DebugShape DebugShape_MAX = kCapsule;
constexpr int DebugShape_ARRAYSIZE = DebugShape_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DebugShape_descriptor();
template<typename T>
inline const std::string& DebugShape_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DebugShape>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DebugShape_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DebugShape_descriptor(), enum_t_value);
}
inline bool DebugShape_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DebugShape* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DebugShape>(
    DebugShape_descriptor(), name, value);
}
enum ServerType : int {
  kUnknownServer = 0,
  kDedicatedServer = 1,
  kWorldServer = 2,
  kLobbyServer = 3,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerType_IsValid(int value);
constexpr ServerType ServerType_MIN = kUnknownServer;
constexpr ServerType ServerType_MAX = kLobbyServer;
constexpr int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerType_descriptor();
template<typename T>
inline const std::string& ServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerType_descriptor(), enum_t_value);
}
inline bool ServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kCurrentPlayerNumFieldNumber = 4,
  };
  // string server_address = 2;
  void clear_server_address();
  const std::string& server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_address();
  PROTOBUF_NODISCARD std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int32 current_player_num = 4;
  void clear_current_player_num();
  int32_t current_player_num() const;
  void set_current_player_num(int32_t value);
  private:
  int32_t _internal_current_player_num() const;
  void _internal_set_current_player_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
    int32_t server_id_;
    int32_t current_player_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class CharacterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.CharacterInfo) */ {
 public:
  inline CharacterInfo() : CharacterInfo(nullptr) {}
  ~CharacterInfo() override;
  explicit PROTOBUF_CONSTEXPR CharacterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterInfo(const CharacterInfo& from);
  CharacterInfo(CharacterInfo&& from) noexcept
    : CharacterInfo() {
    *this = ::std::move(from);
  }

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInfo& operator=(CharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterInfo*>(
               &_CharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CharacterInfo& a, CharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterInfo& from) {
    CharacterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.CharacterInfo";
  }
  protected:
  explicit CharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterNameFieldNumber = 2,
    kLastPlayedFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kCharacterIdFieldNumber = 1,
    kAccountIdFieldNumber = 3,
    kServerIdFieldNumber = 4,
    kLevelFieldNumber = 5,
    kExpFieldNumber = 6,
  };
  // string character_name = 2;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // .google.protobuf.Timestamp last_played = 7;
  bool has_last_played() const;
  private:
  bool _internal_has_last_played() const;
  public:
  void clear_last_played();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_played() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_played();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_played();
  void set_allocated_last_played(::PROTOBUF_NAMESPACE_ID::Timestamp* last_played);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_played() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_played();
  public:
  void unsafe_arena_set_allocated_last_played(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_played);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_played();

  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int64 character_id = 1;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // int64 account_id = 3;
  void clear_account_id();
  int64_t account_id() const;
  void set_account_id(int64_t value);
  private:
  int64_t _internal_account_id() const;
  void _internal_set_account_id(int64_t value);
  public:

  // int32 server_id = 4;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int32 level = 5;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int64 exp = 6;
  void clear_exp();
  int64_t exp() const;
  void set_exp(int64_t value);
  private:
  int64_t _internal_exp() const;
  void _internal_set_exp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.CharacterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_played_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    int64_t character_id_;
    int64_t account_id_;
    int32_t server_id_;
    int32_t level_;
    int64_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Vector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit PROTOBUF_CONSTEXPR Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2& from) {
    Vector2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Vector2";
  }
  protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Quat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Quat) */ {
 public:
  inline Quat() : Quat(nullptr) {}
  ~Quat() override;
  explicit PROTOBUF_CONSTEXPR Quat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quat(const Quat& from);
  Quat(Quat&& from) noexcept
    : Quat() {
    *this = ::std::move(from);
  }

  inline Quat& operator=(const Quat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quat& operator=(Quat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quat* internal_default_instance() {
    return reinterpret_cast<const Quat*>(
               &_Quat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Quat& a, Quat& b) {
    a.Swap(&b);
  }
  inline void Swap(Quat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quat& from) {
    Quat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Quat";
  }
  protected:
  explicit Quat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float w = 4;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.Quat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float w_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Rotator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Rotator) */ {
 public:
  inline Rotator() : Rotator(nullptr) {}
  ~Rotator() override;
  explicit PROTOBUF_CONSTEXPR Rotator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotator(const Rotator& from);
  Rotator(Rotator&& from) noexcept
    : Rotator() {
    *this = ::std::move(from);
  }

  inline Rotator& operator=(const Rotator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotator& operator=(Rotator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotator* internal_default_instance() {
    return reinterpret_cast<const Rotator*>(
               &_Rotator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Rotator& a, Rotator& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rotator& from) {
    Rotator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Rotator";
  }
  protected:
  explicit Rotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float roll = 1;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.Rotator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float roll_;
    float pitch_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Pose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() override;
  explicit PROTOBUF_CONSTEXPR Pose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pose& from) {
    Pose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .types.Vector3 location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::types::Vector3& location() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_location();
  ::types::Vector3* mutable_location();
  void set_allocated_location(::types::Vector3* location);
  private:
  const ::types::Vector3& _internal_location() const;
  ::types::Vector3* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::types::Vector3* location);
  ::types::Vector3* unsafe_arena_release_location();

  // .types.Rotator rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::types::Rotator& rotation() const;
  PROTOBUF_NODISCARD ::types::Rotator* release_rotation();
  ::types::Rotator* mutable_rotation();
  void set_allocated_rotation(::types::Rotator* rotation);
  private:
  const ::types::Rotator& _internal_rotation() const;
  ::types::Rotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::types::Rotator* rotation);
  ::types::Rotator* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:types.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Vector3* location_;
    ::types::Rotator* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit PROTOBUF_CONSTEXPR Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transform& from) {
    Transform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kRotationFieldNumber = 2,
    kScaleFieldNumber = 3,
  };
  // .types.Vector3 location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::types::Vector3& location() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_location();
  ::types::Vector3* mutable_location();
  void set_allocated_location(::types::Vector3* location);
  private:
  const ::types::Vector3& _internal_location() const;
  ::types::Vector3* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::types::Vector3* location);
  ::types::Vector3* unsafe_arena_release_location();

  // .types.Rotator rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::types::Rotator& rotation() const;
  PROTOBUF_NODISCARD ::types::Rotator* release_rotation();
  ::types::Rotator* mutable_rotation();
  void set_allocated_rotation(::types::Rotator* rotation);
  private:
  const ::types::Rotator& _internal_rotation() const;
  ::types::Rotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::types::Rotator* rotation);
  ::types::Rotator* unsafe_arena_release_rotation();

  // .types.Vector3 scale = 3;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::types::Vector3& scale() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_scale();
  ::types::Vector3* mutable_scale();
  void set_allocated_scale(::types::Vector3* scale);
  private:
  const ::types::Vector3& _internal_scale() const;
  ::types::Vector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::types::Vector3* scale);
  ::types::Vector3* unsafe_arena_release_scale();

  // @@protoc_insertion_point(class_scope:types.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Vector3* location_;
    ::types::Rotator* rotation_;
    ::types::Vector3* scale_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class AxisAndAngle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.AxisAndAngle) */ {
 public:
  inline AxisAndAngle() : AxisAndAngle(nullptr) {}
  ~AxisAndAngle() override;
  explicit PROTOBUF_CONSTEXPR AxisAndAngle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AxisAndAngle(const AxisAndAngle& from);
  AxisAndAngle(AxisAndAngle&& from) noexcept
    : AxisAndAngle() {
    *this = ::std::move(from);
  }

  inline AxisAndAngle& operator=(const AxisAndAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AxisAndAngle& operator=(AxisAndAngle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AxisAndAngle& default_instance() {
    return *internal_default_instance();
  }
  static inline const AxisAndAngle* internal_default_instance() {
    return reinterpret_cast<const AxisAndAngle*>(
               &_AxisAndAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AxisAndAngle& a, AxisAndAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(AxisAndAngle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AxisAndAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AxisAndAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AxisAndAngle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AxisAndAngle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AxisAndAngle& from) {
    AxisAndAngle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AxisAndAngle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.AxisAndAngle";
  }
  protected:
  explicit AxisAndAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kAngleInRadFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float angle_in_rad = 4;
  void clear_angle_in_rad();
  float angle_in_rad() const;
  void set_angle_in_rad(float value);
  private:
  float _internal_angle_in_rad() const;
  void _internal_set_angle_in_rad(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.AxisAndAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    float angle_in_rad_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class CharacterPose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.CharacterPose) */ {
 public:
  inline CharacterPose() : CharacterPose(nullptr) {}
  ~CharacterPose() override;
  explicit PROTOBUF_CONSTEXPR CharacterPose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterPose(const CharacterPose& from);
  CharacterPose(CharacterPose&& from) noexcept
    : CharacterPose() {
    *this = ::std::move(from);
  }

  inline CharacterPose& operator=(const CharacterPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterPose& operator=(CharacterPose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterPose& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterPose* internal_default_instance() {
    return reinterpret_cast<const CharacterPose*>(
               &_CharacterPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CharacterPose& a, CharacterPose& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterPose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterPose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterPose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterPose& from) {
    CharacterPose::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterPose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.CharacterPose";
  }
  protected:
  explicit CharacterPose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kAccelerationFieldNumber = 4,
    kAngularVelocityFieldNumber = 6,
    kAimRotationFieldNumber = 7,
    kAimAngularVelocityFieldNumber = 8,
    kNetDelayMsFieldNumber = 9,
  };
  // .types.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::types::Vector3& position() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_position();
  ::types::Vector3* mutable_position();
  void set_allocated_position(::types::Vector3* position);
  private:
  const ::types::Vector3& _internal_position() const;
  ::types::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::types::Vector3* position);
  ::types::Vector3* unsafe_arena_release_position();

  // .types.Rotator rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::types::Rotator& rotation() const;
  PROTOBUF_NODISCARD ::types::Rotator* release_rotation();
  ::types::Rotator* mutable_rotation();
  void set_allocated_rotation(::types::Rotator* rotation);
  private:
  const ::types::Rotator& _internal_rotation() const;
  ::types::Rotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::types::Rotator* rotation);
  ::types::Rotator* unsafe_arena_release_rotation();

  // .types.Vector3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::types::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_velocity();
  ::types::Vector3* mutable_velocity();
  void set_allocated_velocity(::types::Vector3* velocity);
  private:
  const ::types::Vector3& _internal_velocity() const;
  ::types::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::types::Vector3* velocity);
  ::types::Vector3* unsafe_arena_release_velocity();

  // .types.Vector3 acceleration = 4;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::types::Vector3& acceleration() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_acceleration();
  ::types::Vector3* mutable_acceleration();
  void set_allocated_acceleration(::types::Vector3* acceleration);
  private:
  const ::types::Vector3& _internal_acceleration() const;
  ::types::Vector3* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::types::Vector3* acceleration);
  ::types::Vector3* unsafe_arena_release_acceleration();

  // .types.AxisAndAngle angular_velocity = 6;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  const ::types::AxisAndAngle& angular_velocity() const;
  PROTOBUF_NODISCARD ::types::AxisAndAngle* release_angular_velocity();
  ::types::AxisAndAngle* mutable_angular_velocity();
  void set_allocated_angular_velocity(::types::AxisAndAngle* angular_velocity);
  private:
  const ::types::AxisAndAngle& _internal_angular_velocity() const;
  ::types::AxisAndAngle* _internal_mutable_angular_velocity();
  public:
  void unsafe_arena_set_allocated_angular_velocity(
      ::types::AxisAndAngle* angular_velocity);
  ::types::AxisAndAngle* unsafe_arena_release_angular_velocity();

  // .types.Rotator aim_rotation = 7;
  bool has_aim_rotation() const;
  private:
  bool _internal_has_aim_rotation() const;
  public:
  void clear_aim_rotation();
  const ::types::Rotator& aim_rotation() const;
  PROTOBUF_NODISCARD ::types::Rotator* release_aim_rotation();
  ::types::Rotator* mutable_aim_rotation();
  void set_allocated_aim_rotation(::types::Rotator* aim_rotation);
  private:
  const ::types::Rotator& _internal_aim_rotation() const;
  ::types::Rotator* _internal_mutable_aim_rotation();
  public:
  void unsafe_arena_set_allocated_aim_rotation(
      ::types::Rotator* aim_rotation);
  ::types::Rotator* unsafe_arena_release_aim_rotation();

  // .types.AxisAndAngle aim_angular_velocity = 8;
  bool has_aim_angular_velocity() const;
  private:
  bool _internal_has_aim_angular_velocity() const;
  public:
  void clear_aim_angular_velocity();
  const ::types::AxisAndAngle& aim_angular_velocity() const;
  PROTOBUF_NODISCARD ::types::AxisAndAngle* release_aim_angular_velocity();
  ::types::AxisAndAngle* mutable_aim_angular_velocity();
  void set_allocated_aim_angular_velocity(::types::AxisAndAngle* aim_angular_velocity);
  private:
  const ::types::AxisAndAngle& _internal_aim_angular_velocity() const;
  ::types::AxisAndAngle* _internal_mutable_aim_angular_velocity();
  public:
  void unsafe_arena_set_allocated_aim_angular_velocity(
      ::types::AxisAndAngle* aim_angular_velocity);
  ::types::AxisAndAngle* unsafe_arena_release_aim_angular_velocity();

  // float net_delay_ms = 9;
  void clear_net_delay_ms();
  float net_delay_ms() const;
  void set_net_delay_ms(float value);
  private:
  float _internal_net_delay_ms() const;
  void _internal_set_net_delay_ms(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.CharacterPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Vector3* position_;
    ::types::Rotator* rotation_;
    ::types::Vector3* velocity_;
    ::types::Vector3* acceleration_;
    ::types::AxisAndAngle* angular_velocity_;
    ::types::Rotator* aim_rotation_;
    ::types::AxisAndAngle* aim_angular_velocity_;
    float net_delay_ms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class NpcInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.NpcInfo) */ {
 public:
  inline NpcInfo() : NpcInfo(nullptr) {}
  ~NpcInfo() override;
  explicit PROTOBUF_CONSTEXPR NpcInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NpcInfo(const NpcInfo& from);
  NpcInfo(NpcInfo&& from) noexcept
    : NpcInfo() {
    *this = ::std::move(from);
  }

  inline NpcInfo& operator=(const NpcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcInfo& operator=(NpcInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NpcInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NpcInfo* internal_default_instance() {
    return reinterpret_cast<const NpcInfo*>(
               &_NpcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NpcInfo& a, NpcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NpcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NpcInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NpcInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NpcInfo& from) {
    NpcInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NpcInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.NpcInfo";
  }
  protected:
  explicit NpcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kObjectIdFieldNumber = 2,
    kCurrentHpFieldNumber = 3,
    kSpawnerIdFieldNumber = 4,
  };
  // .types.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::types::Pose& pose() const;
  PROTOBUF_NODISCARD ::types::Pose* release_pose();
  ::types::Pose* mutable_pose();
  void set_allocated_pose(::types::Pose* pose);
  private:
  const ::types::Pose& _internal_pose() const;
  ::types::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::types::Pose* pose);
  ::types::Pose* unsafe_arena_release_pose();

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 current_hp = 3;
  void clear_current_hp();
  int64_t current_hp() const;
  void set_current_hp(int64_t value);
  private:
  int64_t _internal_current_hp() const;
  void _internal_set_current_hp(int64_t value);
  public:

  // int32 spawner_id = 4;
  void clear_spawner_id();
  int32_t spawner_id() const;
  void set_spawner_id(int32_t value);
  private:
  int32_t _internal_spawner_id() const;
  void _internal_set_spawner_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.NpcInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Pose* pose_;
    int64_t object_id_;
    int64_t current_hp_;
    int32_t spawner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class NpcSpawnInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.NpcSpawnInfo) */ {
 public:
  inline NpcSpawnInfo() : NpcSpawnInfo(nullptr) {}
  ~NpcSpawnInfo() override;
  explicit PROTOBUF_CONSTEXPR NpcSpawnInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NpcSpawnInfo(const NpcSpawnInfo& from);
  NpcSpawnInfo(NpcSpawnInfo&& from) noexcept
    : NpcSpawnInfo() {
    *this = ::std::move(from);
  }

  inline NpcSpawnInfo& operator=(const NpcSpawnInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NpcSpawnInfo& operator=(NpcSpawnInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NpcSpawnInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NpcSpawnInfo* internal_default_instance() {
    return reinterpret_cast<const NpcSpawnInfo*>(
               &_NpcSpawnInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(NpcSpawnInfo& a, NpcSpawnInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NpcSpawnInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NpcSpawnInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NpcSpawnInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NpcSpawnInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NpcSpawnInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NpcSpawnInfo& from) {
    NpcSpawnInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NpcSpawnInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.NpcSpawnInfo";
  }
  protected:
  explicit NpcSpawnInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kSpawnerIdFieldNumber = 2,
  };
  // .types.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::types::Pose& pose() const;
  PROTOBUF_NODISCARD ::types::Pose* release_pose();
  ::types::Pose* mutable_pose();
  void set_allocated_pose(::types::Pose* pose);
  private:
  const ::types::Pose& _internal_pose() const;
  ::types::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::types::Pose* pose);
  ::types::Pose* unsafe_arena_release_pose();

  // int32 spawner_id = 2;
  void clear_spawner_id();
  int32_t spawner_id() const;
  void set_spawner_id(int32_t value);
  private:
  int32_t _internal_spawner_id() const;
  void _internal_set_spawner_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.NpcSpawnInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Pose* pose_;
    int32_t spawner_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ProjectileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ProjectileInfo) */ {
 public:
  inline ProjectileInfo() : ProjectileInfo(nullptr) {}
  ~ProjectileInfo() override;
  explicit PROTOBUF_CONSTEXPR ProjectileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectileInfo(const ProjectileInfo& from);
  ProjectileInfo(ProjectileInfo&& from) noexcept
    : ProjectileInfo() {
    *this = ::std::move(from);
  }

  inline ProjectileInfo& operator=(const ProjectileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectileInfo& operator=(ProjectileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectileInfo* internal_default_instance() {
    return reinterpret_cast<const ProjectileInfo*>(
               &_ProjectileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProjectileInfo& a, ProjectileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectileInfo& from) {
    ProjectileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ProjectileInfo";
  }
  protected:
  explicit ProjectileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kDirectionFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kActionTimeFieldNumber = 7,
    kObjectIdFieldNumber = 2,
    kActionIdFieldNumber = 6,
    kTriggerIdFieldNumber = 8,
    kInitialSpeedFieldNumber = 3,
  };
  // .types.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::types::Pose& pose() const;
  PROTOBUF_NODISCARD ::types::Pose* release_pose();
  ::types::Pose* mutable_pose();
  void set_allocated_pose(::types::Pose* pose);
  private:
  const ::types::Pose& _internal_pose() const;
  ::types::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::types::Pose* pose);
  ::types::Pose* unsafe_arena_release_pose();

  // .types.Vector3 direction = 4;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::types::Vector3& direction() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_direction();
  ::types::Vector3* mutable_direction();
  void set_allocated_direction(::types::Vector3* direction);
  private:
  const ::types::Vector3& _internal_direction() const;
  ::types::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::types::Vector3* direction);
  ::types::Vector3* unsafe_arena_release_direction();

  // .types.Vector3 velocity = 5;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::types::Vector3& velocity() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_velocity();
  ::types::Vector3* mutable_velocity();
  void set_allocated_velocity(::types::Vector3* velocity);
  private:
  const ::types::Vector3& _internal_velocity() const;
  ::types::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::types::Vector3* velocity);
  ::types::Vector3* unsafe_arena_release_velocity();

  // .google.protobuf.Timestamp action_time = 7;
  bool has_action_time() const;
  private:
  bool _internal_has_action_time() const;
  public:
  void clear_action_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& action_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_action_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_action_time();
  void set_allocated_action_time(::PROTOBUF_NAMESPACE_ID::Timestamp* action_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_action_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_action_time();
  public:
  void unsafe_arena_set_allocated_action_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* action_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_action_time();

  // int64 object_id = 2;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int64 action_id = 6;
  void clear_action_id();
  int64_t action_id() const;
  void set_action_id(int64_t value);
  private:
  int64_t _internal_action_id() const;
  void _internal_set_action_id(int64_t value);
  public:

  // int64 trigger_id = 8;
  void clear_trigger_id();
  int64_t trigger_id() const;
  void set_trigger_id(int64_t value);
  private:
  int64_t _internal_trigger_id() const;
  void _internal_set_trigger_id(int64_t value);
  public:

  // float initial_speed = 3;
  void clear_initial_speed();
  float initial_speed() const;
  void set_initial_speed(float value);
  private:
  float _internal_initial_speed() const;
  void _internal_set_initial_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.ProjectileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Pose* pose_;
    ::types::Vector3* direction_;
    ::types::Vector3* velocity_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* action_time_;
    int64_t object_id_;
    int64_t action_id_;
    int64_t trigger_id_;
    float initial_speed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class PcInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.PcInfo) */ {
 public:
  inline PcInfo() : PcInfo(nullptr) {}
  ~PcInfo() override;
  explicit PROTOBUF_CONSTEXPR PcInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PcInfo(const PcInfo& from);
  PcInfo(PcInfo&& from) noexcept
    : PcInfo() {
    *this = ::std::move(from);
  }

  inline PcInfo& operator=(const PcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PcInfo& operator=(PcInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PcInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PcInfo* internal_default_instance() {
    return reinterpret_cast<const PcInfo*>(
               &_PcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PcInfo& a, PcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PcInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PcInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PcInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PcInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PcInfo& from) {
    PcInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PcInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.PcInfo";
  }
  protected:
  explicit PcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterPoseFieldNumber = 3,
    kCharacterIdFieldNumber = 1,
    kObjectIdFieldNumber = 4,
    kServerIdFieldNumber = 2,
  };
  // .types.CharacterPose character_pose = 3;
  bool has_character_pose() const;
  private:
  bool _internal_has_character_pose() const;
  public:
  void clear_character_pose();
  const ::types::CharacterPose& character_pose() const;
  PROTOBUF_NODISCARD ::types::CharacterPose* release_character_pose();
  ::types::CharacterPose* mutable_character_pose();
  void set_allocated_character_pose(::types::CharacterPose* character_pose);
  private:
  const ::types::CharacterPose& _internal_character_pose() const;
  ::types::CharacterPose* _internal_mutable_character_pose();
  public:
  void unsafe_arena_set_allocated_character_pose(
      ::types::CharacterPose* character_pose);
  ::types::CharacterPose* unsafe_arena_release_character_pose();

  // int64 character_id = 1;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // int64 object_id = 4;
  void clear_object_id();
  int64_t object_id() const;
  void set_object_id(int64_t value);
  private:
  int64_t _internal_object_id() const;
  void _internal_set_object_id(int64_t value);
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.PcInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::CharacterPose* character_pose_;
    int64_t character_id_;
    int64_t object_id_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SectionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.SectionInfo) */ {
 public:
  inline SectionInfo() : SectionInfo(nullptr) {}
  ~SectionInfo() override;
  explicit PROTOBUF_CONSTEXPR SectionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SectionInfo(const SectionInfo& from);
  SectionInfo(SectionInfo&& from) noexcept
    : SectionInfo() {
    *this = ::std::move(from);
  }

  inline SectionInfo& operator=(const SectionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SectionInfo& operator=(SectionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SectionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SectionInfo* internal_default_instance() {
    return reinterpret_cast<const SectionInfo*>(
               &_SectionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SectionInfo& a, SectionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SectionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SectionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SectionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SectionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SectionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SectionInfo& from) {
    SectionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SectionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.SectionInfo";
  }
  protected:
  explicit SectionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNpcInfosFieldNumber = 3,
    kPcInfosFieldNumber = 4,
    kProjectileInfosFieldNumber = 5,
    kSectionIdFieldNumber = 1,
    kOwnerCharacterIdFieldNumber = 6,
    kMapUidFieldNumber = 2,
  };
  // repeated .types.NpcInfo npc_infos = 3;
  int npc_infos_size() const;
  private:
  int _internal_npc_infos_size() const;
  public:
  void clear_npc_infos();
  ::types::NpcInfo* mutable_npc_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >*
      mutable_npc_infos();
  private:
  const ::types::NpcInfo& _internal_npc_infos(int index) const;
  ::types::NpcInfo* _internal_add_npc_infos();
  public:
  const ::types::NpcInfo& npc_infos(int index) const;
  ::types::NpcInfo* add_npc_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >&
      npc_infos() const;

  // repeated .types.PcInfo pc_infos = 4;
  int pc_infos_size() const;
  private:
  int _internal_pc_infos_size() const;
  public:
  void clear_pc_infos();
  ::types::PcInfo* mutable_pc_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PcInfo >*
      mutable_pc_infos();
  private:
  const ::types::PcInfo& _internal_pc_infos(int index) const;
  ::types::PcInfo* _internal_add_pc_infos();
  public:
  const ::types::PcInfo& pc_infos(int index) const;
  ::types::PcInfo* add_pc_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PcInfo >&
      pc_infos() const;

  // repeated .types.ProjectileInfo projectile_infos = 5;
  int projectile_infos_size() const;
  private:
  int _internal_projectile_infos_size() const;
  public:
  void clear_projectile_infos();
  ::types::ProjectileInfo* mutable_projectile_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ProjectileInfo >*
      mutable_projectile_infos();
  private:
  const ::types::ProjectileInfo& _internal_projectile_infos(int index) const;
  ::types::ProjectileInfo* _internal_add_projectile_infos();
  public:
  const ::types::ProjectileInfo& projectile_infos(int index) const;
  ::types::ProjectileInfo* add_projectile_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ProjectileInfo >&
      projectile_infos() const;

  // uint64 section_id = 1;
  void clear_section_id();
  uint64_t section_id() const;
  void set_section_id(uint64_t value);
  private:
  uint64_t _internal_section_id() const;
  void _internal_set_section_id(uint64_t value);
  public:

  // int64 owner_character_id = 6;
  void clear_owner_character_id();
  int64_t owner_character_id() const;
  void set_owner_character_id(int64_t value);
  private:
  int64_t _internal_owner_character_id() const;
  void _internal_set_owner_character_id(int64_t value);
  public:

  // int32 map_uid = 2;
  void clear_map_uid();
  int32_t map_uid() const;
  void set_map_uid(int32_t value);
  private:
  int32_t _internal_map_uid() const;
  void _internal_set_map_uid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.SectionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo > npc_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PcInfo > pc_infos_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ProjectileInfo > projectile_infos_;
    uint64_t section_id_;
    int64_t owner_character_id_;
    int32_t map_uid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class JumpAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.JumpAction) */ {
 public:
  inline JumpAction() : JumpAction(nullptr) {}
  ~JumpAction() override;
  explicit PROTOBUF_CONSTEXPR JumpAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JumpAction(const JumpAction& from);
  JumpAction(JumpAction&& from) noexcept
    : JumpAction() {
    *this = ::std::move(from);
  }

  inline JumpAction& operator=(const JumpAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline JumpAction& operator=(JumpAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JumpAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const JumpAction* internal_default_instance() {
    return reinterpret_cast<const JumpAction*>(
               &_JumpAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(JumpAction& a, JumpAction& b) {
    a.Swap(&b);
  }
  inline void Swap(JumpAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JumpAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JumpAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JumpAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JumpAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JumpAction& from) {
    JumpAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JumpAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.JumpAction";
  }
  protected:
  explicit JumpAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsJumpFieldNumber = 1,
  };
  // bool is_jump = 1;
  void clear_is_jump();
  bool is_jump() const;
  void set_is_jump(bool value);
  private:
  bool _internal_is_jump() const;
  void _internal_set_is_jump(bool value);
  public:

  // @@protoc_insertion_point(class_scope:types.JumpAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_jump_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class MovementChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.MovementChanged) */ {
 public:
  inline MovementChanged() : MovementChanged(nullptr) {}
  ~MovementChanged() override;
  explicit PROTOBUF_CONSTEXPR MovementChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MovementChanged(const MovementChanged& from);
  MovementChanged(MovementChanged&& from) noexcept
    : MovementChanged() {
    *this = ::std::move(from);
  }

  inline MovementChanged& operator=(const MovementChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovementChanged& operator=(MovementChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MovementChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const MovementChanged* internal_default_instance() {
    return reinterpret_cast<const MovementChanged*>(
               &_MovementChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MovementChanged& a, MovementChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(MovementChanged* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MovementChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MovementChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MovementChanged>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MovementChanged& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MovementChanged& from) {
    MovementChanged::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovementChanged* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.MovementChanged";
  }
  protected:
  explicit MovementChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMovementModeFieldNumber = 1,
  };
  // sint32 movement_mode = 1;
  void clear_movement_mode();
  int32_t movement_mode() const;
  void set_movement_mode(int32_t value);
  private:
  int32_t _internal_movement_mode() const;
  void _internal_set_movement_mode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:types.MovementChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t movement_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class SprintAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.SprintAction) */ {
 public:
  inline SprintAction() : SprintAction(nullptr) {}
  ~SprintAction() override;
  explicit PROTOBUF_CONSTEXPR SprintAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SprintAction(const SprintAction& from);
  SprintAction(SprintAction&& from) noexcept
    : SprintAction() {
    *this = ::std::move(from);
  }

  inline SprintAction& operator=(const SprintAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SprintAction& operator=(SprintAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SprintAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const SprintAction* internal_default_instance() {
    return reinterpret_cast<const SprintAction*>(
               &_SprintAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SprintAction& a, SprintAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SprintAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SprintAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SprintAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SprintAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SprintAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SprintAction& from) {
    SprintAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SprintAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.SprintAction";
  }
  protected:
  explicit SprintAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSprintFieldNumber = 1,
  };
  // bool is_sprint = 1;
  void clear_is_sprint();
  bool is_sprint() const;
  void set_is_sprint(bool value);
  private:
  bool _internal_is_sprint() const;
  void _internal_set_is_sprint(bool value);
  public:

  // @@protoc_insertion_point(class_scope:types.SprintAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_sprint_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class BaseAttackAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.BaseAttackAction) */ {
 public:
  inline BaseAttackAction() : BaseAttackAction(nullptr) {}
  ~BaseAttackAction() override;
  explicit PROTOBUF_CONSTEXPR BaseAttackAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseAttackAction(const BaseAttackAction& from);
  BaseAttackAction(BaseAttackAction&& from) noexcept
    : BaseAttackAction() {
    *this = ::std::move(from);
  }

  inline BaseAttackAction& operator=(const BaseAttackAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseAttackAction& operator=(BaseAttackAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseAttackAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseAttackAction* internal_default_instance() {
    return reinterpret_cast<const BaseAttackAction*>(
               &_BaseAttackAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BaseAttackAction& a, BaseAttackAction& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseAttackAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseAttackAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseAttackAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseAttackAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseAttackAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseAttackAction& from) {
    BaseAttackAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseAttackAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.BaseAttackAction";
  }
  protected:
  explicit BaseAttackAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientTimestampFieldNumber = 1,
  };
  // float client_timestamp = 1;
  void clear_client_timestamp();
  float client_timestamp() const;
  void set_client_timestamp(float value);
  private:
  float _internal_client_timestamp() const;
  void _internal_set_client_timestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.BaseAttackAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float client_timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ClientAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.ClientAction) */ {
 public:
  inline ClientAction() : ClientAction(nullptr) {}
  ~ClientAction() override;
  explicit PROTOBUF_CONSTEXPR ClientAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientAction(const ClientAction& from);
  ClientAction(ClientAction&& from) noexcept
    : ClientAction() {
    *this = ::std::move(from);
  }

  inline ClientAction& operator=(const ClientAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAction& operator=(ClientAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientAction& default_instance() {
    return *internal_default_instance();
  }
  enum ClientActionFieldCase {
    kJumpAction = 1,
    kSprintAction = 2,
    kMovementChangedAction = 3,
    kBaseAttackAction = 4,
    CLIENTACTIONFIELD_NOT_SET = 0,
  };

  static inline const ClientAction* internal_default_instance() {
    return reinterpret_cast<const ClientAction*>(
               &_ClientAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ClientAction& a, ClientAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientAction& from) {
    ClientAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.ClientAction";
  }
  protected:
  explicit ClientAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJumpActionFieldNumber = 1,
    kSprintActionFieldNumber = 2,
    kMovementChangedActionFieldNumber = 3,
    kBaseAttackActionFieldNumber = 4,
  };
  // .types.JumpAction jump_action = 1;
  bool has_jump_action() const;
  private:
  bool _internal_has_jump_action() const;
  public:
  void clear_jump_action();
  const ::types::JumpAction& jump_action() const;
  PROTOBUF_NODISCARD ::types::JumpAction* release_jump_action();
  ::types::JumpAction* mutable_jump_action();
  void set_allocated_jump_action(::types::JumpAction* jump_action);
  private:
  const ::types::JumpAction& _internal_jump_action() const;
  ::types::JumpAction* _internal_mutable_jump_action();
  public:
  void unsafe_arena_set_allocated_jump_action(
      ::types::JumpAction* jump_action);
  ::types::JumpAction* unsafe_arena_release_jump_action();

  // .types.SprintAction sprint_action = 2;
  bool has_sprint_action() const;
  private:
  bool _internal_has_sprint_action() const;
  public:
  void clear_sprint_action();
  const ::types::SprintAction& sprint_action() const;
  PROTOBUF_NODISCARD ::types::SprintAction* release_sprint_action();
  ::types::SprintAction* mutable_sprint_action();
  void set_allocated_sprint_action(::types::SprintAction* sprint_action);
  private:
  const ::types::SprintAction& _internal_sprint_action() const;
  ::types::SprintAction* _internal_mutable_sprint_action();
  public:
  void unsafe_arena_set_allocated_sprint_action(
      ::types::SprintAction* sprint_action);
  ::types::SprintAction* unsafe_arena_release_sprint_action();

  // .types.MovementChanged movement_changed_action = 3;
  bool has_movement_changed_action() const;
  private:
  bool _internal_has_movement_changed_action() const;
  public:
  void clear_movement_changed_action();
  const ::types::MovementChanged& movement_changed_action() const;
  PROTOBUF_NODISCARD ::types::MovementChanged* release_movement_changed_action();
  ::types::MovementChanged* mutable_movement_changed_action();
  void set_allocated_movement_changed_action(::types::MovementChanged* movement_changed_action);
  private:
  const ::types::MovementChanged& _internal_movement_changed_action() const;
  ::types::MovementChanged* _internal_mutable_movement_changed_action();
  public:
  void unsafe_arena_set_allocated_movement_changed_action(
      ::types::MovementChanged* movement_changed_action);
  ::types::MovementChanged* unsafe_arena_release_movement_changed_action();

  // .types.BaseAttackAction base_attack_action = 4;
  bool has_base_attack_action() const;
  private:
  bool _internal_has_base_attack_action() const;
  public:
  void clear_base_attack_action();
  const ::types::BaseAttackAction& base_attack_action() const;
  PROTOBUF_NODISCARD ::types::BaseAttackAction* release_base_attack_action();
  ::types::BaseAttackAction* mutable_base_attack_action();
  void set_allocated_base_attack_action(::types::BaseAttackAction* base_attack_action);
  private:
  const ::types::BaseAttackAction& _internal_base_attack_action() const;
  ::types::BaseAttackAction* _internal_mutable_base_attack_action();
  public:
  void unsafe_arena_set_allocated_base_attack_action(
      ::types::BaseAttackAction* base_attack_action);
  ::types::BaseAttackAction* unsafe_arena_release_base_attack_action();

  void clear_ClientActionField();
  ClientActionFieldCase ClientActionField_case() const;
  // @@protoc_insertion_point(class_scope:types.ClientAction)
 private:
  class _Internal;
  void set_has_jump_action();
  void set_has_sprint_action();
  void set_has_movement_changed_action();
  void set_has_base_attack_action();

  inline bool has_ClientActionField() const;
  inline void clear_has_ClientActionField();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ClientActionFieldUnion {
      constexpr ClientActionFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::types::JumpAction* jump_action_;
      ::types::SprintAction* sprint_action_;
      ::types::MovementChanged* movement_changed_action_;
      ::types::BaseAttackAction* base_attack_action_;
    } ClientActionField_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Sphere final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Sphere) */ {
 public:
  inline Sphere() : Sphere(nullptr) {}
  ~Sphere() override;
  explicit PROTOBUF_CONSTEXPR Sphere(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sphere(const Sphere& from);
  Sphere(Sphere&& from) noexcept
    : Sphere() {
    *this = ::std::move(from);
  }

  inline Sphere& operator=(const Sphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sphere& operator=(Sphere&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sphere& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sphere* internal_default_instance() {
    return reinterpret_cast<const Sphere*>(
               &_Sphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Sphere& a, Sphere& b) {
    a.Swap(&b);
  }
  inline void Swap(Sphere* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sphere* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sphere>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sphere& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Sphere& from) {
    Sphere::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sphere* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Sphere";
  }
  protected:
  explicit Sphere(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 1,
  };
  // float radius = 1;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.Sphere)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Box final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Box) */ {
 public:
  inline Box() : Box(nullptr) {}
  ~Box() override;
  explicit PROTOBUF_CONSTEXPR Box(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Box(const Box& from);
  Box(Box&& from) noexcept
    : Box() {
    *this = ::std::move(from);
  }

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box& operator=(Box&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Box& default_instance() {
    return *internal_default_instance();
  }
  static inline const Box* internal_default_instance() {
    return reinterpret_cast<const Box*>(
               &_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Box& a, Box& b) {
    a.Swap(&b);
  }
  inline void Swap(Box* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Box>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Box& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Box& from) {
    Box::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Box* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Box";
  }
  protected:
  explicit Box(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtentFieldNumber = 1,
  };
  // .types.Vector3 extent = 1;
  bool has_extent() const;
  private:
  bool _internal_has_extent() const;
  public:
  void clear_extent();
  const ::types::Vector3& extent() const;
  PROTOBUF_NODISCARD ::types::Vector3* release_extent();
  ::types::Vector3* mutable_extent();
  void set_allocated_extent(::types::Vector3* extent);
  private:
  const ::types::Vector3& _internal_extent() const;
  ::types::Vector3* _internal_mutable_extent();
  public:
  void unsafe_arena_set_allocated_extent(
      ::types::Vector3* extent);
  ::types::Vector3* unsafe_arena_release_extent();

  // @@protoc_insertion_point(class_scope:types.Box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::types::Vector3* extent_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class Capsule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.Capsule) */ {
 public:
  inline Capsule() : Capsule(nullptr) {}
  ~Capsule() override;
  explicit PROTOBUF_CONSTEXPR Capsule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Capsule(const Capsule& from);
  Capsule(Capsule&& from) noexcept
    : Capsule() {
    *this = ::std::move(from);
  }

  inline Capsule& operator=(const Capsule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capsule& operator=(Capsule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Capsule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capsule* internal_default_instance() {
    return reinterpret_cast<const Capsule*>(
               &_Capsule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Capsule& a, Capsule& b) {
    a.Swap(&b);
  }
  inline void Swap(Capsule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capsule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capsule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capsule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Capsule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Capsule& from) {
    Capsule::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capsule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.Capsule";
  }
  protected:
  explicit Capsule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHalfHeightFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // float half_height = 1;
  void clear_half_height();
  float half_height() const;
  void set_half_height(float value);
  private:
  float _internal_half_height() const;
  void _internal_set_half_height(float value);
  public:

  // float radius = 2;
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // @@protoc_insertion_point(class_scope:types.Capsule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float half_height_;
    float radius_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class DebugShapeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:types.DebugShapeInfo) */ {
 public:
  inline DebugShapeInfo() : DebugShapeInfo(nullptr) {}
  ~DebugShapeInfo() override;
  explicit PROTOBUF_CONSTEXPR DebugShapeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DebugShapeInfo(const DebugShapeInfo& from);
  DebugShapeInfo(DebugShapeInfo&& from) noexcept
    : DebugShapeInfo() {
    *this = ::std::move(from);
  }

  inline DebugShapeInfo& operator=(const DebugShapeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugShapeInfo& operator=(DebugShapeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DebugShapeInfo& default_instance() {
    return *internal_default_instance();
  }
  enum DebugShapeInfoFieldCase {
    kSphere = 1,
    kBox = 2,
    kCapsule = 3,
    DEBUGSHAPEINFOFIELD_NOT_SET = 0,
  };

  static inline const DebugShapeInfo* internal_default_instance() {
    return reinterpret_cast<const DebugShapeInfo*>(
               &_DebugShapeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DebugShapeInfo& a, DebugShapeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugShapeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DebugShapeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DebugShapeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DebugShapeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DebugShapeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DebugShapeInfo& from) {
    DebugShapeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugShapeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "types.DebugShapeInfo";
  }
  protected:
  explicit DebugShapeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSphereFieldNumber = 1,
    kBoxFieldNumber = 2,
    kCapsuleFieldNumber = 3,
  };
  // .types.Sphere sphere = 1;
  bool has_sphere() const;
  private:
  bool _internal_has_sphere() const;
  public:
  void clear_sphere();
  const ::types::Sphere& sphere() const;
  PROTOBUF_NODISCARD ::types::Sphere* release_sphere();
  ::types::Sphere* mutable_sphere();
  void set_allocated_sphere(::types::Sphere* sphere);
  private:
  const ::types::Sphere& _internal_sphere() const;
  ::types::Sphere* _internal_mutable_sphere();
  public:
  void unsafe_arena_set_allocated_sphere(
      ::types::Sphere* sphere);
  ::types::Sphere* unsafe_arena_release_sphere();

  // .types.Box box = 2;
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::types::Box& box() const;
  PROTOBUF_NODISCARD ::types::Box* release_box();
  ::types::Box* mutable_box();
  void set_allocated_box(::types::Box* box);
  private:
  const ::types::Box& _internal_box() const;
  ::types::Box* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::types::Box* box);
  ::types::Box* unsafe_arena_release_box();

  // .types.Capsule capsule = 3;
  bool has_capsule() const;
  private:
  bool _internal_has_capsule() const;
  public:
  void clear_capsule();
  const ::types::Capsule& capsule() const;
  PROTOBUF_NODISCARD ::types::Capsule* release_capsule();
  ::types::Capsule* mutable_capsule();
  void set_allocated_capsule(::types::Capsule* capsule);
  private:
  const ::types::Capsule& _internal_capsule() const;
  ::types::Capsule* _internal_mutable_capsule();
  public:
  void unsafe_arena_set_allocated_capsule(
      ::types::Capsule* capsule);
  ::types::Capsule* unsafe_arena_release_capsule();

  void clear_DebugShapeInfoField();
  DebugShapeInfoFieldCase DebugShapeInfoField_case() const;
  // @@protoc_insertion_point(class_scope:types.DebugShapeInfo)
 private:
  class _Internal;
  void set_has_sphere();
  void set_has_box();
  void set_has_capsule();

  inline bool has_DebugShapeInfoField() const;
  inline void clear_has_DebugShapeInfoField();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union DebugShapeInfoFieldUnion {
      constexpr DebugShapeInfoFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::types::Sphere* sphere_;
      ::types::Box* box_;
      ::types::Capsule* capsule_;
    } DebugShapeInfoField_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================

static const int kMessageIdFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::types::protocol, ::types::protocol_IsValid>, 14, false >
  message_id;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfo

// int32 server_id = 1;
inline void ServerInfo::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t ServerInfo::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:types.ServerInfo.server_id)
  return _internal_server_id();
}
inline void ServerInfo::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void ServerInfo::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:types.ServerInfo.server_id)
}

// string server_address = 2;
inline void ServerInfo::clear_server_address() {
  _impl_.server_address_.ClearToEmpty();
}
inline const std::string& ServerInfo::server_address() const {
  // @@protoc_insertion_point(field_get:types.ServerInfo.server_address)
  return _internal_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_server_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.ServerInfo.server_address)
}
inline std::string* ServerInfo::mutable_server_address() {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:types.ServerInfo.server_address)
  return _s;
}
inline const std::string& ServerInfo::_internal_server_address() const {
  return _impl_.server_address_.Get();
}
inline void ServerInfo::_internal_set_server_address(const std::string& value) {
  
  _impl_.server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_server_address() {
  
  return _impl_.server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_server_address() {
  // @@protoc_insertion_point(field_release:types.ServerInfo.server_address)
  return _impl_.server_address_.Release();
}
inline void ServerInfo::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    
  } else {
    
  }
  _impl_.server_address_.SetAllocated(server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.ServerInfo.server_address)
}

// int32 current_player_num = 4;
inline void ServerInfo::clear_current_player_num() {
  _impl_.current_player_num_ = 0;
}
inline int32_t ServerInfo::_internal_current_player_num() const {
  return _impl_.current_player_num_;
}
inline int32_t ServerInfo::current_player_num() const {
  // @@protoc_insertion_point(field_get:types.ServerInfo.current_player_num)
  return _internal_current_player_num();
}
inline void ServerInfo::_internal_set_current_player_num(int32_t value) {
  
  _impl_.current_player_num_ = value;
}
inline void ServerInfo::set_current_player_num(int32_t value) {
  _internal_set_current_player_num(value);
  // @@protoc_insertion_point(field_set:types.ServerInfo.current_player_num)
}

// -------------------------------------------------------------------

// CharacterInfo

// int64 character_id = 1;
inline void CharacterInfo::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t CharacterInfo::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t CharacterInfo::character_id() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.character_id)
  return _internal_character_id();
}
inline void CharacterInfo::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void CharacterInfo::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:types.CharacterInfo.character_id)
}

// string character_name = 2;
inline void CharacterInfo::clear_character_name() {
  _impl_.character_name_.ClearToEmpty();
}
inline const std::string& CharacterInfo::character_name() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterInfo::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.character_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:types.CharacterInfo.character_name)
}
inline std::string* CharacterInfo::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:types.CharacterInfo.character_name)
  return _s;
}
inline const std::string& CharacterInfo::_internal_character_name() const {
  return _impl_.character_name_.Get();
}
inline void CharacterInfo::_internal_set_character_name(const std::string& value) {
  
  _impl_.character_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterInfo::_internal_mutable_character_name() {
  
  return _impl_.character_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterInfo::release_character_name() {
  // @@protoc_insertion_point(field_release:types.CharacterInfo.character_name)
  return _impl_.character_name_.Release();
}
inline void CharacterInfo::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  _impl_.character_name_.SetAllocated(character_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.character_name_.IsDefault()) {
    _impl_.character_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:types.CharacterInfo.character_name)
}

// int64 account_id = 3;
inline void CharacterInfo::clear_account_id() {
  _impl_.account_id_ = int64_t{0};
}
inline int64_t CharacterInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int64_t CharacterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.account_id)
  return _internal_account_id();
}
inline void CharacterInfo::_internal_set_account_id(int64_t value) {
  
  _impl_.account_id_ = value;
}
inline void CharacterInfo::set_account_id(int64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:types.CharacterInfo.account_id)
}

// int32 server_id = 4;
inline void CharacterInfo::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t CharacterInfo::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t CharacterInfo::server_id() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.server_id)
  return _internal_server_id();
}
inline void CharacterInfo::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void CharacterInfo::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:types.CharacterInfo.server_id)
}

// int32 level = 5;
inline void CharacterInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CharacterInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CharacterInfo::level() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.level)
  return _internal_level();
}
inline void CharacterInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CharacterInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:types.CharacterInfo.level)
}

// int64 exp = 6;
inline void CharacterInfo::clear_exp() {
  _impl_.exp_ = int64_t{0};
}
inline int64_t CharacterInfo::_internal_exp() const {
  return _impl_.exp_;
}
inline int64_t CharacterInfo::exp() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.exp)
  return _internal_exp();
}
inline void CharacterInfo::_internal_set_exp(int64_t value) {
  
  _impl_.exp_ = value;
}
inline void CharacterInfo::set_exp(int64_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:types.CharacterInfo.exp)
}

// .google.protobuf.Timestamp last_played = 7;
inline bool CharacterInfo::_internal_has_last_played() const {
  return this != internal_default_instance() && _impl_.last_played_ != nullptr;
}
inline bool CharacterInfo::has_last_played() const {
  return _internal_has_last_played();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::_internal_last_played() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_played_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::last_played() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.last_played)
  return _internal_last_played();
}
inline void CharacterInfo::unsafe_arena_set_allocated_last_played(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_played) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_played_);
  }
  _impl_.last_played_ = last_played;
  if (last_played) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterInfo.last_played)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::release_last_played() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::unsafe_arena_release_last_played() {
  // @@protoc_insertion_point(field_release:types.CharacterInfo.last_played)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::_internal_mutable_last_played() {
  
  if (_impl_.last_played_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_played_ = p;
  }
  return _impl_.last_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::mutable_last_played() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_played();
  // @@protoc_insertion_point(field_mutable:types.CharacterInfo.last_played)
  return _msg;
}
inline void CharacterInfo::set_allocated_last_played(::PROTOBUF_NAMESPACE_ID::Timestamp* last_played) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_played_);
  }
  if (last_played) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_played));
    if (message_arena != submessage_arena) {
      last_played = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_played, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_played_ = last_played;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterInfo.last_played)
}

// .google.protobuf.Timestamp created_at = 8;
inline bool CharacterInfo::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool CharacterInfo::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::created_at() const {
  // @@protoc_insertion_point(field_get:types.CharacterInfo.created_at)
  return _internal_created_at();
}
inline void CharacterInfo::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterInfo.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:types.CharacterInfo.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:types.CharacterInfo.created_at)
  return _msg;
}
inline void CharacterInfo::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterInfo.created_at)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:types.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:types.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:types.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:types.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:types.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:types.Vector3.z)
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector2::_internal_x() const {
  return _impl_.x_;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:types.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:types.Vector2.x)
}

// float y = 2;
inline void Vector2::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector2::_internal_y() const {
  return _impl_.y_;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:types.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:types.Vector2.y)
}

// -------------------------------------------------------------------

// Quat

// float x = 1;
inline void Quat::clear_x() {
  _impl_.x_ = 0;
}
inline float Quat::_internal_x() const {
  return _impl_.x_;
}
inline float Quat::x() const {
  // @@protoc_insertion_point(field_get:types.Quat.x)
  return _internal_x();
}
inline void Quat::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Quat::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:types.Quat.x)
}

// float y = 2;
inline void Quat::clear_y() {
  _impl_.y_ = 0;
}
inline float Quat::_internal_y() const {
  return _impl_.y_;
}
inline float Quat::y() const {
  // @@protoc_insertion_point(field_get:types.Quat.y)
  return _internal_y();
}
inline void Quat::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Quat::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:types.Quat.y)
}

// float z = 3;
inline void Quat::clear_z() {
  _impl_.z_ = 0;
}
inline float Quat::_internal_z() const {
  return _impl_.z_;
}
inline float Quat::z() const {
  // @@protoc_insertion_point(field_get:types.Quat.z)
  return _internal_z();
}
inline void Quat::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Quat::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:types.Quat.z)
}

// float w = 4;
inline void Quat::clear_w() {
  _impl_.w_ = 0;
}
inline float Quat::_internal_w() const {
  return _impl_.w_;
}
inline float Quat::w() const {
  // @@protoc_insertion_point(field_get:types.Quat.w)
  return _internal_w();
}
inline void Quat::_internal_set_w(float value) {
  
  _impl_.w_ = value;
}
inline void Quat::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:types.Quat.w)
}

// -------------------------------------------------------------------

// Rotator

// float roll = 1;
inline void Rotator::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Rotator::_internal_roll() const {
  return _impl_.roll_;
}
inline float Rotator::roll() const {
  // @@protoc_insertion_point(field_get:types.Rotator.roll)
  return _internal_roll();
}
inline void Rotator::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void Rotator::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:types.Rotator.roll)
}

// float pitch = 2;
inline void Rotator::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Rotator::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Rotator::pitch() const {
  // @@protoc_insertion_point(field_get:types.Rotator.pitch)
  return _internal_pitch();
}
inline void Rotator::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Rotator::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:types.Rotator.pitch)
}

// float yaw = 3;
inline void Rotator::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Rotator::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Rotator::yaw() const {
  // @@protoc_insertion_point(field_get:types.Rotator.yaw)
  return _internal_yaw();
}
inline void Rotator::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Rotator::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:types.Rotator.yaw)
}

// -------------------------------------------------------------------

// Pose

// .types.Vector3 location = 1;
inline bool Pose::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Pose::has_location() const {
  return _internal_has_location();
}
inline void Pose::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::types::Vector3& Pose::_internal_location() const {
  const ::types::Vector3* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& Pose::location() const {
  // @@protoc_insertion_point(field_get:types.Pose.location)
  return _internal_location();
}
inline void Pose::unsafe_arena_set_allocated_location(
    ::types::Vector3* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Pose.location)
}
inline ::types::Vector3* Pose::release_location() {
  
  ::types::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* Pose::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:types.Pose.location)
  
  ::types::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::types::Vector3* Pose::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::types::Vector3* Pose::mutable_location() {
  ::types::Vector3* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:types.Pose.location)
  return _msg;
}
inline void Pose::set_allocated_location(::types::Vector3* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:types.Pose.location)
}

// .types.Rotator rotation = 2;
inline bool Pose::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool Pose::has_rotation() const {
  return _internal_has_rotation();
}
inline void Pose::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::types::Rotator& Pose::_internal_rotation() const {
  const ::types::Rotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Rotator&>(
      ::types::_Rotator_default_instance_);
}
inline const ::types::Rotator& Pose::rotation() const {
  // @@protoc_insertion_point(field_get:types.Pose.rotation)
  return _internal_rotation();
}
inline void Pose::unsafe_arena_set_allocated_rotation(
    ::types::Rotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Pose.rotation)
}
inline ::types::Rotator* Pose::release_rotation() {
  
  ::types::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Rotator* Pose::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:types.Pose.rotation)
  
  ::types::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::types::Rotator* Pose::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Rotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::types::Rotator* Pose::mutable_rotation() {
  ::types::Rotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:types.Pose.rotation)
  return _msg;
}
inline void Pose::set_allocated_rotation(::types::Rotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:types.Pose.rotation)
}

// -------------------------------------------------------------------

// Transform

// .types.Vector3 location = 1;
inline bool Transform::_internal_has_location() const {
  return this != internal_default_instance() && _impl_.location_ != nullptr;
}
inline bool Transform::has_location() const {
  return _internal_has_location();
}
inline void Transform::clear_location() {
  if (GetArenaForAllocation() == nullptr && _impl_.location_ != nullptr) {
    delete _impl_.location_;
  }
  _impl_.location_ = nullptr;
}
inline const ::types::Vector3& Transform::_internal_location() const {
  const ::types::Vector3* p = _impl_.location_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& Transform::location() const {
  // @@protoc_insertion_point(field_get:types.Transform.location)
  return _internal_location();
}
inline void Transform::unsafe_arena_set_allocated_location(
    ::types::Vector3* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.location_);
  }
  _impl_.location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Transform.location)
}
inline ::types::Vector3* Transform::release_location() {
  
  ::types::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* Transform::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:types.Transform.location)
  
  ::types::Vector3* temp = _impl_.location_;
  _impl_.location_ = nullptr;
  return temp;
}
inline ::types::Vector3* Transform::_internal_mutable_location() {
  
  if (_impl_.location_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.location_ = p;
  }
  return _impl_.location_;
}
inline ::types::Vector3* Transform::mutable_location() {
  ::types::Vector3* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:types.Transform.location)
  return _msg;
}
inline void Transform::set_allocated_location(::types::Vector3* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.location_ = location;
  // @@protoc_insertion_point(field_set_allocated:types.Transform.location)
}

// .types.Rotator rotation = 2;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::types::Rotator& Transform::_internal_rotation() const {
  const ::types::Rotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Rotator&>(
      ::types::_Rotator_default_instance_);
}
inline const ::types::Rotator& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:types.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(
    ::types::Rotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Transform.rotation)
}
inline ::types::Rotator* Transform::release_rotation() {
  
  ::types::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Rotator* Transform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:types.Transform.rotation)
  
  ::types::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::types::Rotator* Transform::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Rotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::types::Rotator* Transform::mutable_rotation() {
  ::types::Rotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:types.Transform.rotation)
  return _msg;
}
inline void Transform::set_allocated_rotation(::types::Rotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:types.Transform.rotation)
}

// .types.Vector3 scale = 3;
inline bool Transform::_internal_has_scale() const {
  return this != internal_default_instance() && _impl_.scale_ != nullptr;
}
inline bool Transform::has_scale() const {
  return _internal_has_scale();
}
inline void Transform::clear_scale() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_ != nullptr) {
    delete _impl_.scale_;
  }
  _impl_.scale_ = nullptr;
}
inline const ::types::Vector3& Transform::_internal_scale() const {
  const ::types::Vector3* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& Transform::scale() const {
  // @@protoc_insertion_point(field_get:types.Transform.scale)
  return _internal_scale();
}
inline void Transform::unsafe_arena_set_allocated_scale(
    ::types::Vector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Transform.scale)
}
inline ::types::Vector3* Transform::release_scale() {
  
  ::types::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* Transform::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:types.Transform.scale)
  
  ::types::Vector3* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::types::Vector3* Transform::_internal_mutable_scale() {
  
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::types::Vector3* Transform::mutable_scale() {
  ::types::Vector3* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:types.Transform.scale)
  return _msg;
}
inline void Transform::set_allocated_scale(::types::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:types.Transform.scale)
}

// -------------------------------------------------------------------

// AxisAndAngle

// float x = 1;
inline void AxisAndAngle::clear_x() {
  _impl_.x_ = 0;
}
inline float AxisAndAngle::_internal_x() const {
  return _impl_.x_;
}
inline float AxisAndAngle::x() const {
  // @@protoc_insertion_point(field_get:types.AxisAndAngle.x)
  return _internal_x();
}
inline void AxisAndAngle::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void AxisAndAngle::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:types.AxisAndAngle.x)
}

// float y = 2;
inline void AxisAndAngle::clear_y() {
  _impl_.y_ = 0;
}
inline float AxisAndAngle::_internal_y() const {
  return _impl_.y_;
}
inline float AxisAndAngle::y() const {
  // @@protoc_insertion_point(field_get:types.AxisAndAngle.y)
  return _internal_y();
}
inline void AxisAndAngle::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void AxisAndAngle::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:types.AxisAndAngle.y)
}

// float z = 3;
inline void AxisAndAngle::clear_z() {
  _impl_.z_ = 0;
}
inline float AxisAndAngle::_internal_z() const {
  return _impl_.z_;
}
inline float AxisAndAngle::z() const {
  // @@protoc_insertion_point(field_get:types.AxisAndAngle.z)
  return _internal_z();
}
inline void AxisAndAngle::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void AxisAndAngle::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:types.AxisAndAngle.z)
}

// float angle_in_rad = 4;
inline void AxisAndAngle::clear_angle_in_rad() {
  _impl_.angle_in_rad_ = 0;
}
inline float AxisAndAngle::_internal_angle_in_rad() const {
  return _impl_.angle_in_rad_;
}
inline float AxisAndAngle::angle_in_rad() const {
  // @@protoc_insertion_point(field_get:types.AxisAndAngle.angle_in_rad)
  return _internal_angle_in_rad();
}
inline void AxisAndAngle::_internal_set_angle_in_rad(float value) {
  
  _impl_.angle_in_rad_ = value;
}
inline void AxisAndAngle::set_angle_in_rad(float value) {
  _internal_set_angle_in_rad(value);
  // @@protoc_insertion_point(field_set:types.AxisAndAngle.angle_in_rad)
}

// -------------------------------------------------------------------

// CharacterPose

// .types.Vector3 position = 1;
inline bool CharacterPose::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool CharacterPose::has_position() const {
  return _internal_has_position();
}
inline void CharacterPose::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::types::Vector3& CharacterPose::_internal_position() const {
  const ::types::Vector3* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& CharacterPose::position() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.position)
  return _internal_position();
}
inline void CharacterPose::unsafe_arena_set_allocated_position(
    ::types::Vector3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterPose.position)
}
inline ::types::Vector3* CharacterPose::release_position() {
  
  ::types::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* CharacterPose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:types.CharacterPose.position)
  
  ::types::Vector3* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::types::Vector3* CharacterPose::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::types::Vector3* CharacterPose::mutable_position() {
  ::types::Vector3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:types.CharacterPose.position)
  return _msg;
}
inline void CharacterPose::set_allocated_position(::types::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterPose.position)
}

// .types.Rotator rotation = 2;
inline bool CharacterPose::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool CharacterPose::has_rotation() const {
  return _internal_has_rotation();
}
inline void CharacterPose::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::types::Rotator& CharacterPose::_internal_rotation() const {
  const ::types::Rotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Rotator&>(
      ::types::_Rotator_default_instance_);
}
inline const ::types::Rotator& CharacterPose::rotation() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.rotation)
  return _internal_rotation();
}
inline void CharacterPose::unsafe_arena_set_allocated_rotation(
    ::types::Rotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterPose.rotation)
}
inline ::types::Rotator* CharacterPose::release_rotation() {
  
  ::types::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Rotator* CharacterPose::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:types.CharacterPose.rotation)
  
  ::types::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::types::Rotator* CharacterPose::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Rotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::types::Rotator* CharacterPose::mutable_rotation() {
  ::types::Rotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:types.CharacterPose.rotation)
  return _msg;
}
inline void CharacterPose::set_allocated_rotation(::types::Rotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterPose.rotation)
}

// .types.Vector3 velocity = 3;
inline bool CharacterPose::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool CharacterPose::has_velocity() const {
  return _internal_has_velocity();
}
inline void CharacterPose::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
inline const ::types::Vector3& CharacterPose::_internal_velocity() const {
  const ::types::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& CharacterPose::velocity() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.velocity)
  return _internal_velocity();
}
inline void CharacterPose::unsafe_arena_set_allocated_velocity(
    ::types::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterPose.velocity)
}
inline ::types::Vector3* CharacterPose::release_velocity() {
  
  ::types::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* CharacterPose::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:types.CharacterPose.velocity)
  
  ::types::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::types::Vector3* CharacterPose::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::types::Vector3* CharacterPose::mutable_velocity() {
  ::types::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:types.CharacterPose.velocity)
  return _msg;
}
inline void CharacterPose::set_allocated_velocity(::types::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterPose.velocity)
}

// .types.Vector3 acceleration = 4;
inline bool CharacterPose::_internal_has_acceleration() const {
  return this != internal_default_instance() && _impl_.acceleration_ != nullptr;
}
inline bool CharacterPose::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void CharacterPose::clear_acceleration() {
  if (GetArenaForAllocation() == nullptr && _impl_.acceleration_ != nullptr) {
    delete _impl_.acceleration_;
  }
  _impl_.acceleration_ = nullptr;
}
inline const ::types::Vector3& CharacterPose::_internal_acceleration() const {
  const ::types::Vector3* p = _impl_.acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& CharacterPose::acceleration() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.acceleration)
  return _internal_acceleration();
}
inline void CharacterPose::unsafe_arena_set_allocated_acceleration(
    ::types::Vector3* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.acceleration_);
  }
  _impl_.acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterPose.acceleration)
}
inline ::types::Vector3* CharacterPose::release_acceleration() {
  
  ::types::Vector3* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* CharacterPose::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:types.CharacterPose.acceleration)
  
  ::types::Vector3* temp = _impl_.acceleration_;
  _impl_.acceleration_ = nullptr;
  return temp;
}
inline ::types::Vector3* CharacterPose::_internal_mutable_acceleration() {
  
  if (_impl_.acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.acceleration_ = p;
  }
  return _impl_.acceleration_;
}
inline ::types::Vector3* CharacterPose::mutable_acceleration() {
  ::types::Vector3* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:types.CharacterPose.acceleration)
  return _msg;
}
inline void CharacterPose::set_allocated_acceleration(::types::Vector3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(acceleration);
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterPose.acceleration)
}

// .types.AxisAndAngle angular_velocity = 6;
inline bool CharacterPose::_internal_has_angular_velocity() const {
  return this != internal_default_instance() && _impl_.angular_velocity_ != nullptr;
}
inline bool CharacterPose::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void CharacterPose::clear_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_velocity_ != nullptr) {
    delete _impl_.angular_velocity_;
  }
  _impl_.angular_velocity_ = nullptr;
}
inline const ::types::AxisAndAngle& CharacterPose::_internal_angular_velocity() const {
  const ::types::AxisAndAngle* p = _impl_.angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::AxisAndAngle&>(
      ::types::_AxisAndAngle_default_instance_);
}
inline const ::types::AxisAndAngle& CharacterPose::angular_velocity() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.angular_velocity)
  return _internal_angular_velocity();
}
inline void CharacterPose::unsafe_arena_set_allocated_angular_velocity(
    ::types::AxisAndAngle* angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.angular_velocity_);
  }
  _impl_.angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterPose.angular_velocity)
}
inline ::types::AxisAndAngle* CharacterPose::release_angular_velocity() {
  
  ::types::AxisAndAngle* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::AxisAndAngle* CharacterPose::unsafe_arena_release_angular_velocity() {
  // @@protoc_insertion_point(field_release:types.CharacterPose.angular_velocity)
  
  ::types::AxisAndAngle* temp = _impl_.angular_velocity_;
  _impl_.angular_velocity_ = nullptr;
  return temp;
}
inline ::types::AxisAndAngle* CharacterPose::_internal_mutable_angular_velocity() {
  
  if (_impl_.angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::AxisAndAngle>(GetArenaForAllocation());
    _impl_.angular_velocity_ = p;
  }
  return _impl_.angular_velocity_;
}
inline ::types::AxisAndAngle* CharacterPose::mutable_angular_velocity() {
  ::types::AxisAndAngle* _msg = _internal_mutable_angular_velocity();
  // @@protoc_insertion_point(field_mutable:types.CharacterPose.angular_velocity)
  return _msg;
}
inline void CharacterPose::set_allocated_angular_velocity(::types::AxisAndAngle* angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.angular_velocity_;
  }
  if (angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(angular_velocity);
    if (message_arena != submessage_arena) {
      angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.angular_velocity_ = angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterPose.angular_velocity)
}

// .types.Rotator aim_rotation = 7;
inline bool CharacterPose::_internal_has_aim_rotation() const {
  return this != internal_default_instance() && _impl_.aim_rotation_ != nullptr;
}
inline bool CharacterPose::has_aim_rotation() const {
  return _internal_has_aim_rotation();
}
inline void CharacterPose::clear_aim_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.aim_rotation_ != nullptr) {
    delete _impl_.aim_rotation_;
  }
  _impl_.aim_rotation_ = nullptr;
}
inline const ::types::Rotator& CharacterPose::_internal_aim_rotation() const {
  const ::types::Rotator* p = _impl_.aim_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Rotator&>(
      ::types::_Rotator_default_instance_);
}
inline const ::types::Rotator& CharacterPose::aim_rotation() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.aim_rotation)
  return _internal_aim_rotation();
}
inline void CharacterPose::unsafe_arena_set_allocated_aim_rotation(
    ::types::Rotator* aim_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aim_rotation_);
  }
  _impl_.aim_rotation_ = aim_rotation;
  if (aim_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterPose.aim_rotation)
}
inline ::types::Rotator* CharacterPose::release_aim_rotation() {
  
  ::types::Rotator* temp = _impl_.aim_rotation_;
  _impl_.aim_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Rotator* CharacterPose::unsafe_arena_release_aim_rotation() {
  // @@protoc_insertion_point(field_release:types.CharacterPose.aim_rotation)
  
  ::types::Rotator* temp = _impl_.aim_rotation_;
  _impl_.aim_rotation_ = nullptr;
  return temp;
}
inline ::types::Rotator* CharacterPose::_internal_mutable_aim_rotation() {
  
  if (_impl_.aim_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Rotator>(GetArenaForAllocation());
    _impl_.aim_rotation_ = p;
  }
  return _impl_.aim_rotation_;
}
inline ::types::Rotator* CharacterPose::mutable_aim_rotation() {
  ::types::Rotator* _msg = _internal_mutable_aim_rotation();
  // @@protoc_insertion_point(field_mutable:types.CharacterPose.aim_rotation)
  return _msg;
}
inline void CharacterPose::set_allocated_aim_rotation(::types::Rotator* aim_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aim_rotation_;
  }
  if (aim_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aim_rotation);
    if (message_arena != submessage_arena) {
      aim_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aim_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aim_rotation_ = aim_rotation;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterPose.aim_rotation)
}

// .types.AxisAndAngle aim_angular_velocity = 8;
inline bool CharacterPose::_internal_has_aim_angular_velocity() const {
  return this != internal_default_instance() && _impl_.aim_angular_velocity_ != nullptr;
}
inline bool CharacterPose::has_aim_angular_velocity() const {
  return _internal_has_aim_angular_velocity();
}
inline void CharacterPose::clear_aim_angular_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.aim_angular_velocity_ != nullptr) {
    delete _impl_.aim_angular_velocity_;
  }
  _impl_.aim_angular_velocity_ = nullptr;
}
inline const ::types::AxisAndAngle& CharacterPose::_internal_aim_angular_velocity() const {
  const ::types::AxisAndAngle* p = _impl_.aim_angular_velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::AxisAndAngle&>(
      ::types::_AxisAndAngle_default_instance_);
}
inline const ::types::AxisAndAngle& CharacterPose::aim_angular_velocity() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.aim_angular_velocity)
  return _internal_aim_angular_velocity();
}
inline void CharacterPose::unsafe_arena_set_allocated_aim_angular_velocity(
    ::types::AxisAndAngle* aim_angular_velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aim_angular_velocity_);
  }
  _impl_.aim_angular_velocity_ = aim_angular_velocity;
  if (aim_angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.CharacterPose.aim_angular_velocity)
}
inline ::types::AxisAndAngle* CharacterPose::release_aim_angular_velocity() {
  
  ::types::AxisAndAngle* temp = _impl_.aim_angular_velocity_;
  _impl_.aim_angular_velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::AxisAndAngle* CharacterPose::unsafe_arena_release_aim_angular_velocity() {
  // @@protoc_insertion_point(field_release:types.CharacterPose.aim_angular_velocity)
  
  ::types::AxisAndAngle* temp = _impl_.aim_angular_velocity_;
  _impl_.aim_angular_velocity_ = nullptr;
  return temp;
}
inline ::types::AxisAndAngle* CharacterPose::_internal_mutable_aim_angular_velocity() {
  
  if (_impl_.aim_angular_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::AxisAndAngle>(GetArenaForAllocation());
    _impl_.aim_angular_velocity_ = p;
  }
  return _impl_.aim_angular_velocity_;
}
inline ::types::AxisAndAngle* CharacterPose::mutable_aim_angular_velocity() {
  ::types::AxisAndAngle* _msg = _internal_mutable_aim_angular_velocity();
  // @@protoc_insertion_point(field_mutable:types.CharacterPose.aim_angular_velocity)
  return _msg;
}
inline void CharacterPose::set_allocated_aim_angular_velocity(::types::AxisAndAngle* aim_angular_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.aim_angular_velocity_;
  }
  if (aim_angular_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(aim_angular_velocity);
    if (message_arena != submessage_arena) {
      aim_angular_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aim_angular_velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.aim_angular_velocity_ = aim_angular_velocity;
  // @@protoc_insertion_point(field_set_allocated:types.CharacterPose.aim_angular_velocity)
}

// float net_delay_ms = 9;
inline void CharacterPose::clear_net_delay_ms() {
  _impl_.net_delay_ms_ = 0;
}
inline float CharacterPose::_internal_net_delay_ms() const {
  return _impl_.net_delay_ms_;
}
inline float CharacterPose::net_delay_ms() const {
  // @@protoc_insertion_point(field_get:types.CharacterPose.net_delay_ms)
  return _internal_net_delay_ms();
}
inline void CharacterPose::_internal_set_net_delay_ms(float value) {
  
  _impl_.net_delay_ms_ = value;
}
inline void CharacterPose::set_net_delay_ms(float value) {
  _internal_set_net_delay_ms(value);
  // @@protoc_insertion_point(field_set:types.CharacterPose.net_delay_ms)
}

// -------------------------------------------------------------------

// NpcInfo

// .types.Pose pose = 1;
inline bool NpcInfo::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool NpcInfo::has_pose() const {
  return _internal_has_pose();
}
inline void NpcInfo::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
inline const ::types::Pose& NpcInfo::_internal_pose() const {
  const ::types::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Pose&>(
      ::types::_Pose_default_instance_);
}
inline const ::types::Pose& NpcInfo::pose() const {
  // @@protoc_insertion_point(field_get:types.NpcInfo.pose)
  return _internal_pose();
}
inline void NpcInfo::unsafe_arena_set_allocated_pose(
    ::types::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.NpcInfo.pose)
}
inline ::types::Pose* NpcInfo::release_pose() {
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Pose* NpcInfo::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:types.NpcInfo.pose)
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::types::Pose* NpcInfo::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::types::Pose* NpcInfo::mutable_pose() {
  ::types::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:types.NpcInfo.pose)
  return _msg;
}
inline void NpcInfo::set_allocated_pose(::types::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:types.NpcInfo.pose)
}

// int64 object_id = 2;
inline void NpcInfo::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t NpcInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t NpcInfo::object_id() const {
  // @@protoc_insertion_point(field_get:types.NpcInfo.object_id)
  return _internal_object_id();
}
inline void NpcInfo::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void NpcInfo::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:types.NpcInfo.object_id)
}

// int64 current_hp = 3;
inline void NpcInfo::clear_current_hp() {
  _impl_.current_hp_ = int64_t{0};
}
inline int64_t NpcInfo::_internal_current_hp() const {
  return _impl_.current_hp_;
}
inline int64_t NpcInfo::current_hp() const {
  // @@protoc_insertion_point(field_get:types.NpcInfo.current_hp)
  return _internal_current_hp();
}
inline void NpcInfo::_internal_set_current_hp(int64_t value) {
  
  _impl_.current_hp_ = value;
}
inline void NpcInfo::set_current_hp(int64_t value) {
  _internal_set_current_hp(value);
  // @@protoc_insertion_point(field_set:types.NpcInfo.current_hp)
}

// int32 spawner_id = 4;
inline void NpcInfo::clear_spawner_id() {
  _impl_.spawner_id_ = 0;
}
inline int32_t NpcInfo::_internal_spawner_id() const {
  return _impl_.spawner_id_;
}
inline int32_t NpcInfo::spawner_id() const {
  // @@protoc_insertion_point(field_get:types.NpcInfo.spawner_id)
  return _internal_spawner_id();
}
inline void NpcInfo::_internal_set_spawner_id(int32_t value) {
  
  _impl_.spawner_id_ = value;
}
inline void NpcInfo::set_spawner_id(int32_t value) {
  _internal_set_spawner_id(value);
  // @@protoc_insertion_point(field_set:types.NpcInfo.spawner_id)
}

// -------------------------------------------------------------------

// NpcSpawnInfo

// .types.Pose pose = 1;
inline bool NpcSpawnInfo::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool NpcSpawnInfo::has_pose() const {
  return _internal_has_pose();
}
inline void NpcSpawnInfo::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
inline const ::types::Pose& NpcSpawnInfo::_internal_pose() const {
  const ::types::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Pose&>(
      ::types::_Pose_default_instance_);
}
inline const ::types::Pose& NpcSpawnInfo::pose() const {
  // @@protoc_insertion_point(field_get:types.NpcSpawnInfo.pose)
  return _internal_pose();
}
inline void NpcSpawnInfo::unsafe_arena_set_allocated_pose(
    ::types::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.NpcSpawnInfo.pose)
}
inline ::types::Pose* NpcSpawnInfo::release_pose() {
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Pose* NpcSpawnInfo::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:types.NpcSpawnInfo.pose)
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::types::Pose* NpcSpawnInfo::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::types::Pose* NpcSpawnInfo::mutable_pose() {
  ::types::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:types.NpcSpawnInfo.pose)
  return _msg;
}
inline void NpcSpawnInfo::set_allocated_pose(::types::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:types.NpcSpawnInfo.pose)
}

// int32 spawner_id = 2;
inline void NpcSpawnInfo::clear_spawner_id() {
  _impl_.spawner_id_ = 0;
}
inline int32_t NpcSpawnInfo::_internal_spawner_id() const {
  return _impl_.spawner_id_;
}
inline int32_t NpcSpawnInfo::spawner_id() const {
  // @@protoc_insertion_point(field_get:types.NpcSpawnInfo.spawner_id)
  return _internal_spawner_id();
}
inline void NpcSpawnInfo::_internal_set_spawner_id(int32_t value) {
  
  _impl_.spawner_id_ = value;
}
inline void NpcSpawnInfo::set_spawner_id(int32_t value) {
  _internal_set_spawner_id(value);
  // @@protoc_insertion_point(field_set:types.NpcSpawnInfo.spawner_id)
}

// -------------------------------------------------------------------

// ProjectileInfo

// .types.Pose pose = 1;
inline bool ProjectileInfo::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool ProjectileInfo::has_pose() const {
  return _internal_has_pose();
}
inline void ProjectileInfo::clear_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
}
inline const ::types::Pose& ProjectileInfo::_internal_pose() const {
  const ::types::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Pose&>(
      ::types::_Pose_default_instance_);
}
inline const ::types::Pose& ProjectileInfo::pose() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.pose)
  return _internal_pose();
}
inline void ProjectileInfo::unsafe_arena_set_allocated_pose(
    ::types::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ProjectileInfo.pose)
}
inline ::types::Pose* ProjectileInfo::release_pose() {
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Pose* ProjectileInfo::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:types.ProjectileInfo.pose)
  
  ::types::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::types::Pose* ProjectileInfo::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::types::Pose* ProjectileInfo::mutable_pose() {
  ::types::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:types.ProjectileInfo.pose)
  return _msg;
}
inline void ProjectileInfo::set_allocated_pose(::types::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:types.ProjectileInfo.pose)
}

// int64 object_id = 2;
inline void ProjectileInfo::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t ProjectileInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t ProjectileInfo::object_id() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.object_id)
  return _internal_object_id();
}
inline void ProjectileInfo::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void ProjectileInfo::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:types.ProjectileInfo.object_id)
}

// float initial_speed = 3;
inline void ProjectileInfo::clear_initial_speed() {
  _impl_.initial_speed_ = 0;
}
inline float ProjectileInfo::_internal_initial_speed() const {
  return _impl_.initial_speed_;
}
inline float ProjectileInfo::initial_speed() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.initial_speed)
  return _internal_initial_speed();
}
inline void ProjectileInfo::_internal_set_initial_speed(float value) {
  
  _impl_.initial_speed_ = value;
}
inline void ProjectileInfo::set_initial_speed(float value) {
  _internal_set_initial_speed(value);
  // @@protoc_insertion_point(field_set:types.ProjectileInfo.initial_speed)
}

// .types.Vector3 direction = 4;
inline bool ProjectileInfo::_internal_has_direction() const {
  return this != internal_default_instance() && _impl_.direction_ != nullptr;
}
inline bool ProjectileInfo::has_direction() const {
  return _internal_has_direction();
}
inline void ProjectileInfo::clear_direction() {
  if (GetArenaForAllocation() == nullptr && _impl_.direction_ != nullptr) {
    delete _impl_.direction_;
  }
  _impl_.direction_ = nullptr;
}
inline const ::types::Vector3& ProjectileInfo::_internal_direction() const {
  const ::types::Vector3* p = _impl_.direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& ProjectileInfo::direction() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.direction)
  return _internal_direction();
}
inline void ProjectileInfo::unsafe_arena_set_allocated_direction(
    ::types::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.direction_);
  }
  _impl_.direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ProjectileInfo.direction)
}
inline ::types::Vector3* ProjectileInfo::release_direction() {
  
  ::types::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* ProjectileInfo::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:types.ProjectileInfo.direction)
  
  ::types::Vector3* temp = _impl_.direction_;
  _impl_.direction_ = nullptr;
  return temp;
}
inline ::types::Vector3* ProjectileInfo::_internal_mutable_direction() {
  
  if (_impl_.direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.direction_ = p;
  }
  return _impl_.direction_;
}
inline ::types::Vector3* ProjectileInfo::mutable_direction() {
  ::types::Vector3* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:types.ProjectileInfo.direction)
  return _msg;
}
inline void ProjectileInfo::set_allocated_direction(::types::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:types.ProjectileInfo.direction)
}

// .types.Vector3 velocity = 5;
inline bool ProjectileInfo::_internal_has_velocity() const {
  return this != internal_default_instance() && _impl_.velocity_ != nullptr;
}
inline bool ProjectileInfo::has_velocity() const {
  return _internal_has_velocity();
}
inline void ProjectileInfo::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
}
inline const ::types::Vector3& ProjectileInfo::_internal_velocity() const {
  const ::types::Vector3* p = _impl_.velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& ProjectileInfo::velocity() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.velocity)
  return _internal_velocity();
}
inline void ProjectileInfo::unsafe_arena_set_allocated_velocity(
    ::types::Vector3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.velocity_);
  }
  _impl_.velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ProjectileInfo.velocity)
}
inline ::types::Vector3* ProjectileInfo::release_velocity() {
  
  ::types::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* ProjectileInfo::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:types.ProjectileInfo.velocity)
  
  ::types::Vector3* temp = _impl_.velocity_;
  _impl_.velocity_ = nullptr;
  return temp;
}
inline ::types::Vector3* ProjectileInfo::_internal_mutable_velocity() {
  
  if (_impl_.velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.velocity_ = p;
  }
  return _impl_.velocity_;
}
inline ::types::Vector3* ProjectileInfo::mutable_velocity() {
  ::types::Vector3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:types.ProjectileInfo.velocity)
  return _msg;
}
inline void ProjectileInfo::set_allocated_velocity(::types::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:types.ProjectileInfo.velocity)
}

// int64 action_id = 6;
inline void ProjectileInfo::clear_action_id() {
  _impl_.action_id_ = int64_t{0};
}
inline int64_t ProjectileInfo::_internal_action_id() const {
  return _impl_.action_id_;
}
inline int64_t ProjectileInfo::action_id() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.action_id)
  return _internal_action_id();
}
inline void ProjectileInfo::_internal_set_action_id(int64_t value) {
  
  _impl_.action_id_ = value;
}
inline void ProjectileInfo::set_action_id(int64_t value) {
  _internal_set_action_id(value);
  // @@protoc_insertion_point(field_set:types.ProjectileInfo.action_id)
}

// .google.protobuf.Timestamp action_time = 7;
inline bool ProjectileInfo::_internal_has_action_time() const {
  return this != internal_default_instance() && _impl_.action_time_ != nullptr;
}
inline bool ProjectileInfo::has_action_time() const {
  return _internal_has_action_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectileInfo::_internal_action_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.action_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProjectileInfo::action_time() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.action_time)
  return _internal_action_time();
}
inline void ProjectileInfo::unsafe_arena_set_allocated_action_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* action_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_time_);
  }
  _impl_.action_time_ = action_time;
  if (action_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ProjectileInfo.action_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectileInfo::release_action_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.action_time_;
  _impl_.action_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectileInfo::unsafe_arena_release_action_time() {
  // @@protoc_insertion_point(field_release:types.ProjectileInfo.action_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.action_time_;
  _impl_.action_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectileInfo::_internal_mutable_action_time() {
  
  if (_impl_.action_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.action_time_ = p;
  }
  return _impl_.action_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProjectileInfo::mutable_action_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_action_time();
  // @@protoc_insertion_point(field_mutable:types.ProjectileInfo.action_time)
  return _msg;
}
inline void ProjectileInfo::set_allocated_action_time(::PROTOBUF_NAMESPACE_ID::Timestamp* action_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.action_time_);
  }
  if (action_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_time));
    if (message_arena != submessage_arena) {
      action_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.action_time_ = action_time;
  // @@protoc_insertion_point(field_set_allocated:types.ProjectileInfo.action_time)
}

// int64 trigger_id = 8;
inline void ProjectileInfo::clear_trigger_id() {
  _impl_.trigger_id_ = int64_t{0};
}
inline int64_t ProjectileInfo::_internal_trigger_id() const {
  return _impl_.trigger_id_;
}
inline int64_t ProjectileInfo::trigger_id() const {
  // @@protoc_insertion_point(field_get:types.ProjectileInfo.trigger_id)
  return _internal_trigger_id();
}
inline void ProjectileInfo::_internal_set_trigger_id(int64_t value) {
  
  _impl_.trigger_id_ = value;
}
inline void ProjectileInfo::set_trigger_id(int64_t value) {
  _internal_set_trigger_id(value);
  // @@protoc_insertion_point(field_set:types.ProjectileInfo.trigger_id)
}

// -------------------------------------------------------------------

// PcInfo

// int64 character_id = 1;
inline void PcInfo::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t PcInfo::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t PcInfo::character_id() const {
  // @@protoc_insertion_point(field_get:types.PcInfo.character_id)
  return _internal_character_id();
}
inline void PcInfo::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void PcInfo::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:types.PcInfo.character_id)
}

// int32 server_id = 2;
inline void PcInfo::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t PcInfo::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t PcInfo::server_id() const {
  // @@protoc_insertion_point(field_get:types.PcInfo.server_id)
  return _internal_server_id();
}
inline void PcInfo::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void PcInfo::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:types.PcInfo.server_id)
}

// .types.CharacterPose character_pose = 3;
inline bool PcInfo::_internal_has_character_pose() const {
  return this != internal_default_instance() && _impl_.character_pose_ != nullptr;
}
inline bool PcInfo::has_character_pose() const {
  return _internal_has_character_pose();
}
inline void PcInfo::clear_character_pose() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_pose_ != nullptr) {
    delete _impl_.character_pose_;
  }
  _impl_.character_pose_ = nullptr;
}
inline const ::types::CharacterPose& PcInfo::_internal_character_pose() const {
  const ::types::CharacterPose* p = _impl_.character_pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::CharacterPose&>(
      ::types::_CharacterPose_default_instance_);
}
inline const ::types::CharacterPose& PcInfo::character_pose() const {
  // @@protoc_insertion_point(field_get:types.PcInfo.character_pose)
  return _internal_character_pose();
}
inline void PcInfo::unsafe_arena_set_allocated_character_pose(
    ::types::CharacterPose* character_pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_pose_);
  }
  _impl_.character_pose_ = character_pose;
  if (character_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.PcInfo.character_pose)
}
inline ::types::CharacterPose* PcInfo::release_character_pose() {
  
  ::types::CharacterPose* temp = _impl_.character_pose_;
  _impl_.character_pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::CharacterPose* PcInfo::unsafe_arena_release_character_pose() {
  // @@protoc_insertion_point(field_release:types.PcInfo.character_pose)
  
  ::types::CharacterPose* temp = _impl_.character_pose_;
  _impl_.character_pose_ = nullptr;
  return temp;
}
inline ::types::CharacterPose* PcInfo::_internal_mutable_character_pose() {
  
  if (_impl_.character_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::CharacterPose>(GetArenaForAllocation());
    _impl_.character_pose_ = p;
  }
  return _impl_.character_pose_;
}
inline ::types::CharacterPose* PcInfo::mutable_character_pose() {
  ::types::CharacterPose* _msg = _internal_mutable_character_pose();
  // @@protoc_insertion_point(field_mutable:types.PcInfo.character_pose)
  return _msg;
}
inline void PcInfo::set_allocated_character_pose(::types::CharacterPose* character_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.character_pose_;
  }
  if (character_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character_pose);
    if (message_arena != submessage_arena) {
      character_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_pose_ = character_pose;
  // @@protoc_insertion_point(field_set_allocated:types.PcInfo.character_pose)
}

// int64 object_id = 4;
inline void PcInfo::clear_object_id() {
  _impl_.object_id_ = int64_t{0};
}
inline int64_t PcInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline int64_t PcInfo::object_id() const {
  // @@protoc_insertion_point(field_get:types.PcInfo.object_id)
  return _internal_object_id();
}
inline void PcInfo::_internal_set_object_id(int64_t value) {
  
  _impl_.object_id_ = value;
}
inline void PcInfo::set_object_id(int64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:types.PcInfo.object_id)
}

// -------------------------------------------------------------------

// SectionInfo

// uint64 section_id = 1;
inline void SectionInfo::clear_section_id() {
  _impl_.section_id_ = uint64_t{0u};
}
inline uint64_t SectionInfo::_internal_section_id() const {
  return _impl_.section_id_;
}
inline uint64_t SectionInfo::section_id() const {
  // @@protoc_insertion_point(field_get:types.SectionInfo.section_id)
  return _internal_section_id();
}
inline void SectionInfo::_internal_set_section_id(uint64_t value) {
  
  _impl_.section_id_ = value;
}
inline void SectionInfo::set_section_id(uint64_t value) {
  _internal_set_section_id(value);
  // @@protoc_insertion_point(field_set:types.SectionInfo.section_id)
}

// int32 map_uid = 2;
inline void SectionInfo::clear_map_uid() {
  _impl_.map_uid_ = 0;
}
inline int32_t SectionInfo::_internal_map_uid() const {
  return _impl_.map_uid_;
}
inline int32_t SectionInfo::map_uid() const {
  // @@protoc_insertion_point(field_get:types.SectionInfo.map_uid)
  return _internal_map_uid();
}
inline void SectionInfo::_internal_set_map_uid(int32_t value) {
  
  _impl_.map_uid_ = value;
}
inline void SectionInfo::set_map_uid(int32_t value) {
  _internal_set_map_uid(value);
  // @@protoc_insertion_point(field_set:types.SectionInfo.map_uid)
}

// repeated .types.NpcInfo npc_infos = 3;
inline int SectionInfo::_internal_npc_infos_size() const {
  return _impl_.npc_infos_.size();
}
inline int SectionInfo::npc_infos_size() const {
  return _internal_npc_infos_size();
}
inline void SectionInfo::clear_npc_infos() {
  _impl_.npc_infos_.Clear();
}
inline ::types::NpcInfo* SectionInfo::mutable_npc_infos(int index) {
  // @@protoc_insertion_point(field_mutable:types.SectionInfo.npc_infos)
  return _impl_.npc_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >*
SectionInfo::mutable_npc_infos() {
  // @@protoc_insertion_point(field_mutable_list:types.SectionInfo.npc_infos)
  return &_impl_.npc_infos_;
}
inline const ::types::NpcInfo& SectionInfo::_internal_npc_infos(int index) const {
  return _impl_.npc_infos_.Get(index);
}
inline const ::types::NpcInfo& SectionInfo::npc_infos(int index) const {
  // @@protoc_insertion_point(field_get:types.SectionInfo.npc_infos)
  return _internal_npc_infos(index);
}
inline ::types::NpcInfo* SectionInfo::_internal_add_npc_infos() {
  return _impl_.npc_infos_.Add();
}
inline ::types::NpcInfo* SectionInfo::add_npc_infos() {
  ::types::NpcInfo* _add = _internal_add_npc_infos();
  // @@protoc_insertion_point(field_add:types.SectionInfo.npc_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::NpcInfo >&
SectionInfo::npc_infos() const {
  // @@protoc_insertion_point(field_list:types.SectionInfo.npc_infos)
  return _impl_.npc_infos_;
}

// repeated .types.PcInfo pc_infos = 4;
inline int SectionInfo::_internal_pc_infos_size() const {
  return _impl_.pc_infos_.size();
}
inline int SectionInfo::pc_infos_size() const {
  return _internal_pc_infos_size();
}
inline void SectionInfo::clear_pc_infos() {
  _impl_.pc_infos_.Clear();
}
inline ::types::PcInfo* SectionInfo::mutable_pc_infos(int index) {
  // @@protoc_insertion_point(field_mutable:types.SectionInfo.pc_infos)
  return _impl_.pc_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PcInfo >*
SectionInfo::mutable_pc_infos() {
  // @@protoc_insertion_point(field_mutable_list:types.SectionInfo.pc_infos)
  return &_impl_.pc_infos_;
}
inline const ::types::PcInfo& SectionInfo::_internal_pc_infos(int index) const {
  return _impl_.pc_infos_.Get(index);
}
inline const ::types::PcInfo& SectionInfo::pc_infos(int index) const {
  // @@protoc_insertion_point(field_get:types.SectionInfo.pc_infos)
  return _internal_pc_infos(index);
}
inline ::types::PcInfo* SectionInfo::_internal_add_pc_infos() {
  return _impl_.pc_infos_.Add();
}
inline ::types::PcInfo* SectionInfo::add_pc_infos() {
  ::types::PcInfo* _add = _internal_add_pc_infos();
  // @@protoc_insertion_point(field_add:types.SectionInfo.pc_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::PcInfo >&
SectionInfo::pc_infos() const {
  // @@protoc_insertion_point(field_list:types.SectionInfo.pc_infos)
  return _impl_.pc_infos_;
}

// repeated .types.ProjectileInfo projectile_infos = 5;
inline int SectionInfo::_internal_projectile_infos_size() const {
  return _impl_.projectile_infos_.size();
}
inline int SectionInfo::projectile_infos_size() const {
  return _internal_projectile_infos_size();
}
inline void SectionInfo::clear_projectile_infos() {
  _impl_.projectile_infos_.Clear();
}
inline ::types::ProjectileInfo* SectionInfo::mutable_projectile_infos(int index) {
  // @@protoc_insertion_point(field_mutable:types.SectionInfo.projectile_infos)
  return _impl_.projectile_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ProjectileInfo >*
SectionInfo::mutable_projectile_infos() {
  // @@protoc_insertion_point(field_mutable_list:types.SectionInfo.projectile_infos)
  return &_impl_.projectile_infos_;
}
inline const ::types::ProjectileInfo& SectionInfo::_internal_projectile_infos(int index) const {
  return _impl_.projectile_infos_.Get(index);
}
inline const ::types::ProjectileInfo& SectionInfo::projectile_infos(int index) const {
  // @@protoc_insertion_point(field_get:types.SectionInfo.projectile_infos)
  return _internal_projectile_infos(index);
}
inline ::types::ProjectileInfo* SectionInfo::_internal_add_projectile_infos() {
  return _impl_.projectile_infos_.Add();
}
inline ::types::ProjectileInfo* SectionInfo::add_projectile_infos() {
  ::types::ProjectileInfo* _add = _internal_add_projectile_infos();
  // @@protoc_insertion_point(field_add:types.SectionInfo.projectile_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::types::ProjectileInfo >&
SectionInfo::projectile_infos() const {
  // @@protoc_insertion_point(field_list:types.SectionInfo.projectile_infos)
  return _impl_.projectile_infos_;
}

// int64 owner_character_id = 6;
inline void SectionInfo::clear_owner_character_id() {
  _impl_.owner_character_id_ = int64_t{0};
}
inline int64_t SectionInfo::_internal_owner_character_id() const {
  return _impl_.owner_character_id_;
}
inline int64_t SectionInfo::owner_character_id() const {
  // @@protoc_insertion_point(field_get:types.SectionInfo.owner_character_id)
  return _internal_owner_character_id();
}
inline void SectionInfo::_internal_set_owner_character_id(int64_t value) {
  
  _impl_.owner_character_id_ = value;
}
inline void SectionInfo::set_owner_character_id(int64_t value) {
  _internal_set_owner_character_id(value);
  // @@protoc_insertion_point(field_set:types.SectionInfo.owner_character_id)
}

// -------------------------------------------------------------------

// JumpAction

// bool is_jump = 1;
inline void JumpAction::clear_is_jump() {
  _impl_.is_jump_ = false;
}
inline bool JumpAction::_internal_is_jump() const {
  return _impl_.is_jump_;
}
inline bool JumpAction::is_jump() const {
  // @@protoc_insertion_point(field_get:types.JumpAction.is_jump)
  return _internal_is_jump();
}
inline void JumpAction::_internal_set_is_jump(bool value) {
  
  _impl_.is_jump_ = value;
}
inline void JumpAction::set_is_jump(bool value) {
  _internal_set_is_jump(value);
  // @@protoc_insertion_point(field_set:types.JumpAction.is_jump)
}

// -------------------------------------------------------------------

// MovementChanged

// sint32 movement_mode = 1;
inline void MovementChanged::clear_movement_mode() {
  _impl_.movement_mode_ = 0;
}
inline int32_t MovementChanged::_internal_movement_mode() const {
  return _impl_.movement_mode_;
}
inline int32_t MovementChanged::movement_mode() const {
  // @@protoc_insertion_point(field_get:types.MovementChanged.movement_mode)
  return _internal_movement_mode();
}
inline void MovementChanged::_internal_set_movement_mode(int32_t value) {
  
  _impl_.movement_mode_ = value;
}
inline void MovementChanged::set_movement_mode(int32_t value) {
  _internal_set_movement_mode(value);
  // @@protoc_insertion_point(field_set:types.MovementChanged.movement_mode)
}

// -------------------------------------------------------------------

// SprintAction

// bool is_sprint = 1;
inline void SprintAction::clear_is_sprint() {
  _impl_.is_sprint_ = false;
}
inline bool SprintAction::_internal_is_sprint() const {
  return _impl_.is_sprint_;
}
inline bool SprintAction::is_sprint() const {
  // @@protoc_insertion_point(field_get:types.SprintAction.is_sprint)
  return _internal_is_sprint();
}
inline void SprintAction::_internal_set_is_sprint(bool value) {
  
  _impl_.is_sprint_ = value;
}
inline void SprintAction::set_is_sprint(bool value) {
  _internal_set_is_sprint(value);
  // @@protoc_insertion_point(field_set:types.SprintAction.is_sprint)
}

// -------------------------------------------------------------------

// BaseAttackAction

// float client_timestamp = 1;
inline void BaseAttackAction::clear_client_timestamp() {
  _impl_.client_timestamp_ = 0;
}
inline float BaseAttackAction::_internal_client_timestamp() const {
  return _impl_.client_timestamp_;
}
inline float BaseAttackAction::client_timestamp() const {
  // @@protoc_insertion_point(field_get:types.BaseAttackAction.client_timestamp)
  return _internal_client_timestamp();
}
inline void BaseAttackAction::_internal_set_client_timestamp(float value) {
  
  _impl_.client_timestamp_ = value;
}
inline void BaseAttackAction::set_client_timestamp(float value) {
  _internal_set_client_timestamp(value);
  // @@protoc_insertion_point(field_set:types.BaseAttackAction.client_timestamp)
}

// -------------------------------------------------------------------

// ClientAction

// .types.JumpAction jump_action = 1;
inline bool ClientAction::_internal_has_jump_action() const {
  return ClientActionField_case() == kJumpAction;
}
inline bool ClientAction::has_jump_action() const {
  return _internal_has_jump_action();
}
inline void ClientAction::set_has_jump_action() {
  _impl_._oneof_case_[0] = kJumpAction;
}
inline void ClientAction::clear_jump_action() {
  if (_internal_has_jump_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ClientActionField_.jump_action_;
    }
    clear_has_ClientActionField();
  }
}
inline ::types::JumpAction* ClientAction::release_jump_action() {
  // @@protoc_insertion_point(field_release:types.ClientAction.jump_action)
  if (_internal_has_jump_action()) {
    clear_has_ClientActionField();
    ::types::JumpAction* temp = _impl_.ClientActionField_.jump_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ClientActionField_.jump_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::types::JumpAction& ClientAction::_internal_jump_action() const {
  return _internal_has_jump_action()
      ? *_impl_.ClientActionField_.jump_action_
      : reinterpret_cast< ::types::JumpAction&>(::types::_JumpAction_default_instance_);
}
inline const ::types::JumpAction& ClientAction::jump_action() const {
  // @@protoc_insertion_point(field_get:types.ClientAction.jump_action)
  return _internal_jump_action();
}
inline ::types::JumpAction* ClientAction::unsafe_arena_release_jump_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:types.ClientAction.jump_action)
  if (_internal_has_jump_action()) {
    clear_has_ClientActionField();
    ::types::JumpAction* temp = _impl_.ClientActionField_.jump_action_;
    _impl_.ClientActionField_.jump_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientAction::unsafe_arena_set_allocated_jump_action(::types::JumpAction* jump_action) {
  clear_ClientActionField();
  if (jump_action) {
    set_has_jump_action();
    _impl_.ClientActionField_.jump_action_ = jump_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ClientAction.jump_action)
}
inline ::types::JumpAction* ClientAction::_internal_mutable_jump_action() {
  if (!_internal_has_jump_action()) {
    clear_ClientActionField();
    set_has_jump_action();
    _impl_.ClientActionField_.jump_action_ = CreateMaybeMessage< ::types::JumpAction >(GetArenaForAllocation());
  }
  return _impl_.ClientActionField_.jump_action_;
}
inline ::types::JumpAction* ClientAction::mutable_jump_action() {
  ::types::JumpAction* _msg = _internal_mutable_jump_action();
  // @@protoc_insertion_point(field_mutable:types.ClientAction.jump_action)
  return _msg;
}

// .types.SprintAction sprint_action = 2;
inline bool ClientAction::_internal_has_sprint_action() const {
  return ClientActionField_case() == kSprintAction;
}
inline bool ClientAction::has_sprint_action() const {
  return _internal_has_sprint_action();
}
inline void ClientAction::set_has_sprint_action() {
  _impl_._oneof_case_[0] = kSprintAction;
}
inline void ClientAction::clear_sprint_action() {
  if (_internal_has_sprint_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ClientActionField_.sprint_action_;
    }
    clear_has_ClientActionField();
  }
}
inline ::types::SprintAction* ClientAction::release_sprint_action() {
  // @@protoc_insertion_point(field_release:types.ClientAction.sprint_action)
  if (_internal_has_sprint_action()) {
    clear_has_ClientActionField();
    ::types::SprintAction* temp = _impl_.ClientActionField_.sprint_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ClientActionField_.sprint_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::types::SprintAction& ClientAction::_internal_sprint_action() const {
  return _internal_has_sprint_action()
      ? *_impl_.ClientActionField_.sprint_action_
      : reinterpret_cast< ::types::SprintAction&>(::types::_SprintAction_default_instance_);
}
inline const ::types::SprintAction& ClientAction::sprint_action() const {
  // @@protoc_insertion_point(field_get:types.ClientAction.sprint_action)
  return _internal_sprint_action();
}
inline ::types::SprintAction* ClientAction::unsafe_arena_release_sprint_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:types.ClientAction.sprint_action)
  if (_internal_has_sprint_action()) {
    clear_has_ClientActionField();
    ::types::SprintAction* temp = _impl_.ClientActionField_.sprint_action_;
    _impl_.ClientActionField_.sprint_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientAction::unsafe_arena_set_allocated_sprint_action(::types::SprintAction* sprint_action) {
  clear_ClientActionField();
  if (sprint_action) {
    set_has_sprint_action();
    _impl_.ClientActionField_.sprint_action_ = sprint_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ClientAction.sprint_action)
}
inline ::types::SprintAction* ClientAction::_internal_mutable_sprint_action() {
  if (!_internal_has_sprint_action()) {
    clear_ClientActionField();
    set_has_sprint_action();
    _impl_.ClientActionField_.sprint_action_ = CreateMaybeMessage< ::types::SprintAction >(GetArenaForAllocation());
  }
  return _impl_.ClientActionField_.sprint_action_;
}
inline ::types::SprintAction* ClientAction::mutable_sprint_action() {
  ::types::SprintAction* _msg = _internal_mutable_sprint_action();
  // @@protoc_insertion_point(field_mutable:types.ClientAction.sprint_action)
  return _msg;
}

// .types.MovementChanged movement_changed_action = 3;
inline bool ClientAction::_internal_has_movement_changed_action() const {
  return ClientActionField_case() == kMovementChangedAction;
}
inline bool ClientAction::has_movement_changed_action() const {
  return _internal_has_movement_changed_action();
}
inline void ClientAction::set_has_movement_changed_action() {
  _impl_._oneof_case_[0] = kMovementChangedAction;
}
inline void ClientAction::clear_movement_changed_action() {
  if (_internal_has_movement_changed_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ClientActionField_.movement_changed_action_;
    }
    clear_has_ClientActionField();
  }
}
inline ::types::MovementChanged* ClientAction::release_movement_changed_action() {
  // @@protoc_insertion_point(field_release:types.ClientAction.movement_changed_action)
  if (_internal_has_movement_changed_action()) {
    clear_has_ClientActionField();
    ::types::MovementChanged* temp = _impl_.ClientActionField_.movement_changed_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ClientActionField_.movement_changed_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::types::MovementChanged& ClientAction::_internal_movement_changed_action() const {
  return _internal_has_movement_changed_action()
      ? *_impl_.ClientActionField_.movement_changed_action_
      : reinterpret_cast< ::types::MovementChanged&>(::types::_MovementChanged_default_instance_);
}
inline const ::types::MovementChanged& ClientAction::movement_changed_action() const {
  // @@protoc_insertion_point(field_get:types.ClientAction.movement_changed_action)
  return _internal_movement_changed_action();
}
inline ::types::MovementChanged* ClientAction::unsafe_arena_release_movement_changed_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:types.ClientAction.movement_changed_action)
  if (_internal_has_movement_changed_action()) {
    clear_has_ClientActionField();
    ::types::MovementChanged* temp = _impl_.ClientActionField_.movement_changed_action_;
    _impl_.ClientActionField_.movement_changed_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientAction::unsafe_arena_set_allocated_movement_changed_action(::types::MovementChanged* movement_changed_action) {
  clear_ClientActionField();
  if (movement_changed_action) {
    set_has_movement_changed_action();
    _impl_.ClientActionField_.movement_changed_action_ = movement_changed_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ClientAction.movement_changed_action)
}
inline ::types::MovementChanged* ClientAction::_internal_mutable_movement_changed_action() {
  if (!_internal_has_movement_changed_action()) {
    clear_ClientActionField();
    set_has_movement_changed_action();
    _impl_.ClientActionField_.movement_changed_action_ = CreateMaybeMessage< ::types::MovementChanged >(GetArenaForAllocation());
  }
  return _impl_.ClientActionField_.movement_changed_action_;
}
inline ::types::MovementChanged* ClientAction::mutable_movement_changed_action() {
  ::types::MovementChanged* _msg = _internal_mutable_movement_changed_action();
  // @@protoc_insertion_point(field_mutable:types.ClientAction.movement_changed_action)
  return _msg;
}

// .types.BaseAttackAction base_attack_action = 4;
inline bool ClientAction::_internal_has_base_attack_action() const {
  return ClientActionField_case() == kBaseAttackAction;
}
inline bool ClientAction::has_base_attack_action() const {
  return _internal_has_base_attack_action();
}
inline void ClientAction::set_has_base_attack_action() {
  _impl_._oneof_case_[0] = kBaseAttackAction;
}
inline void ClientAction::clear_base_attack_action() {
  if (_internal_has_base_attack_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.ClientActionField_.base_attack_action_;
    }
    clear_has_ClientActionField();
  }
}
inline ::types::BaseAttackAction* ClientAction::release_base_attack_action() {
  // @@protoc_insertion_point(field_release:types.ClientAction.base_attack_action)
  if (_internal_has_base_attack_action()) {
    clear_has_ClientActionField();
    ::types::BaseAttackAction* temp = _impl_.ClientActionField_.base_attack_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.ClientActionField_.base_attack_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::types::BaseAttackAction& ClientAction::_internal_base_attack_action() const {
  return _internal_has_base_attack_action()
      ? *_impl_.ClientActionField_.base_attack_action_
      : reinterpret_cast< ::types::BaseAttackAction&>(::types::_BaseAttackAction_default_instance_);
}
inline const ::types::BaseAttackAction& ClientAction::base_attack_action() const {
  // @@protoc_insertion_point(field_get:types.ClientAction.base_attack_action)
  return _internal_base_attack_action();
}
inline ::types::BaseAttackAction* ClientAction::unsafe_arena_release_base_attack_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:types.ClientAction.base_attack_action)
  if (_internal_has_base_attack_action()) {
    clear_has_ClientActionField();
    ::types::BaseAttackAction* temp = _impl_.ClientActionField_.base_attack_action_;
    _impl_.ClientActionField_.base_attack_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientAction::unsafe_arena_set_allocated_base_attack_action(::types::BaseAttackAction* base_attack_action) {
  clear_ClientActionField();
  if (base_attack_action) {
    set_has_base_attack_action();
    _impl_.ClientActionField_.base_attack_action_ = base_attack_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.ClientAction.base_attack_action)
}
inline ::types::BaseAttackAction* ClientAction::_internal_mutable_base_attack_action() {
  if (!_internal_has_base_attack_action()) {
    clear_ClientActionField();
    set_has_base_attack_action();
    _impl_.ClientActionField_.base_attack_action_ = CreateMaybeMessage< ::types::BaseAttackAction >(GetArenaForAllocation());
  }
  return _impl_.ClientActionField_.base_attack_action_;
}
inline ::types::BaseAttackAction* ClientAction::mutable_base_attack_action() {
  ::types::BaseAttackAction* _msg = _internal_mutable_base_attack_action();
  // @@protoc_insertion_point(field_mutable:types.ClientAction.base_attack_action)
  return _msg;
}

inline bool ClientAction::has_ClientActionField() const {
  return ClientActionField_case() != CLIENTACTIONFIELD_NOT_SET;
}
inline void ClientAction::clear_has_ClientActionField() {
  _impl_._oneof_case_[0] = CLIENTACTIONFIELD_NOT_SET;
}
inline ClientAction::ClientActionFieldCase ClientAction::ClientActionField_case() const {
  return ClientAction::ClientActionFieldCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Sphere

// float radius = 1;
inline void Sphere::clear_radius() {
  _impl_.radius_ = 0;
}
inline float Sphere::_internal_radius() const {
  return _impl_.radius_;
}
inline float Sphere::radius() const {
  // @@protoc_insertion_point(field_get:types.Sphere.radius)
  return _internal_radius();
}
inline void Sphere::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void Sphere::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:types.Sphere.radius)
}

// -------------------------------------------------------------------

// Box

// .types.Vector3 extent = 1;
inline bool Box::_internal_has_extent() const {
  return this != internal_default_instance() && _impl_.extent_ != nullptr;
}
inline bool Box::has_extent() const {
  return _internal_has_extent();
}
inline void Box::clear_extent() {
  if (GetArenaForAllocation() == nullptr && _impl_.extent_ != nullptr) {
    delete _impl_.extent_;
  }
  _impl_.extent_ = nullptr;
}
inline const ::types::Vector3& Box::_internal_extent() const {
  const ::types::Vector3* p = _impl_.extent_;
  return p != nullptr ? *p : reinterpret_cast<const ::types::Vector3&>(
      ::types::_Vector3_default_instance_);
}
inline const ::types::Vector3& Box::extent() const {
  // @@protoc_insertion_point(field_get:types.Box.extent)
  return _internal_extent();
}
inline void Box::unsafe_arena_set_allocated_extent(
    ::types::Vector3* extent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extent_);
  }
  _impl_.extent_ = extent;
  if (extent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.Box.extent)
}
inline ::types::Vector3* Box::release_extent() {
  
  ::types::Vector3* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::types::Vector3* Box::unsafe_arena_release_extent() {
  // @@protoc_insertion_point(field_release:types.Box.extent)
  
  ::types::Vector3* temp = _impl_.extent_;
  _impl_.extent_ = nullptr;
  return temp;
}
inline ::types::Vector3* Box::_internal_mutable_extent() {
  
  if (_impl_.extent_ == nullptr) {
    auto* p = CreateMaybeMessage<::types::Vector3>(GetArenaForAllocation());
    _impl_.extent_ = p;
  }
  return _impl_.extent_;
}
inline ::types::Vector3* Box::mutable_extent() {
  ::types::Vector3* _msg = _internal_mutable_extent();
  // @@protoc_insertion_point(field_mutable:types.Box.extent)
  return _msg;
}
inline void Box::set_allocated_extent(::types::Vector3* extent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.extent_;
  }
  if (extent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extent);
    if (message_arena != submessage_arena) {
      extent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extent, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extent_ = extent;
  // @@protoc_insertion_point(field_set_allocated:types.Box.extent)
}

// -------------------------------------------------------------------

// Capsule

// float half_height = 1;
inline void Capsule::clear_half_height() {
  _impl_.half_height_ = 0;
}
inline float Capsule::_internal_half_height() const {
  return _impl_.half_height_;
}
inline float Capsule::half_height() const {
  // @@protoc_insertion_point(field_get:types.Capsule.half_height)
  return _internal_half_height();
}
inline void Capsule::_internal_set_half_height(float value) {
  
  _impl_.half_height_ = value;
}
inline void Capsule::set_half_height(float value) {
  _internal_set_half_height(value);
  // @@protoc_insertion_point(field_set:types.Capsule.half_height)
}

// float radius = 2;
inline void Capsule::clear_radius() {
  _impl_.radius_ = 0;
}
inline float Capsule::_internal_radius() const {
  return _impl_.radius_;
}
inline float Capsule::radius() const {
  // @@protoc_insertion_point(field_get:types.Capsule.radius)
  return _internal_radius();
}
inline void Capsule::_internal_set_radius(float value) {
  
  _impl_.radius_ = value;
}
inline void Capsule::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:types.Capsule.radius)
}

// -------------------------------------------------------------------

// DebugShapeInfo

// .types.Sphere sphere = 1;
inline bool DebugShapeInfo::_internal_has_sphere() const {
  return DebugShapeInfoField_case() == kSphere;
}
inline bool DebugShapeInfo::has_sphere() const {
  return _internal_has_sphere();
}
inline void DebugShapeInfo::set_has_sphere() {
  _impl_._oneof_case_[0] = kSphere;
}
inline void DebugShapeInfo::clear_sphere() {
  if (_internal_has_sphere()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DebugShapeInfoField_.sphere_;
    }
    clear_has_DebugShapeInfoField();
  }
}
inline ::types::Sphere* DebugShapeInfo::release_sphere() {
  // @@protoc_insertion_point(field_release:types.DebugShapeInfo.sphere)
  if (_internal_has_sphere()) {
    clear_has_DebugShapeInfoField();
    ::types::Sphere* temp = _impl_.DebugShapeInfoField_.sphere_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DebugShapeInfoField_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::types::Sphere& DebugShapeInfo::_internal_sphere() const {
  return _internal_has_sphere()
      ? *_impl_.DebugShapeInfoField_.sphere_
      : reinterpret_cast< ::types::Sphere&>(::types::_Sphere_default_instance_);
}
inline const ::types::Sphere& DebugShapeInfo::sphere() const {
  // @@protoc_insertion_point(field_get:types.DebugShapeInfo.sphere)
  return _internal_sphere();
}
inline ::types::Sphere* DebugShapeInfo::unsafe_arena_release_sphere() {
  // @@protoc_insertion_point(field_unsafe_arena_release:types.DebugShapeInfo.sphere)
  if (_internal_has_sphere()) {
    clear_has_DebugShapeInfoField();
    ::types::Sphere* temp = _impl_.DebugShapeInfoField_.sphere_;
    _impl_.DebugShapeInfoField_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DebugShapeInfo::unsafe_arena_set_allocated_sphere(::types::Sphere* sphere) {
  clear_DebugShapeInfoField();
  if (sphere) {
    set_has_sphere();
    _impl_.DebugShapeInfoField_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.DebugShapeInfo.sphere)
}
inline ::types::Sphere* DebugShapeInfo::_internal_mutable_sphere() {
  if (!_internal_has_sphere()) {
    clear_DebugShapeInfoField();
    set_has_sphere();
    _impl_.DebugShapeInfoField_.sphere_ = CreateMaybeMessage< ::types::Sphere >(GetArenaForAllocation());
  }
  return _impl_.DebugShapeInfoField_.sphere_;
}
inline ::types::Sphere* DebugShapeInfo::mutable_sphere() {
  ::types::Sphere* _msg = _internal_mutable_sphere();
  // @@protoc_insertion_point(field_mutable:types.DebugShapeInfo.sphere)
  return _msg;
}

// .types.Box box = 2;
inline bool DebugShapeInfo::_internal_has_box() const {
  return DebugShapeInfoField_case() == kBox;
}
inline bool DebugShapeInfo::has_box() const {
  return _internal_has_box();
}
inline void DebugShapeInfo::set_has_box() {
  _impl_._oneof_case_[0] = kBox;
}
inline void DebugShapeInfo::clear_box() {
  if (_internal_has_box()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DebugShapeInfoField_.box_;
    }
    clear_has_DebugShapeInfoField();
  }
}
inline ::types::Box* DebugShapeInfo::release_box() {
  // @@protoc_insertion_point(field_release:types.DebugShapeInfo.box)
  if (_internal_has_box()) {
    clear_has_DebugShapeInfoField();
    ::types::Box* temp = _impl_.DebugShapeInfoField_.box_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DebugShapeInfoField_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::types::Box& DebugShapeInfo::_internal_box() const {
  return _internal_has_box()
      ? *_impl_.DebugShapeInfoField_.box_
      : reinterpret_cast< ::types::Box&>(::types::_Box_default_instance_);
}
inline const ::types::Box& DebugShapeInfo::box() const {
  // @@protoc_insertion_point(field_get:types.DebugShapeInfo.box)
  return _internal_box();
}
inline ::types::Box* DebugShapeInfo::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:types.DebugShapeInfo.box)
  if (_internal_has_box()) {
    clear_has_DebugShapeInfoField();
    ::types::Box* temp = _impl_.DebugShapeInfoField_.box_;
    _impl_.DebugShapeInfoField_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DebugShapeInfo::unsafe_arena_set_allocated_box(::types::Box* box) {
  clear_DebugShapeInfoField();
  if (box) {
    set_has_box();
    _impl_.DebugShapeInfoField_.box_ = box;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.DebugShapeInfo.box)
}
inline ::types::Box* DebugShapeInfo::_internal_mutable_box() {
  if (!_internal_has_box()) {
    clear_DebugShapeInfoField();
    set_has_box();
    _impl_.DebugShapeInfoField_.box_ = CreateMaybeMessage< ::types::Box >(GetArenaForAllocation());
  }
  return _impl_.DebugShapeInfoField_.box_;
}
inline ::types::Box* DebugShapeInfo::mutable_box() {
  ::types::Box* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:types.DebugShapeInfo.box)
  return _msg;
}

// .types.Capsule capsule = 3;
inline bool DebugShapeInfo::_internal_has_capsule() const {
  return DebugShapeInfoField_case() == kCapsule;
}
inline bool DebugShapeInfo::has_capsule() const {
  return _internal_has_capsule();
}
inline void DebugShapeInfo::set_has_capsule() {
  _impl_._oneof_case_[0] = kCapsule;
}
inline void DebugShapeInfo::clear_capsule() {
  if (_internal_has_capsule()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.DebugShapeInfoField_.capsule_;
    }
    clear_has_DebugShapeInfoField();
  }
}
inline ::types::Capsule* DebugShapeInfo::release_capsule() {
  // @@protoc_insertion_point(field_release:types.DebugShapeInfo.capsule)
  if (_internal_has_capsule()) {
    clear_has_DebugShapeInfoField();
    ::types::Capsule* temp = _impl_.DebugShapeInfoField_.capsule_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.DebugShapeInfoField_.capsule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::types::Capsule& DebugShapeInfo::_internal_capsule() const {
  return _internal_has_capsule()
      ? *_impl_.DebugShapeInfoField_.capsule_
      : reinterpret_cast< ::types::Capsule&>(::types::_Capsule_default_instance_);
}
inline const ::types::Capsule& DebugShapeInfo::capsule() const {
  // @@protoc_insertion_point(field_get:types.DebugShapeInfo.capsule)
  return _internal_capsule();
}
inline ::types::Capsule* DebugShapeInfo::unsafe_arena_release_capsule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:types.DebugShapeInfo.capsule)
  if (_internal_has_capsule()) {
    clear_has_DebugShapeInfoField();
    ::types::Capsule* temp = _impl_.DebugShapeInfoField_.capsule_;
    _impl_.DebugShapeInfoField_.capsule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DebugShapeInfo::unsafe_arena_set_allocated_capsule(::types::Capsule* capsule) {
  clear_DebugShapeInfoField();
  if (capsule) {
    set_has_capsule();
    _impl_.DebugShapeInfoField_.capsule_ = capsule;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:types.DebugShapeInfo.capsule)
}
inline ::types::Capsule* DebugShapeInfo::_internal_mutable_capsule() {
  if (!_internal_has_capsule()) {
    clear_DebugShapeInfoField();
    set_has_capsule();
    _impl_.DebugShapeInfoField_.capsule_ = CreateMaybeMessage< ::types::Capsule >(GetArenaForAllocation());
  }
  return _impl_.DebugShapeInfoField_.capsule_;
}
inline ::types::Capsule* DebugShapeInfo::mutable_capsule() {
  ::types::Capsule* _msg = _internal_mutable_capsule();
  // @@protoc_insertion_point(field_mutable:types.DebugShapeInfo.capsule)
  return _msg;
}

inline bool DebugShapeInfo::has_DebugShapeInfoField() const {
  return DebugShapeInfoField_case() != DEBUGSHAPEINFOFIELD_NOT_SET;
}
inline void DebugShapeInfo::clear_has_DebugShapeInfoField() {
  _impl_._oneof_case_[0] = DEBUGSHAPEINFOFIELD_NOT_SET;
}
inline DebugShapeInfo::DebugShapeInfoFieldCase DebugShapeInfo::DebugShapeInfoField_case() const {
  return DebugShapeInfo::DebugShapeInfoFieldCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::types::protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::protocol>() {
  return ::types::protocol_descriptor();
}
template <> struct is_proto_enum< ::types::Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::Result>() {
  return ::types::Result_descriptor();
}
template <> struct is_proto_enum< ::types::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::Color>() {
  return ::types::Color_descriptor();
}
template <> struct is_proto_enum< ::types::DebugShape> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::DebugShape>() {
  return ::types::DebugShape_descriptor();
}
template <> struct is_proto_enum< ::types::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::ServerType>() {
  return ::types::ServerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
