// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace types {

enum protocol : int {
  kInvalid = 0,
  kHello = 4097,
  kPingReq = 4098,
  kPingRes = 4099,
  kContentReadyReq = 4100,
  kContentReadyRes = 4101,
  kHelloClient = 4102,
  kHelloServer = 4103,
  kDisconnectAlertNotify = 4104,
  kRegisterServerReq = 4105,
  kRegisterServerRes = 4106,
  kServerPingReq = 4107,
  kServerPingRes = 4108,
  kHelloClientAck = 4109,
  protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool protocol_IsValid(int value);
constexpr protocol protocol_MIN = kInvalid;
constexpr protocol protocol_MAX = kHelloClientAck;
constexpr int protocol_ARRAYSIZE = protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* protocol_descriptor();
template<typename T>
inline const std::string& protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    protocol_descriptor(), enum_t_value);
}
inline bool protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<protocol>(
    protocol_descriptor(), name, value);
}
enum Result : int {
  kSuccess = 0,
  kUnknown = 1,
  kInvalidRequest = 2,
  kInvalidParameter = 3,
  kNotFound = 4,
  kInternalError = 5,
  kDatabaseError = 6,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Result_IsValid(int value);
constexpr Result Result_MIN = kSuccess;
constexpr Result Result_MAX = kDatabaseError;
constexpr int Result_ARRAYSIZE = Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_descriptor();
template<typename T>
inline const std::string& Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_descriptor(), enum_t_value);
}
inline bool Result_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result>(
    Result_descriptor(), name, value);
}
enum ServerType : int {
  kUnknownServer = 0,
  kDedicatedServer = 1,
  kWorldServer = 2,
  kLobbyServer = 3,
  ServerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerType_IsValid(int value);
constexpr ServerType ServerType_MIN = kUnknownServer;
constexpr ServerType ServerType_MAX = kLobbyServer;
constexpr int ServerType_ARRAYSIZE = ServerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerType_descriptor();
template<typename T>
inline const std::string& ServerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerType_descriptor(), enum_t_value);
}
inline bool ServerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerType>(
    ServerType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================

static const int kMessageIdFieldNumber = 1001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::types::protocol, ::types::protocol_IsValid>, 14, false >
  message_id;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace types

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::types::protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::protocol>() {
  return ::types::protocol_descriptor();
}
template <> struct is_proto_enum< ::types::Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::Result>() {
  return ::types::Result_descriptor();
}
template <> struct is_proto_enum< ::types::ServerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::types::ServerType>() {
  return ::types::ServerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
