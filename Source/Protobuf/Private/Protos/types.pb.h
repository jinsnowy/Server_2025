// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_types_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_types_2eproto;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace types {
enum protocol : int {
  kInvalid = 0,
  kHello = 4097,
  kPingReq = 4098,
  kPingRes = 4099,
  kContentReadyReq = 4100,
  kContentReadyRes = 4101,
  kHelloClient = 4102,
  kHelloServer = 4103,
  kDisconnectAlertNotify = 4104,
  protocol_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  protocol_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool protocol_IsValid(int value);
extern const uint32_t protocol_internal_data_[];
constexpr protocol protocol_MIN = static_cast<protocol>(0);
constexpr protocol protocol_MAX = static_cast<protocol>(4104);
constexpr int protocol_ARRAYSIZE = 4104 + 1;
const ::google::protobuf::EnumDescriptor*
protocol_descriptor();
template <typename T>
const std::string& protocol_Name(T value) {
  static_assert(std::is_same<T, protocol>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to protocol_Name().");
  return ::google::protobuf::internal::NameOfEnum(protocol_descriptor(), value);
}
inline bool protocol_Parse(absl::string_view name, protocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<protocol>(
      protocol_descriptor(), name, value);
}
enum Result : int {
  kSuccess = 0,
  kUnknown = 1,
  kInvalidRequest = 2,
  kInvalidParameter = 3,
  kNotFound = 4,
  kInternalError = 5,
  Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Result_IsValid(int value);
extern const uint32_t Result_internal_data_[];
constexpr Result Result_MIN = static_cast<Result>(0);
constexpr Result Result_MAX = static_cast<Result>(5);
constexpr int Result_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
Result_descriptor();
template <typename T>
const std::string& Result_Name(T value) {
  static_assert(std::is_same<T, Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return Result_Name(static_cast<Result>(value));
}
template <>
inline const std::string& Result_Name(Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Result_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool Result_Parse(absl::string_view name, Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Result>(
      Result_descriptor(), name, value);
}

// ===================================================================



// ===================================================================



static const int kMessageIdFieldNumber = 1001;
extern ::google::protobuf::internal::ExtensionIdentifier<
    ::google::protobuf::MessageOptions, ::google::protobuf::internal::EnumTypeTraits< ::types::protocol, ::types::protocol_IsValid>, 14,
    false>
    message_id;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace types


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::types::protocol> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::types::protocol>() {
  return ::types::protocol_descriptor();
}
template <>
struct is_proto_enum<::types::Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::types::Result>() {
  return ::types::Result_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_types_2eproto_2epb_2eh
