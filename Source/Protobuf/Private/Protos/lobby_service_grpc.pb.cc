// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lobby_service_grpc.proto

#include "lobby_service_grpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace lobby_service {
PROTOBUF_CONSTEXPR RegisterServerRequest::RegisterServerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.server_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerRequestDefaultTypeInternal() {}
  union {
    RegisterServerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerRequestDefaultTypeInternal _RegisterServerRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterServerReponse::RegisterServerReponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.server_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerReponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerReponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerReponseDefaultTypeInternal() {}
  union {
    RegisterServerReponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerReponseDefaultTypeInternal _RegisterServerReponse_default_instance_;
}  // namespace lobby_service
static ::_pb::Metadata file_level_metadata_lobby_5fservice_5fgrpc_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_lobby_5fservice_5fgrpc_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_lobby_5fservice_5fgrpc_2eproto = nullptr;

const uint32_t TableStruct_lobby_5fservice_5fgrpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lobby_service::RegisterServerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lobby_service::RegisterServerRequest, _impl_.server_address_),
  PROTOBUF_FIELD_OFFSET(::lobby_service::RegisterServerRequest, _impl_.server_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lobby_service::RegisterServerReponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::lobby_service::RegisterServerReponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::lobby_service::RegisterServerReponse, _impl_.server_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::lobby_service::RegisterServerRequest)},
  { 8, -1, -1, sizeof(::lobby_service::RegisterServerReponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::lobby_service::_RegisterServerRequest_default_instance_._instance,
  &::lobby_service::_RegisterServerReponse_default_instance_._instance,
};

const char descriptor_table_protodef_lobby_5fservice_5fgrpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030lobby_service_grpc.proto\022\rlobby_servic"
  "e\032\013types.proto\"W\n\025RegisterServerRequest\022"
  "\026\n\016server_address\030\001 \001(\t\022&\n\013server_type\030\002"
  " \001(\0162\021.types.ServerType\"I\n\025RegisterServe"
  "rReponse\022\035\n\006result\030\001 \001(\0162\r.types.Result\022"
  "\021\n\tserver_id\030\002 \001(\0052l\n\014LobbyService\022\\\n\016Re"
  "gisterServer\022$.lobby_service.RegisterSer"
  "verRequest\032$.lobby_service.RegisterServe"
  "rReponseb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_lobby_5fservice_5fgrpc_2eproto_deps[1] = {
  &::descriptor_table_types_2eproto,
};
static ::_pbi::once_flag descriptor_table_lobby_5fservice_5fgrpc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_lobby_5fservice_5fgrpc_2eproto = {
    false, false, 336, descriptor_table_protodef_lobby_5fservice_5fgrpc_2eproto,
    "lobby_service_grpc.proto",
    &descriptor_table_lobby_5fservice_5fgrpc_2eproto_once, descriptor_table_lobby_5fservice_5fgrpc_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_lobby_5fservice_5fgrpc_2eproto::offsets,
    file_level_metadata_lobby_5fservice_5fgrpc_2eproto, file_level_enum_descriptors_lobby_5fservice_5fgrpc_2eproto,
    file_level_service_descriptors_lobby_5fservice_5fgrpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_lobby_5fservice_5fgrpc_2eproto_getter() {
  return &descriptor_table_lobby_5fservice_5fgrpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_lobby_5fservice_5fgrpc_2eproto(&descriptor_table_lobby_5fservice_5fgrpc_2eproto);
namespace lobby_service {

// ===================================================================

class RegisterServerRequest::_Internal {
 public:
};

RegisterServerRequest::RegisterServerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lobby_service.RegisterServerRequest)
}
RegisterServerRequest::RegisterServerRequest(const RegisterServerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.server_address_){}
    , decltype(_impl_.server_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_address().empty()) {
    _this->_impl_.server_address_.Set(from._internal_server_address(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.server_type_ = from._impl_.server_type_;
  // @@protoc_insertion_point(copy_constructor:lobby_service.RegisterServerRequest)
}

inline void RegisterServerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.server_address_){}
    , decltype(_impl_.server_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.server_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterServerRequest::~RegisterServerRequest() {
  // @@protoc_insertion_point(destructor:lobby_service.RegisterServerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.server_address_.Destroy();
}

void RegisterServerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby_service.RegisterServerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.server_address_.ClearToEmpty();
  _impl_.server_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string server_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_server_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "lobby_service.RegisterServerRequest.server_address"));
        } else
          goto handle_unusual;
        continue;
      // .types.ServerType server_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_server_type(static_cast<::types::ServerType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby_service.RegisterServerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string server_address = 1;
  if (!this->_internal_server_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_address().data(), static_cast<int>(this->_internal_server_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lobby_service.RegisterServerRequest.server_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_server_address(), target);
  }

  // .types.ServerType server_type = 2;
  if (this->_internal_server_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_server_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby_service.RegisterServerRequest)
  return target;
}

size_t RegisterServerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby_service.RegisterServerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string server_address = 1;
  if (!this->_internal_server_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_address());
  }

  // .types.ServerType server_type = 2;
  if (this->_internal_server_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_server_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerRequest::GetClassData() const { return &_class_data_; }


void RegisterServerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerRequest*>(&to_msg);
  auto& from = static_cast<const RegisterServerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby_service.RegisterServerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_server_address().empty()) {
    _this->_internal_set_server_address(from._internal_server_address());
  }
  if (from._internal_server_type() != 0) {
    _this->_internal_set_server_type(from._internal_server_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerRequest::CopyFrom(const RegisterServerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby_service.RegisterServerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerRequest::IsInitialized() const {
  return true;
}

void RegisterServerRequest::InternalSwap(RegisterServerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_address_, lhs_arena,
      &other->_impl_.server_address_, rhs_arena
  );
  swap(_impl_.server_type_, other->_impl_.server_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_5fservice_5fgrpc_2eproto_getter, &descriptor_table_lobby_5fservice_5fgrpc_2eproto_once,
      file_level_metadata_lobby_5fservice_5fgrpc_2eproto[0]);
}

// ===================================================================

class RegisterServerReponse::_Internal {
 public:
};

RegisterServerReponse::RegisterServerReponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:lobby_service.RegisterServerReponse)
}
RegisterServerReponse::RegisterServerReponse(const RegisterServerReponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerReponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.server_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.server_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  // @@protoc_insertion_point(copy_constructor:lobby_service.RegisterServerReponse)
}

inline void RegisterServerReponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.server_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterServerReponse::~RegisterServerReponse() {
  // @@protoc_insertion_point(destructor:lobby_service.RegisterServerReponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerReponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterServerReponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerReponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lobby_service.RegisterServerReponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.server_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.server_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerReponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .types.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::types::Result>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 server_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerReponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lobby_service.RegisterServerReponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lobby_service.RegisterServerReponse)
  return target;
}

size_t RegisterServerReponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lobby_service.RegisterServerReponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .types.Result result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 server_id = 2;
  if (this->_internal_server_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerReponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerReponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerReponse::GetClassData() const { return &_class_data_; }


void RegisterServerReponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerReponse*>(&to_msg);
  auto& from = static_cast<const RegisterServerReponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:lobby_service.RegisterServerReponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_server_id() != 0) {
    _this->_internal_set_server_id(from._internal_server_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerReponse::CopyFrom(const RegisterServerReponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lobby_service.RegisterServerReponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerReponse::IsInitialized() const {
  return true;
}

void RegisterServerReponse::InternalSwap(RegisterServerReponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterServerReponse, _impl_.server_id_)
      + sizeof(RegisterServerReponse::_impl_.server_id_)
      - PROTOBUF_FIELD_OFFSET(RegisterServerReponse, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerReponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_lobby_5fservice_5fgrpc_2eproto_getter, &descriptor_table_lobby_5fservice_5fgrpc_2eproto_once,
      file_level_metadata_lobby_5fservice_5fgrpc_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace lobby_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lobby_service::RegisterServerRequest*
Arena::CreateMaybeMessage< ::lobby_service::RegisterServerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby_service::RegisterServerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lobby_service::RegisterServerReponse*
Arena::CreateMaybeMessage< ::lobby_service::RegisterServerReponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lobby_service::RegisterServerReponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
