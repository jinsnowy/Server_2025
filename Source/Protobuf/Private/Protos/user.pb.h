// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_user_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_user_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "types.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_user_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_user_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_user_2eproto;
namespace user {
class CharacterInfo;
struct CharacterInfoDefaultTypeInternal;
extern CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
class CreateCharacterReq;
struct CreateCharacterReqDefaultTypeInternal;
extern CreateCharacterReqDefaultTypeInternal _CreateCharacterReq_default_instance_;
class CreateCharacterRes;
struct CreateCharacterResDefaultTypeInternal;
extern CreateCharacterResDefaultTypeInternal _CreateCharacterRes_default_instance_;
class DisconnectAlertNotify;
struct DisconnectAlertNotifyDefaultTypeInternal;
extern DisconnectAlertNotifyDefaultTypeInternal _DisconnectAlertNotify_default_instance_;
class GetCharacterListReq;
struct GetCharacterListReqDefaultTypeInternal;
extern GetCharacterListReqDefaultTypeInternal _GetCharacterListReq_default_instance_;
class GetCharacterListRes;
struct GetCharacterListResDefaultTypeInternal;
extern GetCharacterListResDefaultTypeInternal _GetCharacterListRes_default_instance_;
class HelloClient;
struct HelloClientDefaultTypeInternal;
extern HelloClientDefaultTypeInternal _HelloClient_default_instance_;
class HelloClientAck;
struct HelloClientAckDefaultTypeInternal;
extern HelloClientAckDefaultTypeInternal _HelloClientAck_default_instance_;
class HelloServer;
struct HelloServerDefaultTypeInternal;
extern HelloServerDefaultTypeInternal _HelloServer_default_instance_;
class PlayStartCharacterReq;
struct PlayStartCharacterReqDefaultTypeInternal;
extern PlayStartCharacterReqDefaultTypeInternal _PlayStartCharacterReq_default_instance_;
class PlayStartCharacterRes;
struct PlayStartCharacterResDefaultTypeInternal;
extern PlayStartCharacterResDefaultTypeInternal _PlayStartCharacterRes_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class WorldServerInfoReq;
struct WorldServerInfoReqDefaultTypeInternal;
extern WorldServerInfoReqDefaultTypeInternal _WorldServerInfoReq_default_instance_;
class WorldServerInfoRes;
struct WorldServerInfoResDefaultTypeInternal;
extern WorldServerInfoResDefaultTypeInternal _WorldServerInfoRes_default_instance_;
}  // namespace user
PROTOBUF_NAMESPACE_OPEN
template<> ::user::CharacterInfo* Arena::CreateMaybeMessage<::user::CharacterInfo>(Arena*);
template<> ::user::CreateCharacterReq* Arena::CreateMaybeMessage<::user::CreateCharacterReq>(Arena*);
template<> ::user::CreateCharacterRes* Arena::CreateMaybeMessage<::user::CreateCharacterRes>(Arena*);
template<> ::user::DisconnectAlertNotify* Arena::CreateMaybeMessage<::user::DisconnectAlertNotify>(Arena*);
template<> ::user::GetCharacterListReq* Arena::CreateMaybeMessage<::user::GetCharacterListReq>(Arena*);
template<> ::user::GetCharacterListRes* Arena::CreateMaybeMessage<::user::GetCharacterListRes>(Arena*);
template<> ::user::HelloClient* Arena::CreateMaybeMessage<::user::HelloClient>(Arena*);
template<> ::user::HelloClientAck* Arena::CreateMaybeMessage<::user::HelloClientAck>(Arena*);
template<> ::user::HelloServer* Arena::CreateMaybeMessage<::user::HelloServer>(Arena*);
template<> ::user::PlayStartCharacterReq* Arena::CreateMaybeMessage<::user::PlayStartCharacterReq>(Arena*);
template<> ::user::PlayStartCharacterRes* Arena::CreateMaybeMessage<::user::PlayStartCharacterRes>(Arena*);
template<> ::user::ServerInfo* Arena::CreateMaybeMessage<::user::ServerInfo>(Arena*);
template<> ::user::WorldServerInfoReq* Arena::CreateMaybeMessage<::user::WorldServerInfoReq>(Arena*);
template<> ::user::WorldServerInfoRes* Arena::CreateMaybeMessage<::user::WorldServerInfoRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace user {

// ===================================================================

class HelloServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.HelloServer) */ {
 public:
  inline HelloServer() : HelloServer(nullptr) {}
  ~HelloServer() override;
  explicit PROTOBUF_CONSTEXPR HelloServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloServer(const HelloServer& from);
  HelloServer(HelloServer&& from) noexcept
    : HelloServer() {
    *this = ::std::move(from);
  }

  inline HelloServer& operator=(const HelloServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloServer& operator=(HelloServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloServer* internal_default_instance() {
    return reinterpret_cast<const HelloServer*>(
               &_HelloServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HelloServer& a, HelloServer& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloServer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloServer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloServer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloServer& from) {
    HelloServer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloServer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.HelloServer";
  }
  protected:
  explicit HelloServer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessTokenFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string access_token = 1;
  void clear_access_token();
  const std::string& access_token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_access_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_access_token();
  PROTOBUF_NODISCARD std::string* release_access_token();
  void set_allocated_access_token(std::string* access_token);
  private:
  const std::string& _internal_access_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_access_token(const std::string& value);
  std::string* _internal_mutable_access_token();
  public:

  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:user.HelloServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr access_token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class HelloClient final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:user.HelloClient) */ {
 public:
  inline HelloClient() : HelloClient(nullptr) {}
  explicit PROTOBUF_CONSTEXPR HelloClient(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloClient(const HelloClient& from);
  HelloClient(HelloClient&& from) noexcept
    : HelloClient() {
    *this = ::std::move(from);
  }

  inline HelloClient& operator=(const HelloClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloClient& operator=(HelloClient&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloClient& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloClient* internal_default_instance() {
    return reinterpret_cast<const HelloClient*>(
               &_HelloClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HelloClient& a, HelloClient& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloClient* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloClient>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const HelloClient& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const HelloClient& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.HelloClient";
  }
  protected:
  explicit HelloClient(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:user.HelloClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class DisconnectAlertNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.DisconnectAlertNotify) */ {
 public:
  inline DisconnectAlertNotify() : DisconnectAlertNotify(nullptr) {}
  ~DisconnectAlertNotify() override;
  explicit PROTOBUF_CONSTEXPR DisconnectAlertNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectAlertNotify(const DisconnectAlertNotify& from);
  DisconnectAlertNotify(DisconnectAlertNotify&& from) noexcept
    : DisconnectAlertNotify() {
    *this = ::std::move(from);
  }

  inline DisconnectAlertNotify& operator=(const DisconnectAlertNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectAlertNotify& operator=(DisconnectAlertNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisconnectAlertNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectAlertNotify* internal_default_instance() {
    return reinterpret_cast<const DisconnectAlertNotify*>(
               &_DisconnectAlertNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DisconnectAlertNotify& a, DisconnectAlertNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectAlertNotify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectAlertNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectAlertNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectAlertNotify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisconnectAlertNotify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DisconnectAlertNotify& from) {
    DisconnectAlertNotify::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectAlertNotify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.DisconnectAlertNotify";
  }
  protected:
  explicit DisconnectAlertNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // string reason = 1;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:user.DisconnectAlertNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class HelloClientAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.HelloClientAck) */ {
 public:
  inline HelloClientAck() : HelloClientAck(nullptr) {}
  ~HelloClientAck() override;
  explicit PROTOBUF_CONSTEXPR HelloClientAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloClientAck(const HelloClientAck& from);
  HelloClientAck(HelloClientAck&& from) noexcept
    : HelloClientAck() {
    *this = ::std::move(from);
  }

  inline HelloClientAck& operator=(const HelloClientAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloClientAck& operator=(HelloClientAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HelloClientAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloClientAck* internal_default_instance() {
    return reinterpret_cast<const HelloClientAck*>(
               &_HelloClientAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HelloClientAck& a, HelloClientAck& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloClientAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloClientAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HelloClientAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HelloClientAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HelloClientAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HelloClientAck& from) {
    HelloClientAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloClientAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.HelloClientAck";
  }
  protected:
  explicit HelloClientAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kLastLoginTimeFieldNumber = 4,
    kLastLogoutTimeFieldNumber = 5,
    kCreatedAtFieldNumber = 6,
    kAccountIdFieldNumber = 1,
  };
  // string user_id = 2;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string username = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .google.protobuf.Timestamp last_login_time = 4;
  bool has_last_login_time() const;
  private:
  bool _internal_has_last_login_time() const;
  public:
  void clear_last_login_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_login_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_login_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_login_time();
  void set_allocated_last_login_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_login_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_login_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_login_time();
  public:
  void unsafe_arena_set_allocated_last_login_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_login_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_login_time();

  // .google.protobuf.Timestamp last_logout_time = 5;
  bool has_last_logout_time() const;
  private:
  bool _internal_has_last_logout_time() const;
  public:
  void clear_last_logout_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_logout_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_logout_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_logout_time();
  void set_allocated_last_logout_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_logout_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_logout_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_logout_time();
  public:
  void unsafe_arena_set_allocated_last_logout_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_logout_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_logout_time();

  // .google.protobuf.Timestamp created_at = 6;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int64 account_id = 1;
  void clear_account_id();
  int64_t account_id() const;
  void set_account_id(int64_t value);
  private:
  int64_t _internal_account_id() const;
  void _internal_set_account_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:user.HelloClientAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_login_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_logout_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    int64_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class WorldServerInfoReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:user.WorldServerInfoReq) */ {
 public:
  inline WorldServerInfoReq() : WorldServerInfoReq(nullptr) {}
  explicit PROTOBUF_CONSTEXPR WorldServerInfoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldServerInfoReq(const WorldServerInfoReq& from);
  WorldServerInfoReq(WorldServerInfoReq&& from) noexcept
    : WorldServerInfoReq() {
    *this = ::std::move(from);
  }

  inline WorldServerInfoReq& operator=(const WorldServerInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldServerInfoReq& operator=(WorldServerInfoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldServerInfoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldServerInfoReq* internal_default_instance() {
    return reinterpret_cast<const WorldServerInfoReq*>(
               &_WorldServerInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WorldServerInfoReq& a, WorldServerInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldServerInfoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldServerInfoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldServerInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldServerInfoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WorldServerInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WorldServerInfoReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.WorldServerInfoReq";
  }
  protected:
  explicit WorldServerInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:user.WorldServerInfoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerAddressFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kCurrentPlayerNumFieldNumber = 4,
  };
  // string server_address = 2;
  void clear_server_address();
  const std::string& server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_address();
  PROTOBUF_NODISCARD std::string* release_server_address();
  void set_allocated_server_address(std::string* server_address);
  private:
  const std::string& _internal_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_address(const std::string& value);
  std::string* _internal_mutable_server_address();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int32 current_player_num = 4;
  void clear_current_player_num();
  int32_t current_player_num() const;
  void set_current_player_num(int32_t value);
  private:
  int32_t _internal_current_player_num() const;
  void _internal_set_current_player_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:user.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_address_;
    int32_t server_id_;
    int32_t current_player_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CharacterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.CharacterInfo) */ {
 public:
  inline CharacterInfo() : CharacterInfo(nullptr) {}
  ~CharacterInfo() override;
  explicit PROTOBUF_CONSTEXPR CharacterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CharacterInfo(const CharacterInfo& from);
  CharacterInfo(CharacterInfo&& from) noexcept
    : CharacterInfo() {
    *this = ::std::move(from);
  }

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInfo& operator=(CharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterInfo*>(
               &_CharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CharacterInfo& a, CharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CharacterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CharacterInfo& from) {
    CharacterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.CharacterInfo";
  }
  protected:
  explicit CharacterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterNameFieldNumber = 2,
    kLastPlayedFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kCharacterIdFieldNumber = 1,
    kAccountIdFieldNumber = 3,
    kServerIdFieldNumber = 4,
    kLevelFieldNumber = 5,
    kExpFieldNumber = 6,
  };
  // string character_name = 2;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // .google.protobuf.Timestamp last_played = 7;
  bool has_last_played() const;
  private:
  bool _internal_has_last_played() const;
  public:
  void clear_last_played();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_played() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_played();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_played();
  void set_allocated_last_played(::PROTOBUF_NAMESPACE_ID::Timestamp* last_played);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_played() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_played();
  public:
  void unsafe_arena_set_allocated_last_played(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_played);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_played();

  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int64 character_id = 1;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // int64 account_id = 3;
  void clear_account_id();
  int64_t account_id() const;
  void set_account_id(int64_t value);
  private:
  int64_t _internal_account_id() const;
  void _internal_set_account_id(int64_t value);
  public:

  // int32 server_id = 4;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int32 level = 5;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int64 exp = 6;
  void clear_exp();
  int64_t exp() const;
  void set_exp(int64_t value);
  private:
  int64_t _internal_exp() const;
  void _internal_set_exp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:user.CharacterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_played_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    int64_t character_id_;
    int64_t account_id_;
    int32_t server_id_;
    int32_t level_;
    int64_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class WorldServerInfoRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.WorldServerInfoRes) */ {
 public:
  inline WorldServerInfoRes() : WorldServerInfoRes(nullptr) {}
  ~WorldServerInfoRes() override;
  explicit PROTOBUF_CONSTEXPR WorldServerInfoRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldServerInfoRes(const WorldServerInfoRes& from);
  WorldServerInfoRes(WorldServerInfoRes&& from) noexcept
    : WorldServerInfoRes() {
    *this = ::std::move(from);
  }

  inline WorldServerInfoRes& operator=(const WorldServerInfoRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldServerInfoRes& operator=(WorldServerInfoRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldServerInfoRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldServerInfoRes* internal_default_instance() {
    return reinterpret_cast<const WorldServerInfoRes*>(
               &_WorldServerInfoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WorldServerInfoRes& a, WorldServerInfoRes& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldServerInfoRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldServerInfoRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldServerInfoRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldServerInfoRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldServerInfoRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WorldServerInfoRes& from) {
    WorldServerInfoRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldServerInfoRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.WorldServerInfoRes";
  }
  protected:
  explicit WorldServerInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfosFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .user.ServerInfo server_infos = 2;
  int server_infos_size() const;
  private:
  int _internal_server_infos_size() const;
  public:
  void clear_server_infos();
  ::user::ServerInfo* mutable_server_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ServerInfo >*
      mutable_server_infos();
  private:
  const ::user::ServerInfo& _internal_server_infos(int index) const;
  ::user::ServerInfo* _internal_add_server_infos();
  public:
  const ::user::ServerInfo& server_infos(int index) const;
  ::user::ServerInfo* add_server_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ServerInfo >&
      server_infos() const;

  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // @@protoc_insertion_point(class_scope:user.WorldServerInfoRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ServerInfo > server_infos_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.CreateCharacterReq) */ {
 public:
  inline CreateCharacterReq() : CreateCharacterReq(nullptr) {}
  ~CreateCharacterReq() override;
  explicit PROTOBUF_CONSTEXPR CreateCharacterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterReq(const CreateCharacterReq& from);
  CreateCharacterReq(CreateCharacterReq&& from) noexcept
    : CreateCharacterReq() {
    *this = ::std::move(from);
  }

  inline CreateCharacterReq& operator=(const CreateCharacterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterReq& operator=(CreateCharacterReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterReq* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterReq*>(
               &_CreateCharacterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateCharacterReq& a, CreateCharacterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCharacterReq& from) {
    CreateCharacterReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.CreateCharacterReq";
  }
  protected:
  explicit CreateCharacterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterNameFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // string character_name = 2;
  void clear_character_name();
  const std::string& character_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_name();
  PROTOBUF_NODISCARD std::string* release_character_name();
  void set_allocated_character_name(std::string* character_name);
  private:
  const std::string& _internal_character_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_name(const std::string& value);
  std::string* _internal_mutable_character_name();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:user.CreateCharacterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_name_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class CreateCharacterRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.CreateCharacterRes) */ {
 public:
  inline CreateCharacterRes() : CreateCharacterRes(nullptr) {}
  ~CreateCharacterRes() override;
  explicit PROTOBUF_CONSTEXPR CreateCharacterRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCharacterRes(const CreateCharacterRes& from);
  CreateCharacterRes(CreateCharacterRes&& from) noexcept
    : CreateCharacterRes() {
    *this = ::std::move(from);
  }

  inline CreateCharacterRes& operator=(const CreateCharacterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCharacterRes& operator=(CreateCharacterRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCharacterRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCharacterRes* internal_default_instance() {
    return reinterpret_cast<const CreateCharacterRes*>(
               &_CreateCharacterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateCharacterRes& a, CreateCharacterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCharacterRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCharacterRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCharacterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCharacterRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCharacterRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateCharacterRes& from) {
    CreateCharacterRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCharacterRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.CreateCharacterRes";
  }
  protected:
  explicit CreateCharacterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterInfoFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // .user.CharacterInfo character_info = 2;
  bool has_character_info() const;
  private:
  bool _internal_has_character_info() const;
  public:
  void clear_character_info();
  const ::user::CharacterInfo& character_info() const;
  PROTOBUF_NODISCARD ::user::CharacterInfo* release_character_info();
  ::user::CharacterInfo* mutable_character_info();
  void set_allocated_character_info(::user::CharacterInfo* character_info);
  private:
  const ::user::CharacterInfo& _internal_character_info() const;
  ::user::CharacterInfo* _internal_mutable_character_info();
  public:
  void unsafe_arena_set_allocated_character_info(
      ::user::CharacterInfo* character_info);
  ::user::CharacterInfo* unsafe_arena_release_character_info();

  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // @@protoc_insertion_point(class_scope:user.CreateCharacterRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::user::CharacterInfo* character_info_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetCharacterListReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetCharacterListReq) */ {
 public:
  inline GetCharacterListReq() : GetCharacterListReq(nullptr) {}
  ~GetCharacterListReq() override;
  explicit PROTOBUF_CONSTEXPR GetCharacterListReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCharacterListReq(const GetCharacterListReq& from);
  GetCharacterListReq(GetCharacterListReq&& from) noexcept
    : GetCharacterListReq() {
    *this = ::std::move(from);
  }

  inline GetCharacterListReq& operator=(const GetCharacterListReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterListReq& operator=(GetCharacterListReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCharacterListReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCharacterListReq* internal_default_instance() {
    return reinterpret_cast<const GetCharacterListReq*>(
               &_GetCharacterListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetCharacterListReq& a, GetCharacterListReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterListReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterListReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCharacterListReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCharacterListReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCharacterListReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCharacterListReq& from) {
    GetCharacterListReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterListReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetCharacterListReq";
  }
  protected:
  explicit GetCharacterListReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIdFieldNumber = 2,
  };
  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetCharacterListReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class GetCharacterListRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.GetCharacterListRes) */ {
 public:
  inline GetCharacterListRes() : GetCharacterListRes(nullptr) {}
  ~GetCharacterListRes() override;
  explicit PROTOBUF_CONSTEXPR GetCharacterListRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCharacterListRes(const GetCharacterListRes& from);
  GetCharacterListRes(GetCharacterListRes&& from) noexcept
    : GetCharacterListRes() {
    *this = ::std::move(from);
  }

  inline GetCharacterListRes& operator=(const GetCharacterListRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCharacterListRes& operator=(GetCharacterListRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCharacterListRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCharacterListRes* internal_default_instance() {
    return reinterpret_cast<const GetCharacterListRes*>(
               &_GetCharacterListRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetCharacterListRes& a, GetCharacterListRes& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCharacterListRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCharacterListRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCharacterListRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCharacterListRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCharacterListRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetCharacterListRes& from) {
    GetCharacterListRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCharacterListRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.GetCharacterListRes";
  }
  protected:
  explicit GetCharacterListRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterInfosFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // repeated .user.CharacterInfo character_infos = 2;
  int character_infos_size() const;
  private:
  int _internal_character_infos_size() const;
  public:
  void clear_character_infos();
  ::user::CharacterInfo* mutable_character_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::CharacterInfo >*
      mutable_character_infos();
  private:
  const ::user::CharacterInfo& _internal_character_infos(int index) const;
  ::user::CharacterInfo* _internal_add_character_infos();
  public:
  const ::user::CharacterInfo& character_infos(int index) const;
  ::user::CharacterInfo* add_character_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::CharacterInfo >&
      character_infos() const;

  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // @@protoc_insertion_point(class_scope:user.GetCharacterListRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::CharacterInfo > character_infos_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PlayStartCharacterReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.PlayStartCharacterReq) */ {
 public:
  inline PlayStartCharacterReq() : PlayStartCharacterReq(nullptr) {}
  ~PlayStartCharacterReq() override;
  explicit PROTOBUF_CONSTEXPR PlayStartCharacterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayStartCharacterReq(const PlayStartCharacterReq& from);
  PlayStartCharacterReq(PlayStartCharacterReq&& from) noexcept
    : PlayStartCharacterReq() {
    *this = ::std::move(from);
  }

  inline PlayStartCharacterReq& operator=(const PlayStartCharacterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayStartCharacterReq& operator=(PlayStartCharacterReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayStartCharacterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayStartCharacterReq* internal_default_instance() {
    return reinterpret_cast<const PlayStartCharacterReq*>(
               &_PlayStartCharacterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PlayStartCharacterReq& a, PlayStartCharacterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayStartCharacterReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayStartCharacterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayStartCharacterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayStartCharacterReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayStartCharacterReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayStartCharacterReq& from) {
    PlayStartCharacterReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayStartCharacterReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.PlayStartCharacterReq";
  }
  protected:
  explicit PlayStartCharacterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // int64 character_id = 2;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // int32 server_id = 1;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:user.PlayStartCharacterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t character_id_;
    int32_t server_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// -------------------------------------------------------------------

class PlayStartCharacterRes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:user.PlayStartCharacterRes) */ {
 public:
  inline PlayStartCharacterRes() : PlayStartCharacterRes(nullptr) {}
  ~PlayStartCharacterRes() override;
  explicit PROTOBUF_CONSTEXPR PlayStartCharacterRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayStartCharacterRes(const PlayStartCharacterRes& from);
  PlayStartCharacterRes(PlayStartCharacterRes&& from) noexcept
    : PlayStartCharacterRes() {
    *this = ::std::move(from);
  }

  inline PlayStartCharacterRes& operator=(const PlayStartCharacterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayStartCharacterRes& operator=(PlayStartCharacterRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayStartCharacterRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayStartCharacterRes* internal_default_instance() {
    return reinterpret_cast<const PlayStartCharacterRes*>(
               &_PlayStartCharacterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PlayStartCharacterRes& a, PlayStartCharacterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayStartCharacterRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayStartCharacterRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayStartCharacterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayStartCharacterRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayStartCharacterRes& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayStartCharacterRes& from) {
    PlayStartCharacterRes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayStartCharacterRes* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "user.PlayStartCharacterRes";
  }
  protected:
  explicit PlayStartCharacterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldServerAddressFieldNumber = 4,
    kResultFieldNumber = 1,
    kServerIdFieldNumber = 2,
    kCharacterIdFieldNumber = 3,
  };
  // string world_server_address = 4;
  void clear_world_server_address();
  const std::string& world_server_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_world_server_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_world_server_address();
  PROTOBUF_NODISCARD std::string* release_world_server_address();
  void set_allocated_world_server_address(std::string* world_server_address);
  private:
  const std::string& _internal_world_server_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_server_address(const std::string& value);
  std::string* _internal_mutable_world_server_address();
  public:

  // .types.Result result = 1;
  void clear_result();
  ::types::Result result() const;
  void set_result(::types::Result value);
  private:
  ::types::Result _internal_result() const;
  void _internal_set_result(::types::Result value);
  public:

  // int32 server_id = 2;
  void clear_server_id();
  int32_t server_id() const;
  void set_server_id(int32_t value);
  private:
  int32_t _internal_server_id() const;
  void _internal_set_server_id(int32_t value);
  public:

  // int64 character_id = 3;
  void clear_character_id();
  int64_t character_id() const;
  void set_character_id(int64_t value);
  private:
  int64_t _internal_character_id() const;
  void _internal_set_character_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:user.PlayStartCharacterRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_server_address_;
    int result_;
    int32_t server_id_;
    int64_t character_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_user_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloServer

// string access_token = 1;
inline void HelloServer::clear_access_token() {
  _impl_.access_token_.ClearToEmpty();
}
inline const std::string& HelloServer::access_token() const {
  // @@protoc_insertion_point(field_get:user.HelloServer.access_token)
  return _internal_access_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloServer::set_access_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.access_token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.HelloServer.access_token)
}
inline std::string* HelloServer::mutable_access_token() {
  std::string* _s = _internal_mutable_access_token();
  // @@protoc_insertion_point(field_mutable:user.HelloServer.access_token)
  return _s;
}
inline const std::string& HelloServer::_internal_access_token() const {
  return _impl_.access_token_.Get();
}
inline void HelloServer::_internal_set_access_token(const std::string& value) {
  
  _impl_.access_token_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloServer::_internal_mutable_access_token() {
  
  return _impl_.access_token_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloServer::release_access_token() {
  // @@protoc_insertion_point(field_release:user.HelloServer.access_token)
  return _impl_.access_token_.Release();
}
inline void HelloServer::set_allocated_access_token(std::string* access_token) {
  if (access_token != nullptr) {
    
  } else {
    
  }
  _impl_.access_token_.SetAllocated(access_token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.access_token_.IsDefault()) {
    _impl_.access_token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.HelloServer.access_token)
}

// string user_id = 2;
inline void HelloServer::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& HelloServer::user_id() const {
  // @@protoc_insertion_point(field_get:user.HelloServer.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloServer::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.HelloServer.user_id)
}
inline std::string* HelloServer::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:user.HelloServer.user_id)
  return _s;
}
inline const std::string& HelloServer::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void HelloServer::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloServer::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloServer::release_user_id() {
  // @@protoc_insertion_point(field_release:user.HelloServer.user_id)
  return _impl_.user_id_.Release();
}
inline void HelloServer::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.HelloServer.user_id)
}

// -------------------------------------------------------------------

// HelloClient

// -------------------------------------------------------------------

// DisconnectAlertNotify

// string reason = 1;
inline void DisconnectAlertNotify::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& DisconnectAlertNotify::reason() const {
  // @@protoc_insertion_point(field_get:user.DisconnectAlertNotify.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisconnectAlertNotify::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.DisconnectAlertNotify.reason)
}
inline std::string* DisconnectAlertNotify::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:user.DisconnectAlertNotify.reason)
  return _s;
}
inline const std::string& DisconnectAlertNotify::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void DisconnectAlertNotify::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* DisconnectAlertNotify::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* DisconnectAlertNotify::release_reason() {
  // @@protoc_insertion_point(field_release:user.DisconnectAlertNotify.reason)
  return _impl_.reason_.Release();
}
inline void DisconnectAlertNotify::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.DisconnectAlertNotify.reason)
}

// -------------------------------------------------------------------

// HelloClientAck

// int64 account_id = 1;
inline void HelloClientAck::clear_account_id() {
  _impl_.account_id_ = int64_t{0};
}
inline int64_t HelloClientAck::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int64_t HelloClientAck::account_id() const {
  // @@protoc_insertion_point(field_get:user.HelloClientAck.account_id)
  return _internal_account_id();
}
inline void HelloClientAck::_internal_set_account_id(int64_t value) {
  
  _impl_.account_id_ = value;
}
inline void HelloClientAck::set_account_id(int64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:user.HelloClientAck.account_id)
}

// string user_id = 2;
inline void HelloClientAck::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& HelloClientAck::user_id() const {
  // @@protoc_insertion_point(field_get:user.HelloClientAck.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloClientAck::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.HelloClientAck.user_id)
}
inline std::string* HelloClientAck::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:user.HelloClientAck.user_id)
  return _s;
}
inline const std::string& HelloClientAck::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void HelloClientAck::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloClientAck::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloClientAck::release_user_id() {
  // @@protoc_insertion_point(field_release:user.HelloClientAck.user_id)
  return _impl_.user_id_.Release();
}
inline void HelloClientAck::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.HelloClientAck.user_id)
}

// string username = 3;
inline void HelloClientAck::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& HelloClientAck::username() const {
  // @@protoc_insertion_point(field_get:user.HelloClientAck.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HelloClientAck::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.HelloClientAck.username)
}
inline std::string* HelloClientAck::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:user.HelloClientAck.username)
  return _s;
}
inline const std::string& HelloClientAck::_internal_username() const {
  return _impl_.username_.Get();
}
inline void HelloClientAck::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* HelloClientAck::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* HelloClientAck::release_username() {
  // @@protoc_insertion_point(field_release:user.HelloClientAck.username)
  return _impl_.username_.Release();
}
inline void HelloClientAck::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.HelloClientAck.username)
}

// .google.protobuf.Timestamp last_login_time = 4;
inline bool HelloClientAck::_internal_has_last_login_time() const {
  return this != internal_default_instance() && _impl_.last_login_time_ != nullptr;
}
inline bool HelloClientAck::has_last_login_time() const {
  return _internal_has_last_login_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HelloClientAck::_internal_last_login_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_login_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HelloClientAck::last_login_time() const {
  // @@protoc_insertion_point(field_get:user.HelloClientAck.last_login_time)
  return _internal_last_login_time();
}
inline void HelloClientAck::unsafe_arena_set_allocated_last_login_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_login_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_login_time_);
  }
  _impl_.last_login_time_ = last_login_time;
  if (last_login_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.HelloClientAck.last_login_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::release_last_login_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_login_time_;
  _impl_.last_login_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::unsafe_arena_release_last_login_time() {
  // @@protoc_insertion_point(field_release:user.HelloClientAck.last_login_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_login_time_;
  _impl_.last_login_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::_internal_mutable_last_login_time() {
  
  if (_impl_.last_login_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_login_time_ = p;
  }
  return _impl_.last_login_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::mutable_last_login_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_login_time();
  // @@protoc_insertion_point(field_mutable:user.HelloClientAck.last_login_time)
  return _msg;
}
inline void HelloClientAck::set_allocated_last_login_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_login_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_login_time_);
  }
  if (last_login_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_login_time));
    if (message_arena != submessage_arena) {
      last_login_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_login_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_login_time_ = last_login_time;
  // @@protoc_insertion_point(field_set_allocated:user.HelloClientAck.last_login_time)
}

// .google.protobuf.Timestamp last_logout_time = 5;
inline bool HelloClientAck::_internal_has_last_logout_time() const {
  return this != internal_default_instance() && _impl_.last_logout_time_ != nullptr;
}
inline bool HelloClientAck::has_last_logout_time() const {
  return _internal_has_last_logout_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HelloClientAck::_internal_last_logout_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_logout_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HelloClientAck::last_logout_time() const {
  // @@protoc_insertion_point(field_get:user.HelloClientAck.last_logout_time)
  return _internal_last_logout_time();
}
inline void HelloClientAck::unsafe_arena_set_allocated_last_logout_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_logout_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_logout_time_);
  }
  _impl_.last_logout_time_ = last_logout_time;
  if (last_logout_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.HelloClientAck.last_logout_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::release_last_logout_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_logout_time_;
  _impl_.last_logout_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::unsafe_arena_release_last_logout_time() {
  // @@protoc_insertion_point(field_release:user.HelloClientAck.last_logout_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_logout_time_;
  _impl_.last_logout_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::_internal_mutable_last_logout_time() {
  
  if (_impl_.last_logout_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_logout_time_ = p;
  }
  return _impl_.last_logout_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::mutable_last_logout_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_logout_time();
  // @@protoc_insertion_point(field_mutable:user.HelloClientAck.last_logout_time)
  return _msg;
}
inline void HelloClientAck::set_allocated_last_logout_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_logout_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_logout_time_);
  }
  if (last_logout_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_logout_time));
    if (message_arena != submessage_arena) {
      last_logout_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_logout_time, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_logout_time_ = last_logout_time;
  // @@protoc_insertion_point(field_set_allocated:user.HelloClientAck.last_logout_time)
}

// .google.protobuf.Timestamp created_at = 6;
inline bool HelloClientAck::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool HelloClientAck::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HelloClientAck::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& HelloClientAck::created_at() const {
  // @@protoc_insertion_point(field_get:user.HelloClientAck.created_at)
  return _internal_created_at();
}
inline void HelloClientAck::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.HelloClientAck.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:user.HelloClientAck.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* HelloClientAck::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:user.HelloClientAck.created_at)
  return _msg;
}
inline void HelloClientAck::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:user.HelloClientAck.created_at)
}

// -------------------------------------------------------------------

// WorldServerInfoReq

// -------------------------------------------------------------------

// ServerInfo

// int32 server_id = 1;
inline void ServerInfo::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t ServerInfo::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:user.ServerInfo.server_id)
  return _internal_server_id();
}
inline void ServerInfo::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void ServerInfo::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:user.ServerInfo.server_id)
}

// string server_address = 2;
inline void ServerInfo::clear_server_address() {
  _impl_.server_address_.ClearToEmpty();
}
inline const std::string& ServerInfo::server_address() const {
  // @@protoc_insertion_point(field_get:user.ServerInfo.server_address)
  return _internal_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_server_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.ServerInfo.server_address)
}
inline std::string* ServerInfo::mutable_server_address() {
  std::string* _s = _internal_mutable_server_address();
  // @@protoc_insertion_point(field_mutable:user.ServerInfo.server_address)
  return _s;
}
inline const std::string& ServerInfo::_internal_server_address() const {
  return _impl_.server_address_.Get();
}
inline void ServerInfo::_internal_set_server_address(const std::string& value) {
  
  _impl_.server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_server_address() {
  
  return _impl_.server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_server_address() {
  // @@protoc_insertion_point(field_release:user.ServerInfo.server_address)
  return _impl_.server_address_.Release();
}
inline void ServerInfo::set_allocated_server_address(std::string* server_address) {
  if (server_address != nullptr) {
    
  } else {
    
  }
  _impl_.server_address_.SetAllocated(server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_address_.IsDefault()) {
    _impl_.server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.ServerInfo.server_address)
}

// int32 current_player_num = 4;
inline void ServerInfo::clear_current_player_num() {
  _impl_.current_player_num_ = 0;
}
inline int32_t ServerInfo::_internal_current_player_num() const {
  return _impl_.current_player_num_;
}
inline int32_t ServerInfo::current_player_num() const {
  // @@protoc_insertion_point(field_get:user.ServerInfo.current_player_num)
  return _internal_current_player_num();
}
inline void ServerInfo::_internal_set_current_player_num(int32_t value) {
  
  _impl_.current_player_num_ = value;
}
inline void ServerInfo::set_current_player_num(int32_t value) {
  _internal_set_current_player_num(value);
  // @@protoc_insertion_point(field_set:user.ServerInfo.current_player_num)
}

// -------------------------------------------------------------------

// CharacterInfo

// int64 character_id = 1;
inline void CharacterInfo::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t CharacterInfo::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t CharacterInfo::character_id() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.character_id)
  return _internal_character_id();
}
inline void CharacterInfo::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void CharacterInfo::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:user.CharacterInfo.character_id)
}

// string character_name = 2;
inline void CharacterInfo::clear_character_name() {
  _impl_.character_name_.ClearToEmpty();
}
inline const std::string& CharacterInfo::character_name() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CharacterInfo::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.character_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.CharacterInfo.character_name)
}
inline std::string* CharacterInfo::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:user.CharacterInfo.character_name)
  return _s;
}
inline const std::string& CharacterInfo::_internal_character_name() const {
  return _impl_.character_name_.Get();
}
inline void CharacterInfo::_internal_set_character_name(const std::string& value) {
  
  _impl_.character_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CharacterInfo::_internal_mutable_character_name() {
  
  return _impl_.character_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CharacterInfo::release_character_name() {
  // @@protoc_insertion_point(field_release:user.CharacterInfo.character_name)
  return _impl_.character_name_.Release();
}
inline void CharacterInfo::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  _impl_.character_name_.SetAllocated(character_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.character_name_.IsDefault()) {
    _impl_.character_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.CharacterInfo.character_name)
}

// int64 account_id = 3;
inline void CharacterInfo::clear_account_id() {
  _impl_.account_id_ = int64_t{0};
}
inline int64_t CharacterInfo::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int64_t CharacterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.account_id)
  return _internal_account_id();
}
inline void CharacterInfo::_internal_set_account_id(int64_t value) {
  
  _impl_.account_id_ = value;
}
inline void CharacterInfo::set_account_id(int64_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:user.CharacterInfo.account_id)
}

// int32 server_id = 4;
inline void CharacterInfo::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t CharacterInfo::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t CharacterInfo::server_id() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.server_id)
  return _internal_server_id();
}
inline void CharacterInfo::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void CharacterInfo::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:user.CharacterInfo.server_id)
}

// int32 level = 5;
inline void CharacterInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t CharacterInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t CharacterInfo::level() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.level)
  return _internal_level();
}
inline void CharacterInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void CharacterInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:user.CharacterInfo.level)
}

// int64 exp = 6;
inline void CharacterInfo::clear_exp() {
  _impl_.exp_ = int64_t{0};
}
inline int64_t CharacterInfo::_internal_exp() const {
  return _impl_.exp_;
}
inline int64_t CharacterInfo::exp() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.exp)
  return _internal_exp();
}
inline void CharacterInfo::_internal_set_exp(int64_t value) {
  
  _impl_.exp_ = value;
}
inline void CharacterInfo::set_exp(int64_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:user.CharacterInfo.exp)
}

// .google.protobuf.Timestamp last_played = 7;
inline bool CharacterInfo::_internal_has_last_played() const {
  return this != internal_default_instance() && _impl_.last_played_ != nullptr;
}
inline bool CharacterInfo::has_last_played() const {
  return _internal_has_last_played();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::_internal_last_played() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_played_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::last_played() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.last_played)
  return _internal_last_played();
}
inline void CharacterInfo::unsafe_arena_set_allocated_last_played(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_played) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_played_);
  }
  _impl_.last_played_ = last_played;
  if (last_played) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.CharacterInfo.last_played)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::release_last_played() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::unsafe_arena_release_last_played() {
  // @@protoc_insertion_point(field_release:user.CharacterInfo.last_played)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::_internal_mutable_last_played() {
  
  if (_impl_.last_played_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_played_ = p;
  }
  return _impl_.last_played_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::mutable_last_played() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_played();
  // @@protoc_insertion_point(field_mutable:user.CharacterInfo.last_played)
  return _msg;
}
inline void CharacterInfo::set_allocated_last_played(::PROTOBUF_NAMESPACE_ID::Timestamp* last_played) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_played_);
  }
  if (last_played) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_played));
    if (message_arena != submessage_arena) {
      last_played = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_played, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.last_played_ = last_played;
  // @@protoc_insertion_point(field_set_allocated:user.CharacterInfo.last_played)
}

// .google.protobuf.Timestamp created_at = 8;
inline bool CharacterInfo::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool CharacterInfo::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CharacterInfo::created_at() const {
  // @@protoc_insertion_point(field_get:user.CharacterInfo.created_at)
  return _internal_created_at();
}
inline void CharacterInfo::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.CharacterInfo.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:user.CharacterInfo.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CharacterInfo::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:user.CharacterInfo.created_at)
  return _msg;
}
inline void CharacterInfo::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:user.CharacterInfo.created_at)
}

// -------------------------------------------------------------------

// WorldServerInfoRes

// .types.Result result = 1;
inline void WorldServerInfoRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result WorldServerInfoRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result WorldServerInfoRes::result() const {
  // @@protoc_insertion_point(field_get:user.WorldServerInfoRes.result)
  return _internal_result();
}
inline void WorldServerInfoRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void WorldServerInfoRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:user.WorldServerInfoRes.result)
}

// repeated .user.ServerInfo server_infos = 2;
inline int WorldServerInfoRes::_internal_server_infos_size() const {
  return _impl_.server_infos_.size();
}
inline int WorldServerInfoRes::server_infos_size() const {
  return _internal_server_infos_size();
}
inline void WorldServerInfoRes::clear_server_infos() {
  _impl_.server_infos_.Clear();
}
inline ::user::ServerInfo* WorldServerInfoRes::mutable_server_infos(int index) {
  // @@protoc_insertion_point(field_mutable:user.WorldServerInfoRes.server_infos)
  return _impl_.server_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ServerInfo >*
WorldServerInfoRes::mutable_server_infos() {
  // @@protoc_insertion_point(field_mutable_list:user.WorldServerInfoRes.server_infos)
  return &_impl_.server_infos_;
}
inline const ::user::ServerInfo& WorldServerInfoRes::_internal_server_infos(int index) const {
  return _impl_.server_infos_.Get(index);
}
inline const ::user::ServerInfo& WorldServerInfoRes::server_infos(int index) const {
  // @@protoc_insertion_point(field_get:user.WorldServerInfoRes.server_infos)
  return _internal_server_infos(index);
}
inline ::user::ServerInfo* WorldServerInfoRes::_internal_add_server_infos() {
  return _impl_.server_infos_.Add();
}
inline ::user::ServerInfo* WorldServerInfoRes::add_server_infos() {
  ::user::ServerInfo* _add = _internal_add_server_infos();
  // @@protoc_insertion_point(field_add:user.WorldServerInfoRes.server_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::ServerInfo >&
WorldServerInfoRes::server_infos() const {
  // @@protoc_insertion_point(field_list:user.WorldServerInfoRes.server_infos)
  return _impl_.server_infos_;
}

// -------------------------------------------------------------------

// CreateCharacterReq

// int32 server_id = 1;
inline void CreateCharacterReq::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t CreateCharacterReq::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t CreateCharacterReq::server_id() const {
  // @@protoc_insertion_point(field_get:user.CreateCharacterReq.server_id)
  return _internal_server_id();
}
inline void CreateCharacterReq::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void CreateCharacterReq::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:user.CreateCharacterReq.server_id)
}

// string character_name = 2;
inline void CreateCharacterReq::clear_character_name() {
  _impl_.character_name_.ClearToEmpty();
}
inline const std::string& CreateCharacterReq::character_name() const {
  // @@protoc_insertion_point(field_get:user.CreateCharacterReq.character_name)
  return _internal_character_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateCharacterReq::set_character_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.character_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.CreateCharacterReq.character_name)
}
inline std::string* CreateCharacterReq::mutable_character_name() {
  std::string* _s = _internal_mutable_character_name();
  // @@protoc_insertion_point(field_mutable:user.CreateCharacterReq.character_name)
  return _s;
}
inline const std::string& CreateCharacterReq::_internal_character_name() const {
  return _impl_.character_name_.Get();
}
inline void CreateCharacterReq::_internal_set_character_name(const std::string& value) {
  
  _impl_.character_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateCharacterReq::_internal_mutable_character_name() {
  
  return _impl_.character_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateCharacterReq::release_character_name() {
  // @@protoc_insertion_point(field_release:user.CreateCharacterReq.character_name)
  return _impl_.character_name_.Release();
}
inline void CreateCharacterReq::set_allocated_character_name(std::string* character_name) {
  if (character_name != nullptr) {
    
  } else {
    
  }
  _impl_.character_name_.SetAllocated(character_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.character_name_.IsDefault()) {
    _impl_.character_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.CreateCharacterReq.character_name)
}

// -------------------------------------------------------------------

// CreateCharacterRes

// .types.Result result = 1;
inline void CreateCharacterRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result CreateCharacterRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result CreateCharacterRes::result() const {
  // @@protoc_insertion_point(field_get:user.CreateCharacterRes.result)
  return _internal_result();
}
inline void CreateCharacterRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void CreateCharacterRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:user.CreateCharacterRes.result)
}

// .user.CharacterInfo character_info = 2;
inline bool CreateCharacterRes::_internal_has_character_info() const {
  return this != internal_default_instance() && _impl_.character_info_ != nullptr;
}
inline bool CreateCharacterRes::has_character_info() const {
  return _internal_has_character_info();
}
inline void CreateCharacterRes::clear_character_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.character_info_ != nullptr) {
    delete _impl_.character_info_;
  }
  _impl_.character_info_ = nullptr;
}
inline const ::user::CharacterInfo& CreateCharacterRes::_internal_character_info() const {
  const ::user::CharacterInfo* p = _impl_.character_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::user::CharacterInfo&>(
      ::user::_CharacterInfo_default_instance_);
}
inline const ::user::CharacterInfo& CreateCharacterRes::character_info() const {
  // @@protoc_insertion_point(field_get:user.CreateCharacterRes.character_info)
  return _internal_character_info();
}
inline void CreateCharacterRes::unsafe_arena_set_allocated_character_info(
    ::user::CharacterInfo* character_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.character_info_);
  }
  _impl_.character_info_ = character_info;
  if (character_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:user.CreateCharacterRes.character_info)
}
inline ::user::CharacterInfo* CreateCharacterRes::release_character_info() {
  
  ::user::CharacterInfo* temp = _impl_.character_info_;
  _impl_.character_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::user::CharacterInfo* CreateCharacterRes::unsafe_arena_release_character_info() {
  // @@protoc_insertion_point(field_release:user.CreateCharacterRes.character_info)
  
  ::user::CharacterInfo* temp = _impl_.character_info_;
  _impl_.character_info_ = nullptr;
  return temp;
}
inline ::user::CharacterInfo* CreateCharacterRes::_internal_mutable_character_info() {
  
  if (_impl_.character_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::user::CharacterInfo>(GetArenaForAllocation());
    _impl_.character_info_ = p;
  }
  return _impl_.character_info_;
}
inline ::user::CharacterInfo* CreateCharacterRes::mutable_character_info() {
  ::user::CharacterInfo* _msg = _internal_mutable_character_info();
  // @@protoc_insertion_point(field_mutable:user.CreateCharacterRes.character_info)
  return _msg;
}
inline void CreateCharacterRes::set_allocated_character_info(::user::CharacterInfo* character_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.character_info_;
  }
  if (character_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(character_info);
    if (message_arena != submessage_arena) {
      character_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.character_info_ = character_info;
  // @@protoc_insertion_point(field_set_allocated:user.CreateCharacterRes.character_info)
}

// -------------------------------------------------------------------

// GetCharacterListReq

// int32 server_id = 2;
inline void GetCharacterListReq::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t GetCharacterListReq::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t GetCharacterListReq::server_id() const {
  // @@protoc_insertion_point(field_get:user.GetCharacterListReq.server_id)
  return _internal_server_id();
}
inline void GetCharacterListReq::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void GetCharacterListReq::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:user.GetCharacterListReq.server_id)
}

// -------------------------------------------------------------------

// GetCharacterListRes

// .types.Result result = 1;
inline void GetCharacterListRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result GetCharacterListRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result GetCharacterListRes::result() const {
  // @@protoc_insertion_point(field_get:user.GetCharacterListRes.result)
  return _internal_result();
}
inline void GetCharacterListRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void GetCharacterListRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:user.GetCharacterListRes.result)
}

// repeated .user.CharacterInfo character_infos = 2;
inline int GetCharacterListRes::_internal_character_infos_size() const {
  return _impl_.character_infos_.size();
}
inline int GetCharacterListRes::character_infos_size() const {
  return _internal_character_infos_size();
}
inline void GetCharacterListRes::clear_character_infos() {
  _impl_.character_infos_.Clear();
}
inline ::user::CharacterInfo* GetCharacterListRes::mutable_character_infos(int index) {
  // @@protoc_insertion_point(field_mutable:user.GetCharacterListRes.character_infos)
  return _impl_.character_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::CharacterInfo >*
GetCharacterListRes::mutable_character_infos() {
  // @@protoc_insertion_point(field_mutable_list:user.GetCharacterListRes.character_infos)
  return &_impl_.character_infos_;
}
inline const ::user::CharacterInfo& GetCharacterListRes::_internal_character_infos(int index) const {
  return _impl_.character_infos_.Get(index);
}
inline const ::user::CharacterInfo& GetCharacterListRes::character_infos(int index) const {
  // @@protoc_insertion_point(field_get:user.GetCharacterListRes.character_infos)
  return _internal_character_infos(index);
}
inline ::user::CharacterInfo* GetCharacterListRes::_internal_add_character_infos() {
  return _impl_.character_infos_.Add();
}
inline ::user::CharacterInfo* GetCharacterListRes::add_character_infos() {
  ::user::CharacterInfo* _add = _internal_add_character_infos();
  // @@protoc_insertion_point(field_add:user.GetCharacterListRes.character_infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::user::CharacterInfo >&
GetCharacterListRes::character_infos() const {
  // @@protoc_insertion_point(field_list:user.GetCharacterListRes.character_infos)
  return _impl_.character_infos_;
}

// -------------------------------------------------------------------

// PlayStartCharacterReq

// int32 server_id = 1;
inline void PlayStartCharacterReq::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t PlayStartCharacterReq::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t PlayStartCharacterReq::server_id() const {
  // @@protoc_insertion_point(field_get:user.PlayStartCharacterReq.server_id)
  return _internal_server_id();
}
inline void PlayStartCharacterReq::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void PlayStartCharacterReq::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:user.PlayStartCharacterReq.server_id)
}

// int64 character_id = 2;
inline void PlayStartCharacterReq::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t PlayStartCharacterReq::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t PlayStartCharacterReq::character_id() const {
  // @@protoc_insertion_point(field_get:user.PlayStartCharacterReq.character_id)
  return _internal_character_id();
}
inline void PlayStartCharacterReq::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void PlayStartCharacterReq::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:user.PlayStartCharacterReq.character_id)
}

// -------------------------------------------------------------------

// PlayStartCharacterRes

// .types.Result result = 1;
inline void PlayStartCharacterRes::clear_result() {
  _impl_.result_ = 0;
}
inline ::types::Result PlayStartCharacterRes::_internal_result() const {
  return static_cast< ::types::Result >(_impl_.result_);
}
inline ::types::Result PlayStartCharacterRes::result() const {
  // @@protoc_insertion_point(field_get:user.PlayStartCharacterRes.result)
  return _internal_result();
}
inline void PlayStartCharacterRes::_internal_set_result(::types::Result value) {
  
  _impl_.result_ = value;
}
inline void PlayStartCharacterRes::set_result(::types::Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:user.PlayStartCharacterRes.result)
}

// int32 server_id = 2;
inline void PlayStartCharacterRes::clear_server_id() {
  _impl_.server_id_ = 0;
}
inline int32_t PlayStartCharacterRes::_internal_server_id() const {
  return _impl_.server_id_;
}
inline int32_t PlayStartCharacterRes::server_id() const {
  // @@protoc_insertion_point(field_get:user.PlayStartCharacterRes.server_id)
  return _internal_server_id();
}
inline void PlayStartCharacterRes::_internal_set_server_id(int32_t value) {
  
  _impl_.server_id_ = value;
}
inline void PlayStartCharacterRes::set_server_id(int32_t value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:user.PlayStartCharacterRes.server_id)
}

// int64 character_id = 3;
inline void PlayStartCharacterRes::clear_character_id() {
  _impl_.character_id_ = int64_t{0};
}
inline int64_t PlayStartCharacterRes::_internal_character_id() const {
  return _impl_.character_id_;
}
inline int64_t PlayStartCharacterRes::character_id() const {
  // @@protoc_insertion_point(field_get:user.PlayStartCharacterRes.character_id)
  return _internal_character_id();
}
inline void PlayStartCharacterRes::_internal_set_character_id(int64_t value) {
  
  _impl_.character_id_ = value;
}
inline void PlayStartCharacterRes::set_character_id(int64_t value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:user.PlayStartCharacterRes.character_id)
}

// string world_server_address = 4;
inline void PlayStartCharacterRes::clear_world_server_address() {
  _impl_.world_server_address_.ClearToEmpty();
}
inline const std::string& PlayStartCharacterRes::world_server_address() const {
  // @@protoc_insertion_point(field_get:user.PlayStartCharacterRes.world_server_address)
  return _internal_world_server_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayStartCharacterRes::set_world_server_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.world_server_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:user.PlayStartCharacterRes.world_server_address)
}
inline std::string* PlayStartCharacterRes::mutable_world_server_address() {
  std::string* _s = _internal_mutable_world_server_address();
  // @@protoc_insertion_point(field_mutable:user.PlayStartCharacterRes.world_server_address)
  return _s;
}
inline const std::string& PlayStartCharacterRes::_internal_world_server_address() const {
  return _impl_.world_server_address_.Get();
}
inline void PlayStartCharacterRes::_internal_set_world_server_address(const std::string& value) {
  
  _impl_.world_server_address_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayStartCharacterRes::_internal_mutable_world_server_address() {
  
  return _impl_.world_server_address_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayStartCharacterRes::release_world_server_address() {
  // @@protoc_insertion_point(field_release:user.PlayStartCharacterRes.world_server_address)
  return _impl_.world_server_address_.Release();
}
inline void PlayStartCharacterRes::set_allocated_world_server_address(std::string* world_server_address) {
  if (world_server_address != nullptr) {
    
  } else {
    
  }
  _impl_.world_server_address_.SetAllocated(world_server_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.world_server_address_.IsDefault()) {
    _impl_.world_server_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:user.PlayStartCharacterRes.world_server_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_user_2eproto
