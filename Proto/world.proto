syntax = "proto3";

package world;

import "types.proto";
import "google/protobuf/timestamp.proto";

message RegisterServerReq {
	option (types.message_id) = kRegisterServerReq;
	string server_address = 1;
	types.ServerType server_type = 2;
	string level_map_name =3;
}

message RegisterServerRes {
	option (types.message_id) = kRegisterServerRes;
	types.Result result = 1;
	int32 server_id = 2;
}

message ServerPingReq {
	option (types.message_id) = kServerPingReq;
	int32 server_id = 1;
}

message ServerPingRes {
	option (types.message_id) = kServerPingReq;
	types.Result result =1;
	int32 server_id = 2;
}

message HelloWorldServer {
	option (types.message_id) = kHelloWorldServer;
	string user_id = 1;
	string access_token = 2;
	int64 playing_character_id = 3;
	int32 playing_server_id = 4;
}

message HelloWorldClient {
	option (types.message_id) = kHelloWorldClient;
	int32 map_uid = 1;
	int32 server_tick_interval_ms = 2;
}

message ClientEnterMapReq {
	option (types.message_id) = kClientEnterMapReq;
	int32 map_uid = 1;
	types.CharacterPose character_pos = 2;
}

message ClientEnterMapRes {
	option (types.message_id) = kClientEnterMapRes;
	types.Result result = 1;
	types.SectionInfo section_info = 4;
}

message ClientEnterMapNotify {
	option (types.message_id) = kClientEnterMapNotify;
	types.SectionInfo section_info = 1;
}

message ClientLeaveMapNotify {
	option (types.message_id) = kClientLeaveMapNotify;
	types.SectionInfo section_info = 2;
}

message ClientMoveReq {
	option (types.message_id) = kClientMoveReq;
	types.CharacterPose character_pos = 1;
	float client_timestamp = 3;
}

message ClientMoveRes {
	option (types.message_id) = kClientMoveRes;
	types.CharacterPose character_pos = 2;
	float client_timestamp = 3;
	google.protobuf.Timestamp server_timestamp = 4;
}

message ClientActionReq {
	option (types.message_id) = kClientActionReq;
	types.ClientAction client_action = 1;
	float client_timestamp = 2;
}

message ClientActionRes {
	option (types.message_id) = kClientActionRes;
	types.Result result = 1;
	types.ClientAction client_action = 2;
	float client_timestamp = 3;
	google.protobuf.Timestamp server_timestamp = 4;
	int64 action_id = 5;
}

message OtherClientActionNotify {
	option (types.message_id) = kOtherClientActionNotify;
	int64 character_id = 1;
	types.ClientAction client_action = 2;
}

message OtherClientEnterNotify {
	option (types.message_id) = kOtherClientEnterNotify;
	types.PcInfo pc_info = 1;
}

message OtherClientLeaveNotify {
	option (types.message_id) = kOtherClientLeaveNotify;
	int64 character_id = 1;
}

message OtherClientMoveNotify {
	option (types.message_id) = kOtherClientMoveNotify;
	int64 character_id = 1;
	types.CharacterPose character_pos = 2;
	types.ClientAction client_action = 3;
}

message ChangeServerTickIntervalReq {
	option (types.message_id) = kChangeServerTickIntervalReq;
	int32 server_tick_interval_ms = 2;
}

message ChangeServerTickIntervalRes {
	option (types.message_id) = kChangeServerTickIntervalRes;
	int32 server_tick_interval_ms = 2;
}

message ServerTickIntervalChangedNotify {
	option (types.message_id) = kServerTickIntervalChangedNotify;
	int32 server_tick_interval_ms = 2;
}

message SectionOwnershipChangedNotify {
	option (types.message_id) = kSectionOwnershipChangedNotify;
	int64 owner_character_id = 1;
}

message SpawnNpcOnSectionReq {
	option (types.message_id) = kSpawnNpcOnSectionReq;
	int32 spawner_id = 1;
	repeated types.NpcSpawnInfo npc_spawn_infos = 2;
	float client_timestamp = 4;
}

message SpawnNpcOnSectionRes {
	option (types.message_id) = kSpawnNpcOnSectionRes;
	types.Result result = 1;
	int32 spawner_id = 2;
	float next_client_timestamp = 3;
}

message SpawnNpcOnSectionNotify {
	option (types.message_id) = kSpawnNpcOnSectionNotify;
	int32 spawner_id = 1;
	repeated types.NpcInfo npc_infos = 2;
}

message SpawnProjectileOnSectionReq {
	option (types.message_id) = kSpawnProjectileOnSectionReq;
	int64 action_id = 1;
	types.Pose pose = 2;
	float projectile_speed = 3;
	types.Pose character_pose = 4;
}

message SpawnProjectileOnSectionRes {
	option (types.message_id) = kSpawnProjectileOnSectionRes;
	types.Result result = 1;
	repeated types.Vector3 debug_trajectory = 2;
	int64 object_id = 3;
}

message SpawnProjectileOnSectionNotify {
	option (types.message_id) = kSpawnProjectileOnSectionNotify;
	types.ProjectileInfo projectile_info = 1;
}

message HitObjectByProjectileReq {
	option (types.message_id) = kHitObjectByProjectileReq;
	int64 hit_object_id = 1;
	types.Vector3 on_hit_location = 2;
	int64 projectile_object_id = 3;
}

message HitObjectByProjectileRes {
	option (types.message_id) = kHitObjectByProjectileRes;
	types.Result result = 1;
}

message HitObjectByProjectileNotify {
	option (types.message_id) = kHitObjectByProjectileNotify;
	int64 projectile_object_id = 1;
	int64 object_id = 2;
	int64 current_hp = 3;
	bool is_alive = 4;
}

message DespawnNpcOnSectionNotify {
	option (types.message_id) = kDespawnNpcOnSectionNotify;
	int64 object_id = 1;
}

message DespawnProjectileOnSectionNotify {
	option (types.message_id) = kDespawnProjectileOnSectionNotify;
	int64 object_id = 1;
}

message DebugSimulationPositionNotify {
	option (types.message_id) = kDebugSimulationPositionNotify;
	types.Vector3 position = 1;
	types.Color color = 2;
	types.DebugShape shape = 3;
	types.DebugShapeInfo shape_info = 4;
}